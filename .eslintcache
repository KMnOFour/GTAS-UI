[{"C:\\DEV\\GitHub\\GTAS-UI\\src\\index.js":"1","C:\\DEV\\GitHub\\GTAS-UI\\src\\serviceWorker.js":"2","C:\\DEV\\GitHub\\GTAS-UI\\src\\i18n.js":"3","C:\\DEV\\GitHub\\GTAS-UI\\src\\App.js":"4","C:\\DEV\\GitHub\\GTAS-UI\\src\\utils\\constants.js":"5","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\modal\\GModal.js":"6","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\seatChart\\SeatChart.js":"7","C:\\DEV\\GitHub\\GTAS-UI\\src\\context\\authenticator\\Authenticator.js":"8","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\auxiliary\\Auxiliary.js":"9","C:\\DEV\\GitHub\\GTAS-UI\\src\\context\\translation\\LiveEditContext.js":"10","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\xl8\\Xl8.js":"11","C:\\DEV\\GitHub\\GTAS-UI\\src\\context\\data\\LookupContext.js":"12","C:\\DEV\\GitHub\\GTAS-UI\\src\\context\\roleAuthenticator\\RoleAuthenticator.js":"13","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\login\\SignUp.js":"14","C:\\DEV\\GitHub\\GTAS-UI\\src\\context\\user\\UserContext.js":"15","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\login\\ResetPassword.js":"16","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\login\\Login.js":"17","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\login\\ForgotPassword.js":"18","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\page404\\Page404.js":"19","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\dashboard\\Dashboard.js":"20","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\home\\Home.js":"21","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\flights\\Flights.js":"22","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\apis\\APIS.js":"23","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\vetting\\Vetting.js":"24","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\PaxDetail.js":"25","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\flightHistory\\FlightHistory.js":"26","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\summary\\Summary.js":"27","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\linkAnalysis\\LinkAnalysis.js":"28","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\Tools.js":"29","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\poe\\POE.js":"30","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\queryrules\\Queries.js":"31","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\queryrules\\Rules.js":"32","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\queryrules\\QRDetails.js":"33","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\about\\About.js":"34","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\pnr\\PNR.js":"35","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\watchlist\\Watchlist.js":"36","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\Admin.js":"37","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\search\\Search.js":"38","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\flightPax\\FlightPax.js":"39","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\manageUsers\\ManageUsers.js":"40","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\fileDownload\\FileDownload.js":"41","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\errorLog\\ErrorLog.js":"42","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\auditLog\\AuditLog.js":"43","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\pageUnauthorized\\PageUnauthorized.js":"44","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\CodeEditor.js":"45","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\airport\\Airport.js":"46","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\carrier\\Carrier.js":"47","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\uploadAttachment\\UploadAttachment.js":"48","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\country\\Country.js":"49","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\hitCats\\HitCats.js":"50","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\creditcardtype\\CreditCardType.js":"51","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\settings\\Settings.js":"52","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\loaderStats\\LoaderStats.js":"53","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\noteCats\\NoteCats.js":"54","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\lang\\LanguageEditor.js":"55","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\signUpRequests\\SignUpRequests.js":"56","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\noteCats\\NoteModal.js":"57","C:\\DEV\\GitHub\\GTAS-UI\\src\\utils\\utils.js":"58","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\signUpRequests\\SignUpRequestModal.js":"59","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\settings\\settingModal.js":"60","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\hitCats\\HitModal.js":"61","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\creditcardtype\\CreditCardTypeModal.js":"62","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\country\\CountryModal.js":"63","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\uploadAttachment\\AttachmentModal.js":"64","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\seatChart\\seat\\Seat.js":"65","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\seatChart\\seatChartCard\\SeatChartCard.js":"66","C:\\DEV\\GitHub\\GTAS-UI\\src\\services\\serviceWrapper.js":"67","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\seatChart\\legend\\Legend.js":"68","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\loading\\Loading.js":"69","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\confirmationModal\\Confirm.js":"70","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\confirmationModal\\ConfirmationModal.js":"71","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\toast\\Toast.js":"72","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\labelledInput\\LabelledInput.js":"73","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\main\\Main.js":"74","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\filterForm2\\FilterForm.js":"75","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\sidenavContainer\\SidenavContainer.js":"76","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\table\\Table.js":"77","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\title\\Title.js":"78","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\form\\Form.js":"79","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\watchlist\\constants.js":"80","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\carrier\\CarrierModal.js":"81","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\airport\\AirportModal.js":"82","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\manageUsers\\UserModal.js":"83","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\watchlist\\WLModal.js":"84","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\queryrules\\QRModal.js":"85","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\about\\config.js":"86","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\modal\\Modal.js":"87","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\manageUsers\\changePasswordModal\\ChangePasswordModal.js":"88","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\countdownBadge\\CountdownBadge.js":"89","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\externalLink\\ExternalLink.js":"90","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\flightBadge\\FlightBadge.js":"91","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\CSVReader\\CSVReader.js":"92","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\cardWithTable\\CardWithTable.js":"93","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\segmentTable\\SegmentTable.js":"94","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\kanban\\Kanban.js":"95","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\errorBoundary\\ErrorBoundary.js":"96","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\graph\\Graph.js":"97","C:\\DEV\\GitHub\\GTAS-UI\\src\\services\\genericService.js":"98","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\seatChart\\seat\\SeatInfoModal.js":"99","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\dateTimePicker\\DateTimePicker.js":"100","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\select\\Select.js":"101","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\file\\File.js":"102","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\label\\Label.js":"103","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\textarea\\Textarea.js":"104","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\text\\Text.js":"105","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\checkbox\\Checkbox.js":"106","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\checkboxGroup\\CheckboxGroup.js":"107","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\addToWatchList\\AddToWatchlist.js":"108","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\stepper\\Stepper.js":"109","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\createManualHit\\CreateManualHit.js":"110","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\changeHitStatus\\ChangeHitStatus.js":"111","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\notification\\Notification.js":"112","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\downloadReports\\DownloadReports.js":"113","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\eventNotesModal\\EventNotesModal.js":"114","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\paxInfo\\PaxInfo.js":"115","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\tabs\\Tabs.js":"116","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\vetting\\biographicInfo\\BiographicInfo.js":"117","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\raqb\\constants.js":"118","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\raqb\\RAQB.js":"119","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\overlay\\Overlay.js":"120","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\graph\\structure.js":"121","C:\\DEV\\GitHub\\GTAS-UI\\src\\services\\configService.js":"122","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\LabelledInputDecorator.js":"123","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\checkboxGroup\\GroupCheckBox.js":"124","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\raqb\\utils.js":"125","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\errorText\\ErrorText.js":"126","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\graph\\utils.js":"127","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\raqb\\config.js":"128","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\home\\LangModal.js":"129","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\manageUsers\\changePassword\\ChangePassword.js":"130","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\header\\Header.js":"131"},{"size":483,"mtime":1604946080076,"results":"132","hashOfConfig":"133"},{"size":5068,"mtime":1597233324932,"results":"134","hashOfConfig":"133"},{"size":1297,"mtime":1604946080066,"results":"135","hashOfConfig":"133"},{"size":18599,"mtime":1607220021878,"results":"136","hashOfConfig":"133"},{"size":2143,"mtime":1607220021895,"results":"137","hashOfConfig":"133"},{"size":641,"mtime":1596216013311,"results":"138","hashOfConfig":"133"},{"size":5020,"mtime":1605569295493,"results":"139","hashOfConfig":"133"},{"size":483,"mtime":1607220021883,"results":"140","hashOfConfig":"133"},{"size":156,"mtime":1602267306633,"results":"141","hashOfConfig":"133"},{"size":2101,"mtime":1605569295522,"results":"142","hashOfConfig":"133"},{"size":1123,"mtime":1602792065724,"results":"143","hashOfConfig":"133"},{"size":1753,"mtime":1604946080062,"results":"144","hashOfConfig":"133"},{"size":800,"mtime":1604946080063,"results":"145","hashOfConfig":"133"},{"size":5465,"mtime":1607220021893,"results":"146","hashOfConfig":"133"},{"size":2198,"mtime":1602792065728,"results":"147","hashOfConfig":"133"},{"size":3808,"mtime":1607220021890,"results":"148","hashOfConfig":"133"},{"size":4073,"mtime":1607220021888,"results":"149","hashOfConfig":"133"},{"size":2786,"mtime":1607220021885,"results":"150","hashOfConfig":"133"},{"size":726,"mtime":1602792065782,"results":"151","hashOfConfig":"133"},{"size":540,"mtime":1597604450698,"results":"152","hashOfConfig":"133"},{"size":1554,"mtime":1606887868103,"results":"153","hashOfConfig":"133"},{"size":11910,"mtime":1607140368176,"results":"154","hashOfConfig":"133"},{"size":2244,"mtime":1607203332983,"results":"155","hashOfConfig":"133"},{"size":17392,"mtime":1607133534028,"results":"156","hashOfConfig":"133"},{"size":9817,"mtime":1607145365524,"results":"157","hashOfConfig":"133"},{"size":3245,"mtime":1606769341757,"results":"158","hashOfConfig":"133"},{"size":6866,"mtime":1607203332984,"results":"159","hashOfConfig":"133"},{"size":559,"mtime":1606769341758,"results":"160","hashOfConfig":"133"},{"size":2881,"mtime":1605800078640,"results":"161","hashOfConfig":"133"},{"size":422,"mtime":1606769341765,"results":"162","hashOfConfig":"133"},{"size":3588,"mtime":1606769341776,"results":"163","hashOfConfig":"133"},{"size":8102,"mtime":1606769341779,"results":"164","hashOfConfig":"133"},{"size":4254,"mtime":1606769341773,"results":"165","hashOfConfig":"133"},{"size":1535,"mtime":1606828945475,"results":"166","hashOfConfig":"133"},{"size":12655,"mtime":1606828945471,"results":"167","hashOfConfig":"133"},{"size":10627,"mtime":1607140368180,"results":"168","hashOfConfig":"133"},{"size":2406,"mtime":1605569295532,"results":"169","hashOfConfig":"133"},{"size":4275,"mtime":1606828945473,"results":"170","hashOfConfig":"133"},{"size":10565,"mtime":1607140368175,"results":"171","hashOfConfig":"133"},{"size":8798,"mtime":1606769341728,"results":"172","hashOfConfig":"133"},{"size":3738,"mtime":1606769341720,"results":"173","hashOfConfig":"133"},{"size":4377,"mtime":1606828945465,"results":"174","hashOfConfig":"133"},{"size":4825,"mtime":1606828945464,"results":"175","hashOfConfig":"133"},{"size":625,"mtime":1602792065784,"results":"176","hashOfConfig":"133"},{"size":2151,"mtime":1606769341708,"results":"177","hashOfConfig":"133"},{"size":5319,"mtime":1606769341709,"results":"178","hashOfConfig":"133"},{"size":4834,"mtime":1606769341712,"results":"179","hashOfConfig":"133"},{"size":4368,"mtime":1605569295595,"results":"180","hashOfConfig":"133"},{"size":5056,"mtime":1606769341714,"results":"181","hashOfConfig":"133"},{"size":3966,"mtime":1606769341724,"results":"182","hashOfConfig":"133"},{"size":5000,"mtime":1606769341716,"results":"183","hashOfConfig":"133"},{"size":3307,"mtime":1606769341733,"results":"184","hashOfConfig":"133"},{"size":3585,"mtime":1606769341726,"results":"185","hashOfConfig":"133"},{"size":3875,"mtime":1606769341731,"results":"186","hashOfConfig":"133"},{"size":2436,"mtime":1605569295577,"results":"187","hashOfConfig":"133"},{"size":7047,"mtime":1605800078594,"results":"188","hashOfConfig":"133"},{"size":2371,"mtime":1605569295562,"results":"189","hashOfConfig":"133"},{"size":10200,"mtime":1607134012920,"results":"190","hashOfConfig":"133"},{"size":2867,"mtime":1606769341736,"results":"191","hashOfConfig":"133"},{"size":2839,"mtime":1606769341734,"results":"192","hashOfConfig":"133"},{"size":3240,"mtime":1605569295550,"results":"193","hashOfConfig":"133"},{"size":3275,"mtime":1606769341717,"results":"194","hashOfConfig":"133"},{"size":3899,"mtime":1606769341715,"results":"195","hashOfConfig":"133"},{"size":5773,"mtime":1606769341764,"results":"196","hashOfConfig":"133"},{"size":1171,"mtime":1602267306675,"results":"197","hashOfConfig":"133"},{"size":774,"mtime":1605569295501,"results":"198","hashOfConfig":"133"},{"size":18453,"mtime":1607218007905,"results":"199","hashOfConfig":"133"},{"size":1006,"mtime":1605569295498,"results":"200","hashOfConfig":"133"},{"size":537,"mtime":1605569295479,"results":"201","hashOfConfig":"133"},{"size":1851,"mtime":1605569295456,"results":"202","hashOfConfig":"133"},{"size":1006,"mtime":1606769341635,"results":"203","hashOfConfig":"133"},{"size":937,"mtime":1605569295519,"results":"204","hashOfConfig":"133"},{"size":8669,"mtime":1606882411197,"results":"205","hashOfConfig":"133"},{"size":266,"mtime":1605569295482,"results":"206","hashOfConfig":"133"},{"size":6044,"mtime":1606769341645,"results":"207","hashOfConfig":"133"},{"size":1036,"mtime":1606769341667,"results":"208","hashOfConfig":"133"},{"size":17022,"mtime":1607133534024,"results":"209","hashOfConfig":"133"},{"size":701,"mtime":1605569295518,"results":"210","hashOfConfig":"133"},{"size":8811,"mtime":1606828945462,"results":"211","hashOfConfig":"133"},{"size":0,"mtime":1597225384994,"results":"212","hashOfConfig":"133"},{"size":3094,"mtime":1606769341713,"results":"213","hashOfConfig":"133"},{"size":4956,"mtime":1606769341711,"results":"214","hashOfConfig":"133"},{"size":10324,"mtime":1606769341730,"results":"215","hashOfConfig":"133"},{"size":6472,"mtime":1607140368178,"results":"216","hashOfConfig":"133"},{"size":26511,"mtime":1606769341775,"results":"217","hashOfConfig":"133"},{"size":5106,"mtime":1606828945477,"results":"218","hashOfConfig":"133"},{"size":1031,"mtime":1605569295484,"results":"219","hashOfConfig":"133"},{"size":785,"mtime":1605569295559,"results":"220","hashOfConfig":"133"},{"size":2704,"mtime":1605800078516,"results":"221","hashOfConfig":"133"},{"size":280,"mtime":1602267306638,"results":"222","hashOfConfig":"133"},{"size":1530,"mtime":1606769341647,"results":"223","hashOfConfig":"133"},{"size":984,"mtime":1606769341632,"results":"224","hashOfConfig":"133"},{"size":2149,"mtime":1606769341633,"results":"225","hashOfConfig":"133"},{"size":2470,"mtime":1605569295506,"results":"226","hashOfConfig":"133"},{"size":13532,"mtime":1606769341659,"results":"227","hashOfConfig":"133"},{"size":579,"mtime":1606828945458,"results":"228","hashOfConfig":"133"},{"size":13646,"mtime":1606769341653,"results":"229","hashOfConfig":"133"},{"size":1245,"mtime":1597604450714,"results":"230","hashOfConfig":"133"},{"size":974,"mtime":1605569295499,"results":"231","hashOfConfig":"133"},{"size":1466,"mtime":1606882411196,"results":"232","hashOfConfig":"133"},{"size":2179,"mtime":1605569295474,"results":"233","hashOfConfig":"133"},{"size":829,"mtime":1596216013287,"results":"234","hashOfConfig":"133"},{"size":503,"mtime":1596216013292,"results":"235","hashOfConfig":"133"},{"size":865,"mtime":1602792065696,"results":"236","hashOfConfig":"133"},{"size":825,"mtime":1604946080001,"results":"237","hashOfConfig":"133"},{"size":1434,"mtime":1605192318060,"results":"238","hashOfConfig":"133"},{"size":1878,"mtime":1602792065692,"results":"239","hashOfConfig":"133"},{"size":4366,"mtime":1606769341750,"results":"240","hashOfConfig":"133"},{"size":2041,"mtime":1605569295509,"results":"241","hashOfConfig":"133"},{"size":3998,"mtime":1606769341753,"results":"242","hashOfConfig":"133"},{"size":2219,"mtime":1606769341752,"results":"243","hashOfConfig":"133"},{"size":4821,"mtime":1606828945470,"results":"244","hashOfConfig":"133"},{"size":1161,"mtime":1606769341755,"results":"245","hashOfConfig":"133"},{"size":3134,"mtime":1606769341642,"results":"246","hashOfConfig":"133"},{"size":3159,"mtime":1605569295488,"results":"247","hashOfConfig":"133"},{"size":515,"mtime":1606769341674,"results":"248","hashOfConfig":"133"},{"size":789,"mtime":1606828945479,"results":"249","hashOfConfig":"133"},{"size":9536,"mtime":1605569295490,"results":"250","hashOfConfig":"133"},{"size":2717,"mtime":1604946080024,"results":"251","hashOfConfig":"133"},{"size":496,"mtime":1597225384711,"results":"252","hashOfConfig":"133"},{"size":11043,"mtime":1604946079992,"results":"253","hashOfConfig":"133"},{"size":780,"mtime":1597604169096,"results":"254","hashOfConfig":"133"},{"size":700,"mtime":1596216013278,"results":"255","hashOfConfig":"133"},{"size":711,"mtime":1605192318061,"results":"256","hashOfConfig":"133"},{"size":6384,"mtime":1606769341664,"results":"257","hashOfConfig":"133"},{"size":182,"mtime":1606828945460,"results":"258","hashOfConfig":"133"},{"size":5606,"mtime":1596216013266,"results":"259","hashOfConfig":"133"},{"size":9818,"mtime":1604946080025,"results":"260","hashOfConfig":"133"},{"size":2773,"mtime":1605569295574,"results":"261","hashOfConfig":"133"},{"size":5988,"mtime":1605569295557,"results":"262","hashOfConfig":"133"},{"size":7051,"mtime":1607220021881,"results":"263","hashOfConfig":"133"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},"ptkk7w",{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"266"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"266"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"266"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"266"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"266"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"266"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"266"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"266"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"266"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"266"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"266"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"266"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"266"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"266"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"266"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"266"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"266"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"266"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"266"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"266"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"266"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"266"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"266"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"266"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"266"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"266"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"266"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"266"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"266"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"266"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"266"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"266"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"266"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"266"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"266"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"266"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"266"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"266"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"266"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"266"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473","usedDeprecatedRules":"266"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"266"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"266"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"266"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"503","usedDeprecatedRules":"266"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"266"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"266"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"266"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531","usedDeprecatedRules":"266"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"266"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"266"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"266"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"266"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546","usedDeprecatedRules":"266"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"266"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"558","usedDeprecatedRules":"266"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"571","usedDeprecatedRules":"266"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"266"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"266"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"266"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587","usedDeprecatedRules":"266"},"C:\\DEV\\GitHub\\GTAS-UI\\src\\index.js",[],["588","589"],"C:\\DEV\\GitHub\\GTAS-UI\\src\\serviceWorker.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\i18n.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\App.js",["590","591"],"C:\\DEV\\GitHub\\GTAS-UI\\src\\utils\\constants.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\modal\\GModal.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\seatChart\\SeatChart.js",["592","593","594"],"import React, { useEffect, useState } from \"react\";\r\nimport Seat from \"./seat/Seat\";\r\nimport { Container, Row, CardDeck, Card } from \"react-bootstrap\";\r\nimport { seats } from \"../../services/serviceWrapper\";\r\nimport { asArray, localeDate } from \"../../utils/utils\";\r\nimport { Link, useParams } from \"@reach/router\";\r\n// import SeatInfo from \"./seatInfo/SeatInfo\";\r\nimport Legend from \"./legend/Legend\";\r\n// import FlightInfo from \"./flightInfo/FlighInfo\";\r\nimport SeatChartCard from \"./seatChartCard/SeatChartCard\";\r\nimport Loading from \"../loading/Loading\";\r\nimport Xl8 from \"../xl8/Xl8\";\r\nimport \"./SeatChart.scss\";\r\n\r\nconst SeatChart = ({ location }) => {\r\n  const { flightId, currentPaxSeat } = useParams();\r\n  const [reservedSeatsInfo, setReservedSeatsInfo] = useState({});\r\n  const [columnWithReservedSeat, setColumnWithReservedSeat] = useState([]);\r\n  const [rowsWithReservedSeat, setRowsWithReservedSeat] = useState([]);\r\n  const [selectedSeatInfo, setSelectedSeatInfo] = useState({});\r\n  const [showPending, setShowPending] = useState(true);\r\n\r\n  const getRow = letter => {\r\n    const row = [];\r\n    columnWithReservedSeat.forEach(col => {\r\n      const seatNumber = `${col}${letter}`;\r\n      row.push(\r\n        <Seat\r\n          seatNumber={seatNumber}\r\n          seatInfo={reservedSeatsInfo[seatNumber]}\r\n          selected={currentPaxSeat === seatNumber}\r\n          key={seatNumber}\r\n          className={\r\n            selectedSeatInfo.coTravellers.includes(seatNumber) ? \"co-traveler\" : \"\"\r\n          }\r\n        />\r\n      );\r\n    });\r\n\r\n    return row;\r\n  };\r\n\r\n  const processData = seatsInfo => {\r\n    const mappedSeatInfo = {};\r\n    const colsWithReservedSeat = []; // contains all column that have at least one reserved seat.\r\n    const rowsWithReservedSeat = [];\r\n    asArray(seatsInfo).map(info => {\r\n      mappedSeatInfo[info.number] = info;\r\n\r\n      const number = info.number.slice(0, -1); //remove letter (row) from the seat\r\n      const letter = info.number.charAt(number.length);\r\n      if (colsWithReservedSeat.indexOf(number) === -1) colsWithReservedSeat.push(number);\r\n      if (rowsWithReservedSeat.indexOf(letter) === -1) rowsWithReservedSeat.push(letter);\r\n    });\r\n    setReservedSeatsInfo(mappedSeatInfo);\r\n    colsWithReservedSeat.sort((x, y) => x - y);\r\n    rowsWithReservedSeat.sort().reverse();\r\n    setColumnWithReservedSeat(colsWithReservedSeat);\r\n    setRowsWithReservedSeat(rowsWithReservedSeat);\r\n  };\r\n\r\n  const getClassNameByRow = row => {\r\n    return row === 3\r\n      ? \"right-of-middle-rows\"\r\n      : row === rowsWithReservedSeat.length - 4\r\n      ? \"left-of-middle-rows\"\r\n      : \"\";\r\n  };\r\n  useEffect(() => {\r\n    seats.get(flightId).then(res => {\r\n      processData(res);\r\n      setShowPending(false);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setSelectedSeatInfo(reservedSeatsInfo[currentPaxSeat] || {});\r\n  }, [reservedSeatsInfo]);\r\n\r\n  const flightInfoData = [\r\n    { label: <Xl8 xid=\"seat004\">Flight Number</Xl8>, value: location.state.flightNumber },\r\n    {\r\n      label: <Xl8 xid=\"seat005\">Arrival</Xl8>,\r\n      value: localeDate(location.state.arrival)\r\n    },\r\n    {\r\n      label: <Xl8 xid=\"seat006\">Departure</Xl8>,\r\n      value: localeDate(location.state.departure)\r\n    }\r\n  ];\r\n\r\n  const seatInfoData = [\r\n    { label: <Xl8 xid=\"seat007\">Last Name</Xl8>, value: selectedSeatInfo.lastName },\r\n    {\r\n      label: <Xl8 xid=\"seat008\">First Name</Xl8>,\r\n      value: selectedSeatInfo.firstName\r\n    },\r\n    {\r\n      label: <Xl8 xid=\"seat009\">Middle Name</Xl8>,\r\n      value: selectedSeatInfo.middleInitial\r\n    },\r\n    {\r\n      label: <Xl8 xid=\"seat010\">Seat Number</Xl8>,\r\n      value: selectedSeatInfo.number\r\n    }\r\n  ];\r\n  const linkToFlightPax = (\r\n    <Link to={`/gtas/flightpax/${location.state.flightId}`}>Flightpax</Link>\r\n  );\r\n\r\n  const linkToPaxdetails = (\r\n    <Link to={`/gtas/paxDetail/${selectedSeatInfo.flightId}/${selectedSeatInfo.paxId}`}>\r\n      Show passenger details\r\n    </Link>\r\n  );\r\n\r\n  return (\r\n    <Container fluid>\r\n      {showPending && <Loading></Loading>}\r\n      <div className=\"seat-chart\">\r\n        {asArray(rowsWithReservedSeat).map((row, index) => (\r\n          <Row className={getClassNameByRow(index)}>{getRow(row)}</Row>\r\n        ))}\r\n      </div>\r\n      <CardDeck className=\"seat-info-display\">\r\n        <Card>\r\n          <Card.Header>\r\n            <Xl8 xid=\"seat001\">Legend</Xl8>\r\n          </Card.Header>\r\n          <Legend cotravellersCount={selectedSeatInfo.coTravellers?.length || 0} />\r\n        </Card>\r\n        <Card>\r\n          <Card.Header>\r\n            <Xl8 xid=\"seat002\">Flight Information</Xl8>\r\n          </Card.Header>\r\n          <SeatChartCard data={flightInfoData} link={linkToFlightPax} />\r\n        </Card>\r\n        <Card>\r\n          <Card.Header>\r\n            <Xl8 xid=\"seat003\">Passenger Information</Xl8>\r\n          </Card.Header>\r\n          <SeatChartCard data={seatInfoData} link={linkToPaxdetails} />\r\n        </Card>\r\n      </CardDeck>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SeatChart;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\context\\authenticator\\Authenticator.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\auxiliary\\Auxiliary.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\context\\translation\\LiveEditContext.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\xl8\\Xl8.js",["595","596"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { hasData } from \"../../utils/utils\";\r\nimport { LiveEditContext } from \"../../context/translation/LiveEditContext\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst Xl8 = props => {\r\n  const { t } = useTranslation();\r\n  const [isEdit, setIsEdit] = useState();\r\n\r\n  const tprops = {\r\n    xid: props.xid,\r\n    orig: props.children?.toString(),\r\n    trans: t(props.xid, \"\")\r\n  };\r\n\r\n  const [translationProps] = useState(tprops);\r\n  const { getLiveEditState, action, setShowModal } = useContext(LiveEditContext);\r\n\r\n  const handleClick = ev => {\r\n    ev.stopPropagation();\r\n    ev.preventDefault();\r\n    action({ type: \"show\", data: translationProps });\r\n    setShowModal(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const editstate = getLiveEditState();\r\n    setIsEdit(editstate.isEdit);\r\n  }, []);\r\n\r\n  return isEdit ? (\r\n    <span {...translationProps} onClick={handleClick} className=\"xid\">\r\n      {t(props.xid, props.children)}\r\n    </span>\r\n  ) : (\r\n    <span {...props}>{t(props.xid, props.children)}</span>\r\n  );\r\n};\r\n\r\nexport default Xl8;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\context\\data\\LookupContext.js",["597"],"import React, { createContext, useReducer } from \"react\";\r\nimport { CTX } from \"../../utils/constants\";\r\n\r\nconst initialState = [];\r\n\r\nexport const LookupContext = createContext();\r\n\r\nconst setStorage = (key, val) => {\r\n  sessionStorage.setItem(key, JSON.stringify(val));\r\n};\r\n\r\nconst LookupProvider = ({ children }) => {\r\n  const { Provider } = LookupContext;\r\n\r\n  const LookupReducer = (state, action) => {\r\n    switch (action.type) {\r\n      case CTX.COUNTRIES: {\r\n        setStorage(CTX.COUNTRIES, action.data);\r\n        return action.data;\r\n      }\r\n      case CTX.AIRPORTS: {\r\n        setStorage(CTX.AIRPORTS, action.data);\r\n        return action.data;\r\n      }\r\n      case CTX.AIRPORTCODES: {\r\n        setStorage(CTX.AIRPORTCODES, action.data);\r\n        return action.data;\r\n      }\r\n      case CTX.CARRIERS: {\r\n        setStorage(CTX.CARRIERS, action.data);\r\n        return action.data;\r\n      }\r\n      case CTX.RULECATS: {\r\n        setStorage(CTX.RULECATS, action.data);\r\n        return action.data;\r\n      }\r\n      case CTX.CCTYPES: {\r\n        setStorage(CTX.CCTYPES, action.data);\r\n        return action.data;\r\n      }\r\n      case \"lastRule\": {\r\n        setStorage(\"lastRule\", action.data);\r\n        return action.data;\r\n      }\r\n      case \"removeRule\": {\r\n        sessionStorage.removeItem(\"lastRule\");\r\n        return [];\r\n      }\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n\r\n  const [lookupState, lookupAction] = useReducer(\r\n    LookupReducer,\r\n    sessionStorage.getItem(initialState)\r\n  );\r\n\r\n  const getLookupState = type => {\r\n    return JSON.parse(sessionStorage.getItem(type)) || initialState;\r\n  };\r\n\r\n  return <Provider value={{ getLookupState, lookupAction }}>{children}</Provider>;\r\n};\r\n\r\nexport default LookupProvider;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\context\\roleAuthenticator\\RoleAuthenticator.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\login\\SignUp.js",["598"],"import React, { useEffect, useState } from \"react\";\r\nimport { Container, Alert, Col } from \"react-bootstrap\";\r\nimport Form from \"../../components/form/Form\";\r\nimport Main from \"../../components/main/Main\";\r\nimport { signup, physicalLocations } from \"../../services/serviceWrapper\";\r\nimport LabelledInput from \"../../components/labelledInput/LabelledInput\";\r\nimport Title from \"../../components/title/Title\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport { asArray, hasData } from \"../../utils/utils\";\r\nimport { Link } from \"@reach/router\";\r\nimport \"./Login.scss\";\r\nimport { FULLPATH_TO } from \"../../utils/constants\";\r\n\r\nconst SignUp = props => {\r\n  const [errorMsg, setErrorMsg] = useState(\"\");\r\n  const [displaySuccessMsg, setDisplaySuccessMsg] = useState(false);\r\n  const [displayErrorMsg, setDisplayErrorMsg] = useState(false);\r\n  const [locations, setLocations] = useState([]);\r\n  const cb = () => {};\r\n\r\n  const signupCallback = (status, res) => {\r\n    if (hasData(res) && res.status === \"FAILURE\") {\r\n      setErrorMsg(res.message);\r\n      setDisplaySuccessMsg(false);\r\n      setDisplayErrorMsg(true);\r\n    } else {\r\n      setDisplayErrorMsg(false);\r\n      setDisplaySuccessMsg(true);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    physicalLocations.get().then(res => {\r\n      const data = asArray(res).map(location => {\r\n        return { label: location.name, value: location.id };\r\n      });\r\n      setLocations(data);\r\n    });\r\n  }, []);\r\n\r\n  // <Container className=\"sign-up-container\" fluid>\r\n  //   <Title title={<Xl8 xid=\"sup001\">Sign Up</Xl8>} />\r\n\r\n  return (\r\n    <Main className=\"unauthed bg-image\">\r\n      <Container\r\n        className=\"login d-flex align-items-center py-5 justify-content-around\"\r\n        fluid\r\n      >\r\n        <Col className=\"unauthed-form\">\r\n          {displayErrorMsg && (\r\n            <Alert variant=\"danger\" dismissible onClose={() => setDisplayErrorMsg(false)}>\r\n              {errorMsg}\r\n            </Alert>\r\n          )}\r\n\r\n          {displaySuccessMsg ? (\r\n            <>\r\n              <Alert variant=\"success\">\r\n                <Xl8 xid=\"sup009\">\r\n                  Your request has been sent! You will receive a confirmation email upon\r\n                  approval.\r\n                </Xl8>\r\n              </Alert>\r\n              <Link to=\"/\">\r\n                <Xl8 xid=\"sup010\">Home</Xl8>\r\n              </Link>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div className=\"text-center h3\">\r\n                <Xl8 xid=\"sup001\">Sign Up</Xl8>\r\n              </div>\r\n              <Form\r\n                submitService={signup.post}\r\n                title=\"\"\r\n                callback={signupCallback}\r\n                action=\"add\"\r\n                redirectTo={FULLPATH_TO.LOGIN}\r\n                cancellable\r\n                key={locations}\r\n              >\r\n                <LabelledInput\r\n                  datafield\r\n                  labelText={<Xl8 xid=\"sup002\">First Name</Xl8>}\r\n                  inputType=\"text\"\r\n                  name=\"firstName\"\r\n                  required={true}\r\n                  inputVal=\"\"\r\n                  alt=\"nothing\"\r\n                  callback={cb}\r\n                />\r\n                <LabelledInput\r\n                  datafield\r\n                  labelText={<Xl8 xid=\"sup003\">Last Name</Xl8>}\r\n                  inputType=\"text\"\r\n                  name=\"lastName\"\r\n                  required={true}\r\n                  inputVal=\"\"\r\n                  alt=\"nothing\"\r\n                  callback={cb}\r\n                />\r\n                <LabelledInput\r\n                  datafield\r\n                  labelText={<Xl8 xid=\"sup004\">User Name</Xl8>}\r\n                  inputType=\"text\"\r\n                  name=\"username\"\r\n                  required={true}\r\n                  inputVal=\"\"\r\n                  alt=\"nothing\"\r\n                  callback={cb}\r\n                />\r\n                <LabelledInput\r\n                  datafield\r\n                  labelText={<Xl8 xid=\"sup005\">Email</Xl8>}\r\n                  inputType=\"email\"\r\n                  name=\"email\"\r\n                  required={true}\r\n                  inputVal=\"\"\r\n                  alt=\"nothing\"\r\n                  callback={cb}\r\n                />\r\n                <LabelledInput\r\n                  datafield\r\n                  labelText={<Xl8 xid=\"sup006\">Phone Number</Xl8>}\r\n                  inputType=\"tel\"\r\n                  name=\"phoneNumber\"\r\n                  inputVal=\"\"\r\n                  alt=\"nothing\"\r\n                  placeholder=\"optional\"\r\n                  callback={cb}\r\n                />\r\n                <LabelledInput\r\n                  datafield\r\n                  labelText={<Xl8 xid=\"sup007\">Location</Xl8>}\r\n                  inputType=\"select\"\r\n                  name=\"signupLocationId\"\r\n                  required={true}\r\n                  inputVal=\"\"\r\n                  options={locations}\r\n                  alt=\"nothing\"\r\n                  callback={cb}\r\n                />\r\n                <LabelledInput\r\n                  datafield\r\n                  labelText={<Xl8 xid=\"sup008\">Supervisor</Xl8>}\r\n                  inputType=\"text\"\r\n                  name=\"supervisor\"\r\n                  required={true}\r\n                  inputVal=\"\"\r\n                  alt=\"nothing\"\r\n                  callback={cb}\r\n                />\r\n              </Form>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Container>\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\context\\user\\UserContext.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\login\\ResetPassword.js",["599"],"import React, { useState, useEffect } from \"react\";\r\nimport Form from \"../../components/form/Form\";\r\nimport LabelledInput from \"../../components/labelledInput/LabelledInput\";\r\nimport { resetPassword } from \"../../services/serviceWrapper\";\r\nimport { Container, Alert } from \"react-bootstrap\";\r\nimport Title from \"../../components/title/Title\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport { hasData } from \"../../utils/utils\";\r\nimport { useParams, Link } from \"@reach/router\";\r\nimport { FULLPATH_TO } from \"../../utils/constants\";\r\n\r\nconst ResetPassword = props => {\r\n  const { resetToken, username } = useParams();\r\n  const [validToken, setValidToken] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [displayErrorMessage, setDisplayErrorMessage] = useState(false);\r\n  const [displaySuccessMessage, setDisplaySuccessMessage] = useState(false);\r\n  const cb = () => {};\r\n  const passwordResetCallback = (action, res) => {\r\n    if (hasData(res) && res.status === \"FAILURE\") {\r\n      setErrorMessage(res.message);\r\n      setDisplayErrorMessage(true);\r\n    } else if (hasData(res) && res.status === \"SUCCESS\") {\r\n      setDisplaySuccessMessage(true);\r\n      setDisplayErrorMessage(false);\r\n    }\r\n  };\r\n\r\n  const preSubmitCallback = fields => {\r\n    let res = { ...fields[0], resetToken, username };\r\n\r\n    return [res];\r\n  };\r\n\r\n  useEffect(() => {\r\n    const param = \"?token=\" + resetToken;\r\n    resetPassword.isValidToken(param).then(res => {\r\n      if (hasData(res.status) && res.status === \"SUCCESS\") {\r\n        setValidToken(true);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Container className=\"password-reset-container\" fluid>\r\n      <Title title={<Xl8 xid=\"passres001\">Reset Password</Xl8>} uri={props.uri} />\r\n      {validToken ? (\r\n        <>\r\n          {displayErrorMessage && (\r\n            <Alert variant=\"danger\">\r\n              {errorMessage}\r\n              <br />\r\n              <Link to={FULLPATH_TO.FORGOTPWD}>\r\n                <Xl8 xid=\"passres002\">Send another password reset link?</Xl8>\r\n              </Link>\r\n            </Alert>\r\n          )}\r\n          {displaySuccessMessage ? (\r\n            <Alert variant=\"success\">\r\n              <Xl8 xid=\"passres003\">Your password has been reset! Click </Xl8>\r\n              <Link to={FULLPATH_TO.LOGIN}>\r\n                <Xl8 xid=\"passres004\">here</Xl8>\r\n              </Link>\r\n              <Xl8 xid=\"passres005\">to login to GTAS</Xl8>\r\n            </Alert>\r\n          ) : (\r\n            <Form\r\n              submitService={resetPassword.post}\r\n              title=\"\"\r\n              callback={passwordResetCallback}\r\n              action=\"add\"\r\n              redirectTo={FULLPATH_TO.LOGIN}\r\n              paramCallback={preSubmitCallback}\r\n              cancellable\r\n            >\r\n              <LabelledInput\r\n                datafield\r\n                labelText={<Xl8 xid=\"pass004\">New password</Xl8>}\r\n                inputType=\"password\"\r\n                name=\"password\"\r\n                required={true}\r\n                inputVal=\"\"\r\n                alt=\"nothing\"\r\n                callback={cb}\r\n                spacebetween\r\n              />\r\n              <LabelledInput\r\n                datafield\r\n                labelText={<Xl8 xid=\"pass005\">Confirm new password</Xl8>}\r\n                inputType=\"password\"\r\n                name=\"passwordConfirm\"\r\n                required={true}\r\n                inputVal=\"\"\r\n                alt=\"nothing\"\r\n                callback={cb}\r\n                spacebetween\r\n              />\r\n            </Form>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <Alert variant=\"danger\">\r\n          <Xl8 xid=\"passres006\">Invalid token provided. Please try again!</Xl8>\r\n        </Alert>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\login\\Login.js",["600","601"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport Form from \"../../components/form/Form\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport LabelledInput from \"../../components/labelledInput/LabelledInput\";\r\nimport { login } from \"../../services/serviceWrapper\";\r\nimport { Alert, Card, Button } from \"react-bootstrap\";\r\nimport { navigate, Link } from \"@reach/router\";\r\nimport { UserContext } from \"../../context/user/UserContext\";\r\n\r\nimport \"./Login.scss\";\r\n\r\nconst Login = () => {\r\n  const ctx = useContext(UserContext);\r\n  const [alertVis, setAlertVis] = useState(false);\r\n\r\n  useEffect(() => {\r\n    ctx.userAction({ type: \"logoff\" });\r\n  }, []);\r\n\r\n  const loginHandler = (status, res) => {\r\n    if (res?.userId) {\r\n      const newuser = {\r\n        authenticated: true,\r\n        fullName: `${res.lastName}, ${res.firstName}`,\r\n        userId: res.userId,\r\n        userRoles: res.roles.map(item => item.roleDescription),\r\n        // userToken: Cookies.get(\"JSESSIONID\"),\r\n        queryPageSize: 25,\r\n        userPageSize: 25,\r\n        landingPage: undefined,\r\n        emailEnabled: res.emailEnabled,\r\n        highPriorityEmail: res.highPriorityEmail\r\n      };\r\n\r\n      ctx.userAction({ user: newuser, type: \"login\" });\r\n      navigate(\"/gtas/flights\");\r\n    }\r\n\r\n    setAlertVis(true);\r\n  };\r\n\r\n  const customButton = (\r\n    <Button variant=\"outline-info\" onClick={() => navigate(\"/signup\")}>\r\n      Sign Up\r\n    </Button>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row no-gutter\">\r\n        <div className=\"d-none d-md-flex col-md-7 col-lg-7 bg-image\"></div>\r\n        <div className=\"col-md-5 col-lg-5\">\r\n          <div className=\"login d-flex align-items-center py-5\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-10 mx-auto text-center\">\r\n                  <div className=\"gtas-logo\"></div>\r\n                  <br />\r\n                  <br />\r\n                  <h3 className=\"login-heading mb-4\">GTAS</h3>\r\n                  <br />\r\n                  <Form\r\n                    title=\"\"\r\n                    submitText=\"Login\"\r\n                    submitService={login.post}\r\n                    callback={loginHandler}\r\n                    customButtons={customButton}\r\n                    id=\"loginform\"\r\n                  >\r\n                    <LabelledInput\r\n                      inputType=\"text\"\r\n                      alt=\"Enter the user name\"\r\n                      name=\"username\"\r\n                      labelText=\"\"\r\n                      placeholder=\"Username\"\r\n                      datafield=\"username\"\r\n                      required=\"required\"\r\n                      inputVal=\"\"\r\n                      autofocus=\"true\"\r\n                      className=\"login-labeled-input\"\r\n                    />\r\n                    <LabelledInput\r\n                      inputType=\"password\"\r\n                      alt=\"Enter the password\"\r\n                      name=\"password\"\r\n                      labelText=\"\"\r\n                      placeholder=\"Password\"\r\n                      datafield=\"password\"\r\n                      required=\"required\"\r\n                      inputVal=\"\"\r\n                      className=\"login-labeled-input\"\r\n                    />\r\n                  </Form>\r\n                  <Link class=\"small\" to=\"/forgot-password\">\r\n                    Forgot password?\r\n                  </Link>\r\n                  <div>\r\n                    {alertVis && (\r\n                      <Alert\r\n                        variant=\"danger\"\r\n                        dismissible\r\n                        onClose={() => setAlertVis(false)}\r\n                      >\r\n                        Login failed.\r\n                      </Alert>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\login\\ForgotPassword.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\page404\\Page404.js",["602"],"import React from \"react\";\r\nimport Title from \"../../components/title/Title\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport { Link } from \"@reach/router\";\r\n\r\nconst Page404 = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <Title title={<Xl8 xid=\"una001\">Page Not Found</Xl8>}></Title>\r\n\r\n      <div className=\"columns\">\r\n        <div className=\"column\">\r\n          <div className=\"box2\">\r\n            <div className=\"top\">\r\n              {\r\n                <Xl8 xid=\"una001\">\r\n                  You have attempted to browse to an unknown resource.\r\n                </Xl8>\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page404;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\dashboard\\Dashboard.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\home\\Home.js",["603","604","605","606","607","608","609","610","611"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Header from \"../../components/header/Header\";\r\nimport LangModal from \"./LangModal\";\r\nimport { LiveEditContext } from \"../../context/translation/LiveEditContext\";\r\nimport { hasData } from \"../../utils/utils\";\r\n\r\nconst Home = props => {\r\n  const location = props.location?.pathname;\r\n  const [showModal, setShowModal] = useState(false);\r\n  const hideModal = () => setShowModal(false);\r\n  const [xid, setXl8] = useState();\r\n  const { getLiveEditState, action, EditModal } = useContext(LiveEditContext);\r\n\r\n  useEffect(() => {\r\n    const isEdit = getLiveEditState();\r\n    setShowModal(isEdit);\r\n  }, []);\r\n  // const handleClick = ev => {\r\n  //   // show modal with this xid\r\n  //   ev.preventDefault();\r\n  //   // console.log(ev.target.attributes);\r\n\r\n  //   const id = ev.target.attributes[\"xid\"]?.value;\r\n\r\n  //   if (hasData(id)) {\r\n  //     setXl8(id);\r\n  //     setShowModal(true);\r\n  //   }\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   setTimeout(function() {\r\n  //     //Start the timer\r\n  //     const xids = document.querySelectorAll(\"[xid]\");\r\n\r\n  //     Array.from(xids).forEach(item => {\r\n  //       item.classList.add(\"xid\");\r\n  //       item.addEventListener(\"click\", handleClick);\r\n  //     });\r\n  //   }, 1000);\r\n  // }, [location]);\r\n\r\n  return (\r\n    <div>\r\n      <Header></Header>\r\n      {props.children}\r\n      {EditModal}\r\n      {/* <LangModal show={showModal} onHide={hideModal} elem={{ xid: \"foo\" }}></LangModal> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\flights\\Flights.js",["612"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport Table from \"../../components/table/Table\";\r\nimport Title from \"../../components/title/Title\";\r\nimport LabelledInput from \"../../components/labelledInput/LabelledInput\";\r\nimport FilterForm from \"../../components/filterForm2/FilterForm\";\r\nimport Main from \"../../components/main/Main\";\r\nimport SidenavContainer from \"../../components/sidenavContainer/SidenavContainer\";\r\nimport CountdownBadge from \"../../components/countdownBadge/CountdownBadge\";\r\n\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport RoleAuthenticator from \"../../context/roleAuthenticator/RoleAuthenticator\";\r\nimport { UserContext } from \"../../context/user/UserContext\";\r\n\r\nimport { Link } from \"@reach/router\";\r\nimport { flights } from \"../../services/serviceWrapper\";\r\nimport { hasData, alt, localeDate, asArray } from \"../../utils/utils\";\r\nimport { TIME, ROLE } from \"../../utils/constants\";\r\nimport { Col, Tabs, Tab } from \"react-bootstrap\";\r\nimport \"./Flights.css\";\r\n\r\nconst Flights = props => {\r\n  const cb = () => {};\r\n  const initTableState = {\r\n    pageIndex: 0,\r\n    pageSize: 50,\r\n    sortBy: [{ id: \"timer\", desc: false }]\r\n  };\r\n\r\n  const { getUserState } = useContext(UserContext);\r\n  const [data, setData] = useState();\r\n  const [hitData, setHitData] = useState();\r\n  const [allData, setAllData] = useState();\r\n  const [tab, setTab] = useState(\"all\");\r\n  const [tablekey, setTablekey] = useState(0);\r\n  const [tableState, setTableState] = useState(initTableState);\r\n\r\n  const hasAnyHits = item => {\r\n    if (item.listHitCount > 0 || item.manualHitCount > 0 || item.fuzzyHitCount > 0 || item.ruleHitCount > 0\r\n        || item.graphHitCount > 0 || item.externalHitCount > 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const setDataWrapper = (data, retainState) => {\r\n    if (!retainState) setTableState(initTableState);\r\n\r\n    const roles = getUserState().userRoles;\r\n\r\n    const parsedAll = asArray(data).map(item => {\r\n      const future = item.direction === \"O\" ? item.etd : item.eta;\r\n      item.timer = future;\r\n\r\n      if (roles.includes(ROLE.ADMIN) || roles.includes(ROLE.PAXVWR))\r\n        item.sendRowToLink = `/gtas/flightpax/${item.id}`;\r\n\r\n      const severity = alt(item.ruleHitCount, 0) + alt(item.listHitCount, 0);\r\n      item.severity = severity > 0 ? severity : \"\";\r\n\r\n      //Display null on hitcounts that are 0\r\n      if(item.listHitCount === 0) {item.listHitCount=\"\"};\r\n      if(item.ruleHitCount === 0) {item.ruleHitCount=\"\"};\r\n      if(item.graphHitCount === 0) {item.graphHitCount=\"\"};\r\n      if(item.fuzzyHitCount === 0) {item.fuzzyHitCount=\"\"};\r\n      if(item.externalHitCount === 0) {item.externalHitCount=\"\"};\r\n      if(item.manualHitCount === 0) {item.manualHitCount=\"\"};\r\n\r\n      item.hitCounts = `${item.lowPrioHitCount || 0}${item.medPrioHitCount ||\r\n      0}${item.highPrioHitCount || 0}`;\r\n      item.aggregateHitsCount = {\r\n        low: item.lowPrioHitCount,\r\n        med: item.medPrioHitCount,\r\n        high: item.highPrioHitCount\r\n      };\r\n\r\n      return item;\r\n    });\r\n\r\n    const parsedHits = parsedAll.filter(item => {\r\n      return hasAnyHits(item);\r\n    });\r\n\r\n    setAllData(alt(parsedAll, []));\r\n    setHitData(alt(parsedHits, []));\r\n\r\n    const newkey = tablekey + 1;\r\n    setTablekey(newkey);\r\n  };\r\n\r\n  //TODO: refactor\r\n  const preFetchCallback = fields => {\r\n    const range = +fields[\"hourRange\"] || 96; // default to 96 hours\r\n\r\n    let etaEnd = new Date();\r\n    etaEnd.setHours(etaEnd.getHours() + range);\r\n\r\n    const fieldscopy = Object.assign([], fields);\r\n    delete fieldscopy[\"hourRange\"]; // hourRange is not passed directly to the backend\r\n\r\n    const oneHourAgo = new Date().setHours(new Date().getHours() - 1);\r\n    let paramObject = { etaStart: oneHourAgo, etaEnd: etaEnd };\r\n\r\n    const fieldNames = Object.keys(fieldscopy);\r\n    fieldNames.forEach(name => {\r\n      if (hasData(fieldscopy[name])) {\r\n        if (name === \"destinationAirports\" || name === \"originAirports\") {\r\n          // retrieve raw comma- or whitespace-separated text, convert to array, remove empties.\r\n          const airports = fieldscopy[name]\r\n            .replace(/[,]/g, \" \")\r\n            .split(\" \")\r\n            .filter(Boolean);\r\n          paramObject[name] = [...new Set(airports)]; // scrub duplicate vals\r\n        } else paramObject[name] = fieldscopy[name];\r\n      }\r\n    });\r\n\r\n    return \"?request=\" + encodeURIComponent(JSON.stringify(paramObject));\r\n  };\r\n\r\n  const now = new Date();\r\n\r\n  const aggregateHitHeader = {\r\n    Accessor: \"hitCounts\",\r\n    Xl8: true,\r\n    Header: [\"fl024\", \"Hit Aggregates\"],\r\n    disableGroupBy: true,\r\n    Cell: ({ row }) => {\r\n      return (\r\n          <span\r\n              style={{\r\n                \"justify-content\": \"space-between\",\r\n                display: \"flex\",\r\n                \"align-items\": \"baseline\",\r\n                marginLeft: \"5px\",\r\n                marginRight: \"5px\"\r\n              }}\r\n          >\r\n          {row.original.aggregateHitsCount.low > 0 && (\r\n              <span>\r\n              <i\r\n                  className=\"fa fa-flag\"\r\n                  style={{ color: \"#FCF300\" }}\r\n                  title=\"normal severity\"\r\n              ></i>\r\n                {row.original.aggregateHitsCount.low}\r\n            </span>\r\n          )}\r\n            {row.original.aggregateHitsCount.med > 0 && (\r\n                <span>\r\n              <i\r\n                  className=\"fa fa-flag\"\r\n                  style={{ color: \"orange\" }}\r\n                  title=\"high severity\"\r\n              ></i>\r\n                  {row.original.aggregateHitsCount.med}\r\n            </span>\r\n            )}\r\n            {row.original.aggregateHitsCount.high > 0 && (\r\n                <span>\r\n              <i className=\"fa fa-flag\" style={{ color: \"red\" }} title=\"top severity\"></i>{\" \"}\r\n                  {row.original.aggregateHitsCount.high}\r\n            </span>\r\n            )}\r\n        </span>\r\n      );\r\n    }\r\n  };\r\n\r\n  const hitHeaders = [\r\n    { Accessor: \"listHitCount\", Xl8: true, Header: [\"fl013\", \"Watchlist Hits\"] },\r\n    { Accessor: \"ruleHitCount\", Xl8: true, Header: [\"fl014\", \"Rule Hits\"] },\r\n    { Accessor: \"graphHitCount\", Xl8: true, Header: [\"fl015\", \"Graph Hits\"] },\r\n    { Accessor: \"fuzzyHitCount\", Xl8: true, Header: [\"fl016\", \"Partial Hits\"] },\r\n    { Accessor: \"externalHitCount\", Xl8: true, Header: [\"fl017\", \"External Hits\"] },\r\n    { Accessor: \"manualHitCount\", Xl8: true, Header: [\"fl023\", \"Manual Hits\"] },\r\n  ];\r\n\r\n  const arrayHeaderFixer = tab !== \"hits\" ? [aggregateHitHeader] : hitHeaders;\r\n  const Headers = [\r\n    {\r\n      Accessor: \"timer\",\r\n      Xl8: true,\r\n      Header: [\"fl009\", \"Timer\"],\r\n      Cell: ({ row }) => (\r\n        <CountdownBadge\r\n          future={row.original.timer}\r\n          baseline={now}\r\n          direction={row.original.direction}\r\n        ></CountdownBadge>\r\n      )\r\n    },\r\n    {\r\n      Accessor: \"eta\",\r\n      Xl8: true,\r\n      Header: [\"fl010\", \"Arrival\"],\r\n      Cell: ({ row }) => localeDate(row.original.eta)\r\n    },\r\n    {\r\n      Accessor: \"etd\",\r\n      Xl8: true,\r\n      Header: [\"fl011\", \"Departure\"],\r\n      Cell: ({ row }) => localeDate(row.original.etd)\r\n    },\r\n      ...arrayHeaderFixer,\r\n    {\r\n      Accessor: \"passengerCount\",\r\n      Xl8: true,\r\n      Header: [\"fl018\", \"Passengers\"],\r\n      Cell: ({ row }) => (\r\n        <RoleAuthenticator\r\n          alt={row.original.passengerCount}\r\n          roles={[ROLE.ADMIN, ROLE.PAXVWR]}\r\n        >\r\n          <Link to={\"../flightpax/\" + row.original.id}>\r\n            {row.original.passengerCount}\r\n          </Link>\r\n        </RoleAuthenticator>\r\n      )\r\n    },\r\n    { Accessor: \"fullFlightNumber\", Xl8: true, Header: [\"fl019\", \"Flight\"] },\r\n    { Accessor: \"origin\", Xl8: true, Header: [\"fl020\", \"Origin\"] },\r\n    { Accessor: \"destination\", Xl8: true, Header: [\"fl021\", \"Destination\"] },\r\n    { Accessor: \"direction\", Xl8: true, Header: [\"fl022\", \"Direction\"] }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (tab === \"hits\") setData(hitData);\r\n    else setData(allData);\r\n\r\n    const newkey = tablekey + 1;\r\n    setTablekey(newkey);\r\n  }, [hitData, tab]);\r\n\r\n  const directions = [\r\n    { value: \"A\", label: \"All\" },\r\n    { value: \"I\", label: \"Inbound\" },\r\n    { value: \"O\", label: \"Outbound\" }\r\n  ];\r\n\r\n  const stateCallback = latestState => {\r\n    if (\r\n      alt(latestState.pageSize) !== alt(tableState.pageSize) ||\r\n      alt(latestState.pageIndex) !== alt(tableState.pageIndex) ||\r\n      alt(latestState.sortBy) !== alt(tableState.sortBy)\r\n    ) {\r\n      setTableState(latestState);\r\n    }\r\n  };\r\n\r\n  const getTableState = () => {\r\n    return tableState;\r\n  };\r\n\r\n  const tabs = (\r\n    <Tabs defaultActiveKey=\"all\" id=\"flightTabs\">\r\n      <Tab\r\n        eventKey=\"all\"\r\n        title={\r\n          <Xl8 xid=\"fl001\" id=\"flightTabs-tab-all\">\r\n            All\r\n          </Xl8>\r\n        }\r\n      ></Tab>\r\n      <Tab\r\n        eventKey=\"hits\"\r\n        title={\r\n          <Xl8 xid=\"fl002\" id=\"flightTabs-tab-hits\">\r\n            Hits\r\n          </Xl8>\r\n        }\r\n      ></Tab>\r\n    </Tabs>\r\n  );\r\n\r\n  const titleTabCallback = ev => {\r\n    const id = ev.split(\"-\")[2];\r\n\r\n    if (id) setTab(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SidenavContainer>\r\n        <Col className=\"notopmargin\">\r\n          <FilterForm\r\n            service={flights.get}\r\n            paramCallback={preFetchCallback}\r\n            callback={setDataWrapper}\r\n            interval={TIME.MINUTE}\r\n          >\r\n            <LabelledInput\r\n              labelText={<Xl8 xid=\"fl003\"> Origin Airports</Xl8>}\r\n              datafield=\"originAirports\"\r\n              name=\"originAirports\"\r\n              inputType=\"text\"\r\n              callback={cb}\r\n              alt={<Xl8 xid=\"0\">Origin Airports</Xl8>}\r\n            />\r\n            <LabelledInput\r\n              labelText={<Xl8 xid=\"fl004\"> Destination Airports</Xl8>}\r\n              datafield=\"destinationAirports\"\r\n              name=\"destinationAirports\"\r\n              inputType=\"text\"\r\n              callback={cb}\r\n              alt={<Xl8 xid=\"1\"> Destination Airports</Xl8>}\r\n            />\r\n            <LabelledInput\r\n              datafield=\"flightNumber\"\r\n              labelText={<Xl8 xid=\"fl005\">Flight Number</Xl8>}\r\n              inputType=\"text\"\r\n              name=\"flightNumber\"\r\n              callback={cb}\r\n              alt={<Xl8 xid=\"7\">Flight Number</Xl8>}\r\n            />\r\n            <LabelledInput\r\n              datafield=\"direction\"\r\n              inputType=\"select\"\r\n              labelText={<Xl8 xid=\"fl006\">Direction</Xl8>}\r\n              inputStyle=\"form-select\"\r\n              callback={cb}\r\n              name=\"direction\"\r\n              options={directions}\r\n              alt={<Xl8 xid=\"7\">Flight Direction</Xl8>}\r\n            />\r\n            <LabelledInput\r\n              labelText={<Xl8 xid=\"fl007\">Hour Range</Xl8>}\r\n              inputType=\"select\"\r\n              name=\"hourRange\"\r\n              inputVal=\"96\"\r\n              inputStyle=\"form-select\"\r\n              datafield=\"hourRange\"\r\n              options={[\r\n                { value: \"6\", label: \"+6 hours\" },\r\n                { value: \"12\", label: \"+12 hours\" },\r\n                { value: \"24\", label: \"+24 hours\" },\r\n                { value: \"48\", label: \"+48 hours\" },\r\n                { value: \"96\", label: \"+96 hours\" }\r\n              ]}\r\n              callback={cb}\r\n              alt=\"\"\r\n            />\r\n          </FilterForm>\r\n        </Col>\r\n      </SidenavContainer>\r\n      <Main>\r\n        <Title\r\n          title={<Xl8 xid=\"fl008\">Flights</Xl8>}\r\n          uri={props.uri}\r\n          leftChild={tabs}\r\n          leftCb={titleTabCallback}\r\n        />\r\n        <Table\r\n          data={data}\r\n          key={tablekey}\r\n          header={Headers}\r\n          callback={cb}\r\n          stateVals={getTableState}\r\n          stateCb={stateCallback}\r\n        />\r\n      </Main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Flights;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\apis\\APIS.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\vetting\\Vetting.js",["613"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport Table from \"../../components/table/Table\";\r\nimport { cases, notetypes, usersemails, hitcats } from \"../../services/serviceWrapper\";\r\nimport Title from \"../../components/title/Title\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport LabelledInput from \"../../components/labelledInput/LabelledInput\";\r\nimport FilterForm from \"../../components/filterForm2/FilterForm\";\r\nimport SidenavContainer from \"../../components/sidenavContainer/SidenavContainer\";\r\nimport Main from \"../../components/main/Main\";\r\nimport FlightBadge from \"../../components/flightBadge/FlightBadge\";\r\nimport Notification from \"../paxDetail/notification/Notification\";\r\nimport DownloadReport from \"../paxDetail/downloadReports/DownloadReports\";\r\nimport CountdownBadge from \"../../components/countdownBadge/CountdownBadge\";\r\nimport Overlay from \"../../components/overlay/Overlay\";\r\nimport RoleAuthenticator from \"../../context/roleAuthenticator/RoleAuthenticator\";\r\nimport {\r\n  hasData,\r\n  asArray,\r\n  getShortText,\r\n  isShortText,\r\n  getAge,\r\n  alt\r\n} from \"../../utils/utils\";\r\nimport { ROLE, HIT_STATUS } from \"../../utils/constants\";\r\nimport { Col, Button, DropdownButton } from \"react-bootstrap\";\r\nimport \"./Vetting.css\";\r\nimport Confirm from \"../../components/confirmationModal/Confirm\";\r\nimport EventNotesModal from \"../../components/eventNotesModal/EventNotesModal\";\r\nimport BiographicInfo from \"./biographicInfo/BiographicInfo\";\r\n\r\nconst Vetting = props => {\r\n  const hitTypeOptions = [\r\n    {\r\n      value: \"WATCHLIST\",\r\n      label: \"Watchlist\"\r\n    },\r\n    {\r\n      value: \"USER_RULE\",\r\n      label: \"User Created\"\r\n    },\r\n    {\r\n      value: \"GRAPH_RULE\",\r\n      label: \"Graph Database\"\r\n    },\r\n    {\r\n      value: \"MANUAL\",\r\n      label: \"Manual \"\r\n    },\r\n    {\r\n      value: \"PARTIAL_WATCHLIST\",\r\n      label: \"Partial Watchlist\"\r\n    }\r\n  ];\r\n\r\n  const hitStatusOptions = [\r\n    {\r\n      value: \"NEW\",\r\n      label: \"New\"\r\n    },\r\n    {\r\n      value: \"REVIEWED\",\r\n      label: \"Reviewed\"\r\n    },\r\n    {\r\n      value: \"RE_OPENED\",\r\n      label: \"Reopen\"\r\n    }\r\n  ];\r\n\r\n  const getBiographicData = pax => {\r\n    return {\r\n      name: `${pax.lastName}, ${alt(pax.firstName).toLowerCase()}`,\r\n      gender: pax.gender,\r\n      dob: `${pax.dob} (${getAge(pax.dob)})`,\r\n      nationality: pax.nationality,\r\n      document: `DOC(${pax.docType}): ${pax.document}`,\r\n      flightId: pax.flightId,\r\n      paxId: pax.paxId\r\n    };\r\n  };\r\n  const Headers = [\r\n    {\r\n      Accessor: \"paxId\",\r\n      Xl8: true,\r\n      Header: [\"vet023\", \"Actions\"],\r\n      Cell: ({ row }) => (\r\n        <DropdownButton\r\n          variant=\"outline-info\"\r\n          title={<Xl8 xid=\"vet020\">Choose Action</Xl8>}\r\n          className=\"m-1 text-center\"\r\n        >\r\n          <EventNotesModal paxId={row.original.paxId} callback={cb}></EventNotesModal>\r\n          <DownloadReport paxId={row.original.paxId} flightId={row.original.flightId}>\r\n            <div className=\"dropdown-item\">\r\n              <Xl8 xid=\"rep001\">Download Report</Xl8>\r\n            </div>\r\n          </DownloadReport>\r\n          <Notification\r\n            paxId={`${row.original.paxId}`}\r\n            usersEmails={usersEmails}\r\n          ></Notification>\r\n\r\n          <RoleAuthenticator roles={[ROLE.ADMIN, ROLE.HITMGR]} alt={<></>}>\r\n            <Confirm\r\n              header={<Xl8 xid=\"vet021\">Update Hit Status</Xl8>}\r\n              message={\r\n                <span>\r\n                  <Xl8 xid=\"vet024\">Please click confirm to change the status to:</Xl8>\r\n                  <br />\r\n                  <br />\r\n                  {row.original.status === HIT_STATUS.REVIEWED ? (\r\n                    <Xl8 xid=\"vet025\">Reopened</Xl8>\r\n                  ) : (\r\n                    <Xl8 xid=\"vet026\">Reviewed</Xl8>\r\n                  )}\r\n                </span>\r\n              }\r\n            >\r\n              {confirm => (\r\n                <Button\r\n                  className=\"dropdown-item\"\r\n                  onClick={confirm(() =>\r\n                    changeStatus(row.original.paxId, row.original.status)\r\n                  )}\r\n                >\r\n                  {row.original.status === HIT_STATUS.REVIEWED ? (\r\n                    <Xl8 xid=\"vet027\">Reopen</Xl8>\r\n                  ) : (\r\n                    <Xl8 xid=\"vet028\">Reviewed</Xl8>\r\n                  )}\r\n                </Button>\r\n              )}\r\n            </Confirm>\r\n          </RoleAuthenticator>\r\n        </DropdownButton>\r\n      )\r\n    },\r\n    {\r\n      Accessor: \"countdownTime\",\r\n      Xl8: true,\r\n      Header: [\"wl018\", \"Timer\"],\r\n      Cell: ({ row }) => {\r\n        const future =\r\n          row.original.flightDirection === \"O\"\r\n            ? row.original.flightETDDate\r\n            : row.original.flightETADate;\r\n        return (\r\n          <CountdownBadge\r\n            future={future}\r\n            baseline={now}\r\n            direction={row.original.flightDirection}\r\n          />\r\n        );\r\n      }\r\n    },\r\n    {\r\n      Accessor: \"flightNumber\",\r\n      Xl8: true,\r\n      Header: [\"wl019\", \"Flight ID\"],\r\n      Cell: ({ row }) => (\r\n        <>\r\n          <FlightBadge\r\n            data={{\r\n              flightNumber: row.original.flightNumber,\r\n              flightOrigin: row.original.flightOrigin,\r\n              flightDestination: row.original.flightDestination,\r\n              eta: row.original.flightETADate,\r\n              etd: row.original.flightETDDate\r\n            }}\r\n            style=\"sm\"\r\n          ></FlightBadge>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      Accessor: \"hitNames\",\r\n      Xl8: true,\r\n      Header: [\"wl020\", \"Hits\"],\r\n      Cell: ({ row }) => {\r\n        const listdata = asArray(row.original.hitNames).map((hit, index) => {\r\n          const triggerOverlay = !isShortText(hit, 20);\r\n          return (\r\n            <Overlay\r\n              trigger={triggerOverlay ? [\"click\", \"hover\"] : \"\"}\r\n              key={index}\r\n              content={hit}\r\n            >\r\n              <li className={triggerOverlay ? \"as-info\" : \"\"}>{getShortText(hit, 20)}</li>\r\n            </Overlay>\r\n          );\r\n        });\r\n        return <ul className=\"bio-data\">{listdata}</ul>;\r\n      }\r\n    },\r\n    {\r\n      Accessor: \"paxName\",\r\n      Xl8: true,\r\n      Header: [\"wl021\", \"Biographic Information\"],\r\n      Cell: ({ row }) => <BiographicInfo data={getBiographicData(row.original)} />\r\n    },\r\n    {\r\n      Accessor: \"status\",\r\n      Xl8: true,\r\n      Header: [\"vet022\", \"Status\"],\r\n      Cell: ({ row }) => <div>{row.original.status}</div>\r\n    }\r\n  ];\r\n\r\n  const onTableChange = () => {};\r\n  const onTextChange = () => {};\r\n  const cb = () => {};\r\n\r\n  let startDate = new Date();\r\n  let endDate = new Date();\r\n  endDate.setDate(endDate.getDate() + 7);\r\n  startDate.setHours(startDate.getHours() - 7);\r\n  const [data, setData] = useState();\r\n  const [hitCategoryOptions, setHitCategoryOptions] = useState();\r\n  const [filterFormKey, setFilterFormKey] = useState(0);\r\n  const showDateTimePicker = useRef(false);\r\n  const [noteTypes, setNoteTypes] = useState([]);\r\n  const [usersEmails, setUsersEmails] = useState({});\r\n  const [tableKey, setTableKey] = useState(0);\r\n\r\n  const now = new Date();\r\n  const initialParamState = {\r\n    etaStart: startDate,\r\n    etaEnd: endDate,\r\n    displayStatusCheckBoxes: hitStatusOptions,\r\n    ruleTypes: hitTypeOptions,\r\n    ruleCatFilter: hitCategoryOptions,\r\n    notetypes: []\r\n  };\r\n\r\n  const getInitialState = () => {\r\n    showDateTimePicker.current = false;\r\n    setFilterFormKey(filterFormKey + 1);\r\n    return initialParamState;\r\n  };\r\n  const changeStatus = (paxId, status) => {\r\n    const newStatus =\r\n      status === HIT_STATUS.REVIEWED ? HIT_STATUS.REOPENED : HIT_STATUS.REVIEWED;\r\n    cases.updateStatus(paxId, newStatus.toUpperCase()).then(res => {\r\n      setFilterFormKey(filterFormKey + 1);\r\n    });\r\n  };\r\n\r\n  const toggleDateTimePicker = ev => {\r\n    showDateTimePicker.current = !showDateTimePicker.current;\r\n    setFilterFormKey(filterFormKey + 1);\r\n  };\r\n\r\n  const setDataWrapper = data => {\r\n    setData(data?.cases || []);\r\n    setTableKey(tableKey + 1);\r\n  };\r\n\r\n  const parameterAdapter = fields => {\r\n    let paramObject = { pageSize: 100, pageNumber: 1 };\r\n    const fieldscopy = Object.assign([], fields);\r\n    delete fieldscopy[\"showDateTimePicker\"];\r\n\r\n    if (!showDateTimePicker.current) {\r\n      //passed range values insted of date\r\n      const startRange = fields[\"startHourRange\"] || 96; // default to 96 hours\r\n      const endRange = fields[\"endHourRange\"] || 96;\r\n      let etaEnd = new Date();\r\n      let etaStart = new Date();\r\n      etaEnd.setHours(etaEnd.getHours() + endRange);\r\n      etaStart.setHours(etaEnd.getHours() - startRange);\r\n\r\n      paramObject[\"etaStart\"] = etaStart;\r\n      paramObject[\"etaEnd\"] = etaEnd;\r\n\r\n      delete fieldscopy[\"startHourRange\"];\r\n      delete fieldscopy[\"endHourRange\"];\r\n    }\r\n\r\n    const fieldNames = Object.keys(fieldscopy);\r\n    fieldNames.forEach(name => {\r\n      if (name === \"etaStart\" || name === \"etaEnd\") {\r\n        const date = new Date(fields[name]);\r\n        paramObject[name] = date.toISOString();\r\n      }\r\n\r\n      if (hasData(fields[name])) {\r\n        if (name === \"displayStatusCheckBoxes\" || name === \"ruleTypes\") {\r\n          const selectedBoxes = fields[name];\r\n          const morphedArray = selectedBoxes.map(sb => {\r\n            const name = sb.value;\r\n            const checked = true;\r\n            return { [name]: checked };\r\n          });\r\n          paramObject[name] = Object.assign({}, ...morphedArray);\r\n        } else if (name === \"ruleCatFilter\") {\r\n          const selectedCheckbox = fields[name];\r\n          const morphedArray = selectedCheckbox.map(cb => {\r\n            let name = cb.label;\r\n            let value = true;\r\n            return { name: name, value: value };\r\n          });\r\n          paramObject[name] = [...morphedArray];\r\n        } else if (name === \"noteTypes\") {\r\n          const selectedNoteTypes = asArray(fields[name]).map(noteType => {\r\n            return {\r\n              type: noteType.label\r\n            };\r\n          });\r\n          paramObject[name] = selectedNoteTypes;\r\n        } else {\r\n          paramObject[name] = fields[name];\r\n        }\r\n      }\r\n    });\r\n\r\n    return \"?requestDto=\" + encodeURIComponent(JSON.stringify(paramObject));\r\n  };\r\n\r\n  const fetchData = () => {\r\n    usersemails.get().then(res => {\r\n      setUsersEmails(res);\r\n    });\r\n\r\n    hitcats.get().then(res => {\r\n      const options = asArray(res).map(hitCat => {\r\n        return {\r\n          label: hitCat.label,\r\n          value: hitCat.label\r\n        };\r\n      });\r\n      setHitCategoryOptions(options);\r\n    });\r\n\r\n    notetypes.get().then(types => {\r\n      const nTypes = asArray(types).reduce((acc, type) => {\r\n        if (type.noteType !== \"DELETED\") {\r\n          acc.push({\r\n            value: type.id,\r\n            label: type.noteType\r\n          });\r\n        }\r\n        return acc;\r\n      }, []);\r\n      setNoteTypes(nTypes);\r\n      setFilterFormKey(new Date());\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <SidenavContainer>\r\n        <Col className=\"notopmargin\">\r\n          <FilterForm\r\n            service={cases.get}\r\n            callback={setDataWrapper}\r\n            paramCallback={parameterAdapter}\r\n            key={filterFormKey}\r\n            getInitialState={getInitialState}\r\n          >\r\n            <LabelledInput\r\n              datafield=\"myRulesOnly\"\r\n              name=\"myRulesOnly\"\r\n              labelText={<Xl8 xid=\"vet007\">My Rules Only</Xl8>}\r\n              inputType=\"checkbox\"\r\n              inputVal={false}\r\n              callback={cb}\r\n              selected={false}\r\n              alt=\"My Rules Only\"\r\n              spacebetween\r\n            />\r\n            <LabelledInput\r\n              name=\"displayStatusCheckBoxes\"\r\n              datafield=\"displayStatusCheckBoxes\"\r\n              labelText={<Xl8 xid=\"vet008\">Passenger Hit Status</Xl8>}\r\n              inputType=\"multiSelect\"\r\n              inputVal={hitStatusOptions}\r\n              options={hitStatusOptions}\r\n              callback={cb}\r\n              alt={<Xl8 xid=\"3\">Passenger Hit Status</Xl8>}\r\n            />\r\n            <LabelledInput\r\n              name=\"ruleTypes\"\r\n              datafield=\"ruleTypes\"\r\n              labelText={<Xl8 xid=\"vet009\">Hit Source</Xl8>}\r\n              inputType=\"multiSelect\"\r\n              inputVal={hitTypeOptions}\r\n              options={hitTypeOptions}\r\n              callback={cb}\r\n              alt=\"Hit Source\"\r\n            />\r\n            {hasData(noteTypes) && (\r\n              <LabelledInput\r\n                datafield\r\n                name=\"noteTypes\"\r\n                labelText={<Xl8 xid=\"vet019\">Note Type</Xl8>}\r\n                inputType=\"multiSelect\"\r\n                inputVal={[]}\r\n                options={noteTypes}\r\n                callback={cb}\r\n                alt={<Xl8 xid=\"vet019\">Note Type</Xl8>}\r\n              />\r\n            )}\r\n\r\n            {hasData(hitCategoryOptions) && (\r\n              <LabelledInput\r\n                name=\"ruleCatFilter\"\r\n                datafield=\"ruleCatFilter\"\r\n                labelText={<Xl8 xid=\"vet010\">Passenger Hit Categories</Xl8>}\r\n                inputType=\"multiSelect\"\r\n                inputVal={hitCategoryOptions}\r\n                options={hitCategoryOptions}\r\n                callback={cb}\r\n                alt={<Xl8 xid=\"3\">Passenger Hit Categories</Xl8>}\r\n              />\r\n            )}\r\n            <LabelledInput\r\n              datafield=\"lastName\"\r\n              labelText={<Xl8 xid=\"vet011\">Last Name</Xl8>}\r\n              inputType=\"text\"\r\n              name=\"lastName\"\r\n              callback={onTextChange}\r\n              alt={<Xl8 xid=\"3\">Last Name</Xl8>}\r\n            />\r\n            <LabelledInput\r\n              datafield=\"flightNumber\"\r\n              labelText={<Xl8 xid=\"vet012\">Flight Number</Xl8>}\r\n              inputType=\"text\"\r\n              name=\"flightNumber\"\r\n              callback={onTextChange}\r\n              alt={<Xl8 xid=\"3\">Flight Number</Xl8>}\r\n            />\r\n            <hr />\r\n            <LabelledInput\r\n              datafield=\"showDateTimePicker\"\r\n              name=\"showDateTimePicker\"\r\n              labelText={<Xl8 xid=\"vet013\">Show Date Time Picker</Xl8>}\r\n              inputType=\"checkbox\"\r\n              inputVal={showDateTimePicker.current}\r\n              callback={cb}\r\n              toggleDateTimePicker={toggleDateTimePicker}\r\n              selected={showDateTimePicker.current}\r\n              alt=\"Show Date Time Picker\"\r\n              spacebetween\r\n            />\r\n            {showDateTimePicker.current && (\r\n              <LabelledInput\r\n                datafield=\"etaStart\"\r\n                inputType=\"dateTime\"\r\n                inputVal={startDate}\r\n                labelText={<Xl8 xid=\"vet014\">Start Date</Xl8>}\r\n                name=\"etaStart\"\r\n                callback={cb}\r\n                className=\"dtp-vetting-upper\"\r\n                required={true}\r\n                alt=\"Start Date\"\r\n              />\r\n            )}\r\n            {showDateTimePicker.current && (\r\n              <LabelledInput\r\n                datafield=\"etaEnd\"\r\n                inputType=\"dateTime\"\r\n                inputVal={endDate}\r\n                labelText={<Xl8 xid=\"vet015\">End Date</Xl8>}\r\n                name=\"etaEnd\"\r\n                callback={cb}\r\n                required={true}\r\n                className=\"dtp-vetting-lower\"\r\n                alt=\"End Date\"\r\n              />\r\n            )}\r\n            {!showDateTimePicker.current && (\r\n              <LabelledInput\r\n                labelText={<Xl8 xid=\"vet016\">Hour Range (Start)</Xl8>}\r\n                inputType=\"select\"\r\n                name=\"startHourRange\"\r\n                inputVal=\"96\"\r\n                inputStyle=\"form-select\"\r\n                datafield=\"startHourRange\"\r\n                options={[\r\n                  { value: \"6\", label: \"-6 hours\" },\r\n                  { value: \"12\", label: \"-12 hours\" },\r\n                  { value: \"24\", label: \"-24 hours\" },\r\n                  { value: \"48\", label: \"-48 hours\" },\r\n                  { value: \"96\", label: \"-96 hours\" }\r\n                ]}\r\n                callback={cb}\r\n                alt=\"Hour range (Start)\"\r\n              />\r\n            )}\r\n            {!showDateTimePicker.current && (\r\n              <LabelledInput\r\n                labelText={<Xl8 xid=\"vet017\">Hour Range (End)</Xl8>}\r\n                inputType=\"select\"\r\n                name=\"endHourRange\"\r\n                inputVal=\"96\"\r\n                inputStyle=\"form-select\"\r\n                datafield=\"endHourRange\"\r\n                options={[\r\n                  { value: \"6\", label: \"+6 hours\" },\r\n                  { value: \"12\", label: \"+12 hours\" },\r\n                  { value: \"24\", label: \"+24 hours\" },\r\n                  { value: \"48\", label: \"+48 hours\" },\r\n                  { value: \"96\", label: \"+96 hours\" }\r\n                ]}\r\n                callback={cb}\r\n                alt=\"Hour range (End)\"\r\n              />\r\n            )}\r\n          </FilterForm>\r\n        </Col>\r\n      </SidenavContainer>\r\n      <Main>\r\n        <Title title={<Xl8 xid=\"vet018\">Priority Vetting</Xl8>} uri={props.uri} />\r\n        <Table data={data} callback={onTableChange} header={Headers} key={tableKey} />\r\n      </Main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Vetting;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\PaxDetail.js",["614","615","616"],"import React, { useState, useEffect } from \"react\";\r\nimport Tabs from \"../../components/tabs/Tabs\";\r\nimport FlightBadge from \"../../components/flightBadge/FlightBadge\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport PaxInfo from \"../../components/paxInfo/PaxInfo\";\r\nimport SidenavContainer from \"../../components/sidenavContainer/SidenavContainer\";\r\nimport Main from \"../../components/main/Main\";\r\nimport Title from \"../../components/title/Title\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport Summary from \"./summary/Summary\";\r\nimport PNR from \"./pnr/PNR\";\r\nimport APIS from \"./apis/APIS\";\r\nimport FlightHistory from \"./flightHistory/FlightHistory\";\r\nimport LinkAnalysis from \"./linkAnalysis/LinkAnalysis\";\r\nimport EventNotesModal from \"../../components/eventNotesModal/EventNotesModal\";\r\nimport DownloadReport from \"./downloadReports/DownloadReports\";\r\nimport Notification from \"./notification/Notification\";\r\nimport ChangeHitStatus from \"./changeHitStatus/ChangeHitStatus\";\r\nimport CreateManualHit from \"./createManualHit/CreateManualHit\";\r\nimport Stepper from \"../../components/stepper/Stepper\";\r\nimport AddToWatchlist from \"./addToWatchList/AddToWatchlist\";\r\nimport UploadAttachment from \"./uploadAttachment/UploadAttachment\";\r\nimport AttachmentModal from \"./uploadAttachment/AttachmentModal\";\r\nimport { paxdetails, cases } from \"../../services/serviceWrapper\";\r\nimport { asArray, hasData } from \"../../utils/utils\";\r\nimport { ACTION } from \"../../utils/constants\";\r\nimport { Link } from \"@reach/router\";\r\nimport { Fab, Action } from \"react-tiny-fab\";\r\nimport \"react-tiny-fab/dist/styles.css\";\r\nimport \"./PaxDetail.scss\";\r\nimport Loading from \"../../components/loading/Loading\";\r\n\r\nconst PaxDetail = props => {\r\n  const [flightBadge, setFlightBadge] = useState();\r\n  const [pax, setPax] = useState([]);\r\n  const [pnr, setPnr] = useState({});\r\n  const [apisMessage, setApisMessage] = useState({});\r\n  const [hitSummaryRefreshKey, setHitSummaryRefreshKey] = useState();\r\n  const [attachmentRefreshKey, setAttachmentRefreshKey] = useState(0);\r\n  const [eventNoteRefreshKey, setEventNoteRefreshKey] = useState();\r\n  const [hasOpenHit, setHasOpenHit] = useState(false);\r\n  const [hasHit, setHasHit] = useState(false);\r\n  const [flightLegsSegmentData, setFlightLegsSegmentData] = useState();\r\n  const [hasApisRecord, setHasApisRecord] = useState(false);\r\n  const [hasPnrRecord, setHasPnrRecord] = useState(false);\r\n  const [watchlistData, setWatchlistData] = useState({});\r\n  const [paxDetailsData, setPaxDetailsData] = useState();\r\n  const [paxDocuments, setPaxDocuments] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const cb = () => {};\r\n  const refreshEventNotesCard = () => {\r\n    setEventNoteRefreshKey(new Date());\r\n  };\r\n  const tabs = [\r\n    {\r\n      title: <Xl8 xid=\"pd001\">Summary</Xl8>,\r\n      titleText: \"Summary\",\r\n      link: (\r\n        <Summary\r\n          paxId={props.paxId}\r\n          flightId={props.flightId}\r\n          hitSummaryRefreshKey={hitSummaryRefreshKey}\r\n          eventNoteRefreshKey={eventNoteRefreshKey}\r\n          setHasOpenHit={setHasOpenHit}\r\n          setHasHit={setHasHit}\r\n          documents={paxDocuments}\r\n        />\r\n      )\r\n    },\r\n    ...(hasApisRecord\r\n      ? [\r\n          {\r\n            title: <Xl8 xid=\"pd002\">APIS</Xl8>,\r\n            titleText: \"APIS\",\r\n            link: <APIS data={apisMessage}></APIS>\r\n          }\r\n        ]\r\n      : []),\r\n    ...(hasPnrRecord\r\n      ? [\r\n          {\r\n            title: <Xl8 xid=\"pd003\">PNR</Xl8>,\r\n            titleText: \"PNR\",\r\n            link: <PNR data={pnr} />\r\n          }\r\n        ]\r\n      : []),\r\n    {\r\n      title: <Xl8 xid=\"pd004\">Flight History</Xl8>,\r\n      titleText: \"Flight History\",\r\n      link: <FlightHistory paxId={props.paxId} flightId={props.flightId} />\r\n    },\r\n    ...(hasData(paxDetailsData)\r\n      ? [\r\n          {\r\n            title: <Xl8 xid=\"pd005\">Link Analysis</Xl8>,\r\n            titleText: \"Link Analysis\",\r\n            tabClassName: \"large-media-only\",\r\n            link: <LinkAnalysis paxData={paxDetailsData} />\r\n          }\r\n        ]\r\n      : []),\r\n    {\r\n      titleText: \"Attachments\",\r\n      title: <Xl8 xid=\"pd006\">Attachments</Xl8>,\r\n      link: (\r\n        <UploadAttachment\r\n          paxId={props.paxId}\r\n          attachmentRefreshKey={attachmentRefreshKey}\r\n        />\r\n      )\r\n    }\r\n  ];\r\n\r\n  const updateHitStatus = (status, confirmed) => {\r\n    if (confirmed) {\r\n      cases.updateStatus(props.paxId, status).then(() => {\r\n        setHitSummaryRefreshKey(status);\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateAttachmentList = (status, resp) => {\r\n    if (status !== ACTION.CLOSE && status !== ACTION.CANCEL)\r\n      setAttachmentRefreshKey(attachmentRefreshKey + 1);\r\n  };\r\n\r\n  const paxinfoData = res => {\r\n    return {\r\n      lastPnrReceived: res.pnrVo?.transmissionDate,\r\n      lastApisReceived: res.apisMessageVo?.transmissionDate,\r\n      lastName: res.lastName,\r\n      middleName: res.middleName,\r\n      firstName: res.firstName,\r\n      age: res.age,\r\n      dob: res.dob,\r\n      gender: res.gender,\r\n      nationality: res.nationality,\r\n      residenceCountry: res.residenceCountry,\r\n      seat: res.seat,\r\n      eta: res.eta,\r\n      etd: res.etd,\r\n      flightId: props.flightId,\r\n      flightNumber: `${res.carrier}${res.flightNumber}`,\r\n      paxId: props.paxId,\r\n      passengerType: res.passengerType\r\n    };\r\n  };\r\n\r\n  const addLinkToFlight = data => {\r\n    const fullFlightNumber = data.carrier + data.flightNumber;\r\n    const stateData = {\r\n      direction: data.direction,\r\n      eta: data.eta,\r\n      etd: data.etd,\r\n      fullFlightNumber: fullFlightNumber,\r\n      flightDestination: data.destination || data.flightDestination,\r\n      flightOrigin: data.origin || data.flightOrigin,\r\n      passengerCount: data.passengerCount\r\n    };\r\n    return (\r\n      <Link\r\n        to={\"/gtas/flightpax/\" + data.flightId}\r\n        state={{ data: stateData }}\r\n        className=\"link\"\r\n      >\r\n        {fullFlightNumber}\r\n      </Link>\r\n    );\r\n  };\r\n  const getFlightBadgeData = res => {\r\n    return {\r\n      flightNumber: addLinkToFlight(res),\r\n      carrier: \"\",\r\n      flightDestination: res.flightDestination,\r\n      flightOrigin: res.flightOrigin,\r\n      eta: res.eta,\r\n      etd: res.etd,\r\n      flightNumberHasLink: true\r\n    };\r\n  };\r\n\r\n  const fetchData = () => {\r\n    paxdetails.get(props.flightId, props.paxId).then(res => {\r\n      setPax(paxinfoData(res));\r\n      setFlightBadge(getFlightBadgeData(res));\r\n      setPnr({ ...res.pnrVo, flightId: props.flightId });\r\n      setApisMessage(res.apisMessageVo);\r\n      setFlightLegsSegmentData(asArray(res.pnrVo?.flightLegs));\r\n      setHasApisRecord(res.apisMessageVo?.apisRecordExists || false);\r\n      setHasPnrRecord(res.pnrVo?.pnrRecordExists || false);\r\n      setPaxDetailsData(res);\r\n      const p = { firstName: res.firstName, lastName: res.lastName, dob: res.dob };\r\n      setWatchlistData({ passenger: p, documents: res.documents });\r\n      setPaxDocuments(res.documents);\r\n      setIsLoading(false);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchData();\r\n  }, [props.paxId]);\r\n\r\n  const tablist = <Tabs tabs={tabs} />;\r\n  const changeHitStatusText = hasOpenHit ? (\r\n    <Xl8 xid=\"chs006\">Set to REVIEWED</Xl8>\r\n  ) : (\r\n    <Xl8 xid=\"chs007\">Set to RE-OPENED</Xl8>\r\n  );\r\n  return (\r\n    <>\r\n      <SidenavContainer>\r\n        <br />\r\n        {hasData(flightBadge) && <FlightBadge data={flightBadge}></FlightBadge>}\r\n        <Col className=\"notopmargin\">\r\n          <div className=\"filterform-container form\">\r\n            {isLoading && <Loading></Loading>}\r\n            {!isLoading && <PaxInfo pax={pax}></PaxInfo>}\r\n            {hasData(flightLegsSegmentData) && <Stepper steps={flightLegsSegmentData} />}\r\n          </div>\r\n        </Col>\r\n      </SidenavContainer>\r\n      <Main className=\"main\">\r\n        <Title\r\n          style=\"stacker title\"\r\n          title={<Xl8 xid=\"pd019\">Passenger Detail</Xl8>}\r\n          leftChild={tablist}\r\n        ></Title>\r\n        <Fab icon={<i className=\"fa fa-plus\" />} variant=\"info\">\r\n          <Action text={<Xl8 xid=\"not001\">Notify</Xl8>}>\r\n            <Notification paxId={props.paxId} icon />\r\n          </Action>\r\n          <Action text={<Xl8 xid=\"rep001\">Download Report</Xl8>}>\r\n            <DownloadReport paxId={props.paxId} flightId={props.flightId} icon />\r\n          </Action>\r\n          <Action text={<Xl8 xid=\"evn001\">Add Event Notes</Xl8>}>\r\n            <EventNotesModal paxId={props.paxId} callback={refreshEventNotesCard} icon>\r\n              <i className=\"fa fa-pencil\" />\r\n            </EventNotesModal>\r\n          </Action>\r\n          <Action text={<Xl8 xid=\"attm007\">Add Attachments</Xl8>}>\r\n            <AttachmentModal callback={updateAttachmentList} paxId={props.paxId} icon>\r\n              <i className=\"fa fa-paperclip\" />\r\n            </AttachmentModal>\r\n          </Action>\r\n\r\n          {hasHit && (\r\n            <Action text={changeHitStatusText} variant=\"rtf-red\">\r\n              <ChangeHitStatus\r\n                updateStatus={updateHitStatus}\r\n                hasOpenHit={hasOpenHit}\r\n                icon\r\n              />\r\n            </Action>\r\n          )}\r\n          {!hasHit && (\r\n            <Action text={<Xl8 xid=\"cmh001\">Create Manual Hit</Xl8>} variant=\"rtf-red\">\r\n              <CreateManualHit\r\n                paxId={props.paxId}\r\n                flightId={props.flightId}\r\n                callback={setHitSummaryRefreshKey}\r\n                icon\r\n              />\r\n            </Action>\r\n          )}\r\n          <Action text={<Xl8 xid=\"atw001\">Add to Watchlist</Xl8>} variant=\"rtf-red\">\r\n            <AddToWatchlist watchlistItems={watchlistData} icon />\r\n          </Action>\r\n        </Fab>\r\n      </Main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PaxDetail;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\flightHistory\\FlightHistory.js",["617","618"],"import React, { useEffect, useState } from \"react\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport { CardColumns } from \"react-bootstrap\";\r\nimport Main from \"../../../components/main/Main\";\r\nimport CardWithTable from \"../../../components/cardWithTable/CardWithTable\";\r\nimport { paxFlightHistory, paxFullTravelHistory } from \"../../../services/serviceWrapper\";\r\nimport { asArray, hasData, localeDate } from \"../../../utils/utils\";\r\nimport { Link } from \"@reach/router\";\r\n\r\nconst FlightHistory = props => {\r\n  const headers = {\r\n    fullFlightNumber: <Xl8 xid=\"fh001\">Flight Number</Xl8>,\r\n    etd: <Xl8 xid=\"fh002\">Departure</Xl8>,\r\n    eta: <Xl8 xid=\"fh003\">Arrival</Xl8>,\r\n    originCountry: <Xl8 xid=\"fh004\">Origin Country</Xl8>,\r\n    origin: <Xl8 xid=\"fh005\">Origin Airport</Xl8>,\r\n    destinationCountry: <Xl8 xid=\"fh006\">Destination Country</Xl8>,\r\n    destination: <Xl8 xid=\"fh007\">Destination Airport</Xl8>\r\n  };\r\n  const [currentFlightHistory, setcurrentFlightHistory] = useState([]);\r\n  const [fullTravelHistory, setFullTravelHistory] = useState([]);\r\n\r\n  const sortFlightByEta = (flight1, flight2) => {\r\n    return flight2.eta - flight1.eta;\r\n  };\r\n\r\n  const addLinkToFlight = flight => {\r\n    //Only prime flights need a link\r\n    const flightId = flight.flightId || flight.id;\r\n    const isPrimeFlight = !flight.bookingDetail && hasData(flight.direction);\r\n    const stateData = {\r\n      direction: flight.direction,\r\n      eta: flight.eta,\r\n      etd: flight.etd,\r\n      fullFlightNumber: flight.fullFlightNumber,\r\n      flightDestination: flight.destination,\r\n      flightOrigin: flight.origin,\r\n      passengerCount: flight.passengerCount\r\n    };\r\n\r\n    return isPrimeFlight ? (\r\n      <Link to={\"/gtas/flightpax/\" + flightId} state={{ data: stateData }}>\r\n        {flight.fullFlightNumber}\r\n      </Link>\r\n    ) : (\r\n      flight.fullFlightNumber\r\n    );\r\n  };\r\n  const parseFlightData = data => {\r\n    return {\r\n      ...data,\r\n      etd: localeDate(data.etd),\r\n      eta: localeDate(data.eta),\r\n      fullFlightNumber: addLinkToFlight(data)\r\n    };\r\n  };\r\n\r\n  const fetchData = () => {\r\n    paxFlightHistory.get(props.flightId, props.paxId).then(res => {\r\n      const historyData = asArray(res)\r\n        .sort(sortFlightByEta)\r\n        .map(data => parseFlightData(data));\r\n\r\n      setcurrentFlightHistory(historyData);\r\n    });\r\n\r\n    paxFullTravelHistory.get(props.flightId, props.paxId).then(res => {\r\n      const historyData = asArray(res)\r\n        .sort(sortFlightByEta)\r\n        .map(data => parseFlightData(data));\r\n\r\n      setFullTravelHistory(historyData);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"one-column-container\">\r\n      <CardColumns>\r\n        <CardWithTable\r\n          data={currentFlightHistory}\r\n          headers={headers}\r\n          className=\"pd-gridstack-2 flex-grow-0\"\r\n          title={<Xl8 xid=\"fh009\">Current Itinerary</Xl8>}\r\n        />\r\n        <CardWithTable\r\n          data={fullTravelHistory}\r\n          headers={headers}\r\n          className=\"pd-gridstack-2 flex-grow-1\"\r\n          title={<Xl8 xid=\"fh010\">Total Flight History</Xl8>}\r\n        />\r\n      </CardColumns>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FlightHistory;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\summary\\Summary.js",["619","620"],"import React, { useState, useEffect } from \"react\";\r\nimport CardWithTable from \"../../../components/cardWithTable/CardWithTable\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport {\r\n  paxWatchListLink,\r\n  flightpaxHitSummary,\r\n  paxEventNotesHistory,\r\n  historicalHits\r\n} from \"../../../services/serviceWrapper\";\r\nimport {\r\n  localeDate,\r\n  asArray,\r\n  hasData,\r\n  localeDateOnly,\r\n  formatRuleConditions\r\n} from \"../../../utils/utils\";\r\nimport { CardColumns } from \"react-bootstrap\";\r\nimport \"./Summary.scss\";\r\nimport { HIT_STATUS } from \"../../../utils/constants\";\r\nimport { Link } from \"@reach/router\";\r\n\r\nconst Summary = props => {\r\n  const headers = {\r\n    documents: {\r\n      documentNumber: <Xl8 xid=\"sum001\">Document Number</Xl8>,\r\n      documentType: <Xl8 xid=\"sum002\">Type</Xl8>,\r\n      issuanceCountry: <Xl8 xid=\"sum003\">Issuance Country</Xl8>,\r\n      expirationDate: <Xl8 xid=\"sum004\">Expiration Date</Xl8>,\r\n      messageType: <Xl8 xid=\"sum005\">Source</Xl8>\r\n    },\r\n    watchListLinks: {\r\n      watchlistCategory: <Xl8 xid=\"sum006\">Category</Xl8>,\r\n      watchListLastName: <Xl8 xid=\"sum007\">Last Name</Xl8>,\r\n      watchListFirstName: <Xl8 xid=\"sum008\">First Name</Xl8>,\r\n      watchListDOB: <Xl8 xid=\"sum009\">DOB</Xl8>,\r\n      percentMatch: <Xl8 xid=\"sum010\">Match %</Xl8>\r\n    },\r\n    paxHitSummary: {\r\n      status: <Xl8 xid=\"sum011\">Status</Xl8>,\r\n      severity: <Xl8 xid=\"sum012\">Severity</Xl8>,\r\n      author: <Xl8 xid=\"sum013\">Author</Xl8>,\r\n      category: <Xl8 xid=\"sum014\">Category</Xl8>,\r\n      ruleDesc: <Xl8 xid=\"sum015\">Title</Xl8>,\r\n      ruleConditions: <Xl8 xid=\"sum016\">Conditions</Xl8>\r\n    },\r\n    eventNotes: {\r\n      plainTextNote: <Xl8 xid=\"sum017\">Note</Xl8>,\r\n      noteType: <Xl8 xid=\"sum018\">Note Type</Xl8>,\r\n      createdBy: <Xl8 xid=\"sum019\">Created By</Xl8>,\r\n      createdAt: <Xl8 xid=\"sum020\">Created At</Xl8>\r\n    },\r\n    historicalHits: {\r\n      category: <Xl8 xid=\"sum026\">Category</Xl8>,\r\n      passengerDocNumber: <Xl8 xid=\"sum027\">Document Number</Xl8>,\r\n      ruleConditions: <Xl8 xid=\"sum028\">Conditions</Xl8>,\r\n      flightDate: <Xl8 xid=\"sum029\">Flight ID</Xl8>,\r\n      flightPaxLink: <Xl8 xid=\"sum030\">Info</Xl8>\r\n    }\r\n  };\r\n\r\n  const setHasOpenHit = props.setHasOpenHit;\r\n  const setHasHit = props.setHasHit;\r\n  const [watchListLinks, setWatchListLinks] = useState([]);\r\n  const [paxHitSummary, setPaxHitSummary] = useState([]);\r\n  const [eventNotes, setEventNotes] = useState([]);\r\n  const [historicalEventNotes, setHistoricalEventNotes] = useState([]);\r\n  const [paxHistoricalHits, setPaxHistoricalHits] = useState([]);\r\n\r\n  const parseDocumentData = documents => {\r\n    const parsedDocs = asArray(documents).map(document => {\r\n      const expirationDate = Date.parse(document.expirationDate);\r\n      return {\r\n        ...document,\r\n        expirationDate: localeDateOnly(expirationDate)\r\n      };\r\n    });\r\n    return parsedDocs;\r\n  };\r\n\r\n  const getLinkToPaxDetails = linkData => {\r\n    return (\r\n      <Link to={`/gtas/paxDetail/${linkData.flightId}/${linkData.paxId}`}>Details</Link>\r\n    );\r\n  };\r\n\r\n  const fetchWatchlistNamesData = () => {\r\n    paxWatchListLink.get(null, props.paxId).then(res => {\r\n      const data = asArray(res).map(pwl => {\r\n        const watchListDOB = Date.parse(pwl.watchListDOB);\r\n        return {\r\n          ...pwl,\r\n          watchListDOB: localeDateOnly(watchListDOB),\r\n          percentMatch: `${pwl.percentMatch * 100}%`\r\n        };\r\n      });\r\n      setWatchListLinks(data);\r\n    });\r\n  };\r\n\r\n  const fetchHitSummaryData = () => {\r\n    flightpaxHitSummary.get(props.flightId, props.paxId).then(res => {\r\n      const formattedResults = asArray(res).map(rec => {\r\n        return { ...rec, ruleConditions: formatRuleConditions(rec.ruleConditions) };\r\n      });\r\n      setPaxHitSummary(formattedResults);\r\n      const openHit = hasData(res)\r\n        ? res.find(\r\n            hit => hit.status === HIT_STATUS.NEW || hit.status === HIT_STATUS.REOPENED\r\n          )\r\n        : undefined;\r\n      setHasHit(hasData(res));\r\n      setHasOpenHit(openHit !== undefined);\r\n    });\r\n  };\r\n\r\n  const fetchHistoricalHitsData = () => {\r\n    historicalHits.get(props.paxId).then(res => {\r\n      const parsedData = asArray(res).map(hit => {\r\n        return {\r\n          ...hit,\r\n          flightPaxLink: getLinkToPaxDetails(hit),\r\n          ruleConditions: formatRuleConditions(hit.ruleConditions)\r\n        };\r\n      });\r\n      setPaxHistoricalHits(parsedData);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchHitSummaryData();\r\n  }, [props.paxId, props.hitSummaryRefreshKey]);\r\n\r\n  useEffect(() => {\r\n    fetchHistoricalHitsData();\r\n    fetchWatchlistNamesData();\r\n  }, [props.paxId]);\r\n\r\n  useEffect(() => {\r\n    paxEventNotesHistory.get(props.paxId, false).then(res => {\r\n      const notesData = res.paxNotes?.map(note => {\r\n        const type = (note.noteType || []).map(t => {\r\n          return t.noteType;\r\n        });\r\n        return {\r\n          ...note,\r\n          createdAt: localeDate(note.createdAt),\r\n          noteType: type.toString()\r\n        };\r\n      });\r\n      setEventNotes(notesData);\r\n    });\r\n\r\n    paxEventNotesHistory.get(props.paxId, true).then(res => {\r\n      const notesData = res.paxNotes\r\n        ?.map(note => {\r\n          const type = (note.noteTypes || []).map(t => {\r\n            return t.noteType;\r\n          });\r\n          return {\r\n            ...note,\r\n            createdAt: localeDate(note.createdAt),\r\n            noteType: type.toString()\r\n          };\r\n        })\r\n        .slice(0, 10);\r\n      setHistoricalEventNotes(notesData);\r\n    });\r\n  }, [props.eventNoteRefreshKey, props.paxId]);\r\n\r\n  return (\r\n    <div className=\"paxdetail-container\">\r\n      <CardColumns>\r\n        <CardWithTable\r\n          data={paxHitSummary}\r\n          headers={headers.paxHitSummary}\r\n          title={<Xl8 xid=\"sum021\">Current Hits Summary</Xl8>}\r\n          refresh={fetchHitSummaryData}\r\n        />\r\n\r\n        <CardWithTable\r\n          data={parseDocumentData(props.documents)}\r\n          headers={headers.documents}\r\n          title={<Xl8 xid=\"sum022\">Documents</Xl8>}\r\n        />\r\n        <CardWithTable\r\n          data={watchListLinks}\r\n          headers={headers.watchListLinks}\r\n          title={<Xl8 xid=\"sum023\">Watchlist Name Comparison</Xl8>}\r\n        />\r\n\r\n        <CardWithTable\r\n          data={eventNotes}\r\n          headers={headers.eventNotes}\r\n          title={<Xl8 xid=\"sum024\">Event Notes</Xl8>}\r\n        />\r\n        <CardWithTable\r\n          data={historicalEventNotes}\r\n          headers={headers.eventNotes}\r\n          title={<Xl8 xid=\"sum025\">Prior Event Notes</Xl8>}\r\n        />\r\n        <CardWithTable\r\n          data={paxHistoricalHits}\r\n          headers={headers.historicalHits}\r\n          title={<Xl8 xid=\"sum031\">Historical Hits</Xl8>}\r\n        />\r\n      </CardColumns>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Summary;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\linkAnalysis\\LinkAnalysis.js",["621"],"import React, { useState, useEffect } from \"react\";\r\nimport Graph from \"../../../components/graph/Graph\";\r\nimport ErrorBoundary from \"../../../components/errorBoundary/ErrorBoundary\";\r\n\r\nconst LinkAnalysis = props => {\r\n  const [graph, setGraph] = useState(<></>);\r\n\r\n  useEffect(() => {\r\n    setGraph(<Graph paxData={props.paxData}></Graph>);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"one-column-grid-container\">\r\n      <ErrorBoundary message=\"something went wrong here ...\">{graph}</ErrorBoundary>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LinkAnalysis;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\Tools.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\poe\\POE.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\queryrules\\Queries.js",["622"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport Title from \"../../../components/title/Title\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport Main from \"../../../components/main/Main\";\r\nimport { ACTION, ROLE } from \"../../../utils/constants\";\r\nimport RoleAuthenticator from \"../../../context/roleAuthenticator/RoleAuthenticator\";\r\nimport { LookupContext } from \"../../../context/data/LookupContext\";\r\n\r\nimport { query } from \"../../../services/serviceWrapper\";\r\nimport { hasData } from \"../../../utils/utils\";\r\nimport QRModal from \"./QRModal\";\r\nimport \"./QueryRules.css\";\r\nimport { Fab } from \"react-tiny-fab\";\r\nimport \"react-tiny-fab/dist/styles.css\";\r\n\r\nconst Queries = props => {\r\n  const cb = function(status, res) {\r\n    if (status === ACTION.SAVE || status === ACTION.DELETE) {\r\n      setTablekey(tablekey + 1);\r\n    }\r\n    closeModal();\r\n  };\r\n\r\n  const addQuery = <Xl8 xid=\"\">Add Query</Xl8>;\r\n  const editQuery = <Xl8 xid=\"\">Edit Query</Xl8>;\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [id, setId] = useState(0);\r\n  const [record, setRecord] = useState({});\r\n  const [key, setKey] = useState(0);\r\n  const [tablekey, setTablekey] = useState(0);\r\n  const ctx = useContext(LookupContext);\r\n  const [modalKey, setModalKey] = useState(-1);\r\n\r\n  const [modalTitle, setModalTitle] = useState(addQuery);\r\n\r\n  const header = [\r\n    {\r\n      Accessor: \"id\",\r\n      Xl8: true,\r\n      disableSortBy: true,\r\n      Header: [\"edit001\", \"Edit\"],\r\n      Cell: ({ row }) => (\r\n        <div className=\"icon-col\">\r\n          <i\r\n            className=\"fa fa-pencil-square-o table-icon\"\r\n            onClick={() => launchModal(row.original.id, row.original)}\r\n          ></i>\r\n        </div>\r\n      )\r\n    },\r\n    { Accessor: \"title\", Xl8: true, Header: [\"q004\", \"Title\"] },\r\n    { Accessor: \"description\", Xl8: true, Header: [\"q005\", \"Description\"] }\r\n  ];\r\n\r\n  const launchModal = (recordId, record) => {\r\n    if (showModal && !recordId) return closeModal();\r\n\r\n    const title = recordId ? editQuery : addQuery;\r\n\r\n    setKey(key + 1);\r\n    setId(recordId);\r\n    setRecord(record);\r\n    setModalTitle(title);\r\n    setModalKey(Date.now());\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setId();\r\n    setRecord({});\r\n    setShowModal(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (modalKey > -1) setShowModal(true);\r\n  }, [modalKey]);\r\n\r\n  useEffect(() => {\r\n    const lastRule = ctx.getLookupState(\"lastRule\");\r\n\r\n    if (hasData(lastRule)) {\r\n      const flatRule = {\r\n        ...lastRule,\r\n        tag: lastRule.query\r\n      };\r\n\r\n      setId(flatRule.id);\r\n      setRecord(flatRule);\r\n      launchModal(flatRule.id, flatRule);\r\n      ctx.lookupAction({ type: \"removeRule\" });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <RoleAuthenticator roles={[ROLE.ADMIN, ROLE.QRYMGR]}>\r\n      <Main className=\"full bg-white\">\r\n        <Title title={<Xl8 xid=\"q002\">Queries</Xl8>}></Title>\r\n        <Table\r\n          service={query.get}\r\n          callback={cb}\r\n          header={header}\r\n          key={`table${tablekey}`}\r\n        ></Table>\r\n        <Fab\r\n          icon={<i className=\"fa fa-plus nospin\" />}\r\n          variant=\"info\"\r\n          onClick={() => launchModal()}\r\n        ></Fab>\r\n\r\n        <QRModal\r\n          show={showModal}\r\n          onHide={closeModal}\r\n          callback={cb}\r\n          key={key}\r\n          data={record}\r\n          title={modalTitle}\r\n          id={id}\r\n          service={query}\r\n        />\r\n      </Main>\r\n    </RoleAuthenticator>\r\n  );\r\n};\r\n\r\nexport default Queries;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\queryrules\\Rules.js",["623","624","625","626"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport Title from \"../../../components/title/Title\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport Main from \"../../../components/main/Main\";\r\nimport { Button, Tabs, Tab } from \"react-bootstrap\";\r\nimport { navigate } from \"@reach/router\";\r\nimport { LookupContext } from \"../../../context/data/LookupContext\";\r\n\r\nimport { rulesall, rule } from \"../../../services/serviceWrapper\";\r\nimport { hasData, getEndpoint } from \"../../../utils/utils\";\r\nimport { QR, ACTION, RULETAB, ROLE } from \"../../../utils/constants\";\r\nimport RoleAuthenticator from \"../../../context/roleAuthenticator/RoleAuthenticator\";\r\nimport QRModal from \"./QRModal\";\r\nimport { Fab } from \"react-tiny-fab\";\r\nimport \"react-tiny-fab/dist/styles.css\";\r\nimport \"./QueryRules.css\";\r\n\r\n//TODO - the two fetches, rulesall and rules, are separate but they don't need to be. Until we have requirements preventing some\r\n//users or roles from fetching all rules, we should consider pulling all data from rulesall and filtering the results for \"my rules\".\r\nconst Rules = props => {\r\n  const addRule = <Xl8 xid=\"rul001\">Add Rule</Xl8>;\r\n  const editRule = <Xl8 xid=\"rul002\">Edit Rule</Xl8>;\r\n  const endpoint = getEndpoint(props.location.pathname);\r\n  const [tab, setTab] = useState(endpoint === \"rules\" ? RULETAB.MY : RULETAB.ALL);\r\n  const service = endpoint === \"all\" ? rulesall : rule;\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [id, setId] = useState();\r\n  const [data, setData] = useState({});\r\n  const [modalTitle, setModalTitle] = useState(addRule);\r\n  const [record, setRecord] = useState();\r\n  const [modalKey, setModalKey] = useState(-1);\r\n  const [tablekey, setTablekey] = useState(0);\r\n  const ctx = useContext(LookupContext);\r\n\r\n  const cb = res => {};\r\n\r\n  const modalCb = (status, res) => {\r\n    if (status === ACTION.DELETE || status === ACTION.SAVE) return closeModalAndRefresh();\r\n\r\n    closeModal();\r\n  };\r\n\r\n  const header = [\r\n    {\r\n      Accessor: \"id\",\r\n      Xl8: true,\r\n      disableSortBy: true,\r\n      Header: [\"edit001\", \"Edit\"],\r\n      Cell: ({ row }) => (\r\n        <div className=\"icon-col\">\r\n          <i\r\n            className=\"fa fa-pencil-square-o table-icon\"\r\n            onClick={() => fetchDetail(row.original.id)}\r\n          ></i>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      Accessor: \"title\",\r\n      Xl8: true,\r\n      Header: [\"rul007\", \"Title\"],\r\n      Cell: ({ row }) => <div className=\"wide-col\">{row.original.title}</div>\r\n    },\r\n    {\r\n      Accessor: \"description\",\r\n      Xl8: true,\r\n      Header: [\"rul008\", \"Description\"],\r\n      Cell: ({ row }) => <div className=\"wide-col\">{row.original.description}</div>\r\n    },\r\n    {\r\n      Accessor: \"hitCount\",\r\n      Xl8: true,\r\n      Header: [\"rul009\", \"Hits\"]\r\n    },\r\n    {\r\n      Accessor: \"overMaxHits\",\r\n      Xl8: true,\r\n      Header: [\"rul010\", \"Over Max Hits\"],\r\n      Cell: ({ row }) => (\r\n        <div className=\"icon-col\">{row.original.overMaxHits ? \"Yes\" : \"No\"}</div>\r\n      )\r\n    },\r\n    { Accessor: \"modifiedOn\", Xl8: true, Header: [\"rul011\", \"Modified On\"] },\r\n    { Accessor: \"modifiedBy\", Xl8: true, Header: [\"rul012\", \"Modified By\"] },\r\n    { Accessor: \"author\", Xl8: true, Header: [\"rul013\", \"Author\"] },\r\n    {\r\n      Accessor: \"enabled\",\r\n      Xl8: true,\r\n      Header: [\"rul014\", \"Enabled\"],\r\n      Cell: ({ row }) => {\r\n        if (row.original.enabled === true) {\r\n          return (\r\n            <div className=\"icon-col\">\r\n              <i className=\"fa fa-check-square qbrb-icon-check\"></i>\r\n            </div>\r\n          );\r\n        }\r\n        return <div className=\"icon-col\"></div>;\r\n      }\r\n    }\r\n  ];\r\n\r\n  const fetchDetail = selectedId => {\r\n    rule.get(selectedId).then(res => {\r\n      if (hasData(res)) {\r\n        res.title = res.summary.title;\r\n        res.description = res.summary.description;\r\n        res.ruleCat = res.summary.ruleCat;\r\n        res.startDate = res.summary.startDate;\r\n        res.enabled = res.summary.enabled;\r\n        res.endDate = res.summary.endDate;\r\n        res.query = res.details;\r\n        delete res.summary;\r\n        delete res.details;\r\n\r\n        setId(selectedId);\r\n        setRecord(res);\r\n        triggerShowModal(selectedId);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Causes show modal to update in a useEffect. This gives the setRecord and setId (see fetchDetail) time to refresh\r\n  // so the modal doesn't launch with stale or missing data.\r\n  const triggerShowModal = recId => {\r\n    if (showModal && !recId) return closeModal();\r\n    const recordId = recId;\r\n    const title = recordId ? editRule : addRule;\r\n\r\n    setModalTitle(title);\r\n    // timestamp as key ensures the modal gets refreshed and displayed on each launch.\r\n    setModalKey(Date.now());\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (modalKey > -1) setShowModal(true);\r\n  }, [modalKey]);\r\n\r\n  const closeModalAndRefresh = () => {\r\n    closeModal();\r\n    fetchTableData();\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setId();\r\n    setRecord();\r\n    setShowModal(false);\r\n  };\r\n\r\n  // Called by the Tab component where ev is a dash separated string in the form of \"tabId-tab-selectedTabName\"\r\n  const titleTabCallback = ev => {\r\n    const selectedTabName = ev.split(\"-\")[2];\r\n    if (!selectedTabName) return;\r\n\r\n    if ((selectedTabName || RULETAB.MY).toLowerCase() === RULETAB.ALL) {\r\n      setTab(RULETAB.ALL);\r\n      navigate(`/gtas/tools/rules/${RULETAB.ALL}`);\r\n    } else {\r\n      setTab(RULETAB.MY);\r\n      navigate(`/gtas/tools/rules/${RULETAB.MY}`);\r\n    }\r\n  };\r\n\r\n  const fetchTableData = () => {\r\n    service.get().then(res => {\r\n      let parsed = [{}];\r\n\r\n      if (hasData(res)) {\r\n        parsed = res.map(item => {\r\n          return {\r\n            id: item.id,\r\n            hitCount: item.hitCount,\r\n            modifiedOn: item.modifiedOn,\r\n            modifiedBy: item.modifiedBy,\r\n            ...item.summary\r\n          };\r\n        });\r\n        setData(parsed);\r\n\r\n        setTablekey(tablekey + 1);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (endpoint === \"rules\") {\r\n      // Builds a dummy string with the default tabname in the 3rd position;\r\n      titleTabCallback(`--${RULETAB.MY}`);\r\n    }\r\n\r\n    fetchTableData();\r\n  }, [endpoint]);\r\n\r\n  useEffect(() => {\r\n    const lastRule = ctx.getLookupState(\"lastRule\");\r\n\r\n    if (hasData(lastRule)) {\r\n      const flatRule = { ...lastRule.summary, query: lastRule.details, id: lastRule.id };\r\n\r\n      setId(flatRule.id);\r\n      setRecord(flatRule);\r\n      triggerShowModal(flatRule.id);\r\n      ctx.lookupAction({ type: \"removeRule\" });\r\n    }\r\n  }, []);\r\n\r\n  const tabs = (\r\n    <Tabs defaultActiveKey={RULETAB.MY} id=\"qrTabs\">\r\n      <Tab\r\n        eventKey={RULETAB.MY}\r\n        title={\r\n          <Xl8 xid=\"rul003\" id=\"qrTabs-tab-my\">\r\n            My Rules\r\n          </Xl8>\r\n        }\r\n      ></Tab>\r\n      <Tab\r\n        eventKey={RULETAB.ALL}\r\n        title={\r\n          <Xl8 xid=\"rul004\" id=\"qrTabs-tab-all\">\r\n            All Rules\r\n          </Xl8>\r\n        }\r\n      ></Tab>\r\n    </Tabs>\r\n  );\r\n\r\n  return (\r\n    <RoleAuthenticator roles={[ROLE.ADMIN, ROLE.RULEMGR]}>\r\n      <Main className=\"full bg-white\">\r\n        <Title\r\n          title={<Xl8 xid=\"rul006\">Rules</Xl8>}\r\n          key=\"title\"\r\n          leftChild={tabs}\r\n          leftCb={titleTabCallback}\r\n        ></Title>\r\n        <Table\r\n          data={data}\r\n          callback={cb}\r\n          header={header}\r\n          key={`table-${tablekey}`}\r\n        ></Table>\r\n        <Fab\r\n          icon={<i className=\"fa fa-plus nospin\" />}\r\n          variant=\"info\"\r\n          onClick={() => triggerShowModal()}\r\n        ></Fab>\r\n\r\n        {showModal && (\r\n          <QRModal\r\n            show=\"true\"\r\n            onHide={closeModal}\r\n            callback={modalCb}\r\n            mode={QR.RULE}\r\n            key={modalKey}\r\n            data={record}\r\n            title={modalTitle}\r\n            id={id}\r\n            service={rule}\r\n          />\r\n        )}\r\n      </Main>\r\n    </RoleAuthenticator>\r\n  );\r\n};\r\n\r\nexport default Rules;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\queryrules\\QRDetails.js",["627"],"import React, { useEffect, useState } from \"react\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport Main from \"../../../components/main/Main\";\r\nimport { querypax } from \"../../../services/serviceWrapper\";\r\nimport Title from \"../../../components/title/Title\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport RoleAuthenticator from \"../../../context/roleAuthenticator/RoleAuthenticator\";\r\nimport { Link } from \"@reach/router\";\r\n// import { Container } from \"react-bootstrap\";\r\nimport { asArray, getAge, alt, localeDateOnly, localeDate } from \"../../../utils/utils\";\r\nimport { ROLE } from \"../../../utils/constants\";\r\nimport Toast from \"../../../components/toast/Toast\";\r\n\r\nconst QRDetails = props => {\r\n  const cb = function(result) {};\r\n  const [data, setData] = useState();\r\n  const [key, setKey] = useState(0);\r\n  const [showToast, setShowToast] = useState(false);\r\n\r\n  const OVER_QUERY_LIMIT_HEADER = (\r\n    <>\r\n      <Xl8 xid=\"qrd001\"> WARNING: Query Over Limit </Xl8>\r\n    </>\r\n  );\r\n  const OVER_QUERY_LIMIT = (\r\n    <Xl8 xid=\"qrd002\">Query has exceeded results limit, return truncated</Xl8>\r\n  );\r\n\r\n  const parseData = data => {\r\n    return asArray(data).map(item => {\r\n      item.docNumber = item.documents?.length > 0 ? item.documents[0].documentNumber : \"\"; // TODO Documents: shd show all or none here.\r\n      item.age = getAge(item.dob) ? ` (${getAge(item.dob)})` : \"\";\r\n      item.dobStr = new Date(item.dob).toISOString().slice(0, -14);\r\n      item.dobAge = `${alt(localeDateOnly(item.dobStr))} ${item.age}`;\r\n      item.rulehit = item.onRuleHitList ? 1 : \"\";\r\n      item.watchhit = item.onWatchList ? 1 : \"\";\r\n      item.flight = item.carrier + item.flightNumber;\r\n      item.eta = localeDate(item.eta);\r\n      item.etd = localeDate(item.etd);\r\n\r\n      return item;\r\n    });\r\n  };\r\n\r\n  const headers = [\r\n    {\r\n      Accessor: \"rulehit\",\r\n      Xl8: true,\r\n      Header: [\"fl014\", \"Rule Hits\"]\r\n    },\r\n    {\r\n      Accessor: \"watchhit\",\r\n      Xl8: true,\r\n      Header: [\"fl013\", \"Watchlist Hits\"]\r\n    },\r\n    {\r\n      Accessor: \"flight\",\r\n      Xl8: true,\r\n      Header: [\"fl019\", \"Flight\"]\r\n    },\r\n    {\r\n      Accessor: \"eta\",\r\n      Xl8: true,\r\n      Header: [\"qrd003\", \"ETA\"]\r\n    },\r\n    {\r\n      Accessor: \"etd\",\r\n      Xl8: true,\r\n      Header: [\"qrd004\", \"ETD\"]\r\n    },\r\n    { Accessor: \"passengerType\", Xl8: true, Header: [\"qrd005\", \"Passenger Type\"] },\r\n    {\r\n      Accessor: \"lastName\",\r\n      Xl8: true,\r\n      Header: [\"qrd006\", \"Last Name\"],\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <Link to={`/gtas/paxDetail/${row.original.flightId}/${row.original.id}`}>\r\n            {row.original.lastName}\r\n          </Link>\r\n        );\r\n      }\r\n    },\r\n    { Accessor: \"firstName\", Xl8: true, Header: [\"qrd007\", \"First Name\"] },\r\n    { Accessor: \"middleName\", Xl8: true, Header: [\"qrd008\", \"Middle Name\"] },\r\n    { Accessor: \"gender\", Xl8: true, Header: [\"qrd009\", \"Gender\"] },\r\n    {\r\n      Accessor: \"dobStr\",\r\n      Xl8: true,\r\n      Header: [\"qrd010\", \"DOB\"],\r\n      Cell: ({ row }) => <div>{row.original.dobAge}</div>\r\n    },\r\n    { Accessor: \"docNumber\", Xl8: true, Header: [\"qrd011\", \"Document Number\"] },\r\n    { Accessor: \"nationality\", Xl8: true, Header: [\"qrd012\", \"Nationality\"] }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    querypax.post(props.location?.state?.data).then(res => {\r\n      const resData = parseData(res.result?.passengers);\r\n      setData(resData);\r\n      setKey(key + 1);\r\n      if (res.result?.queryLimitReached) {\r\n        setShowToast(true);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  //TOOD - need a back button or some way to get back to the query/rule page that brought us here.\r\n  return (\r\n    <RoleAuthenticator roles={[ROLE.ADMIN, ROLE.QRYMGR]}>\r\n      <Main className=\"full bg-white\">\r\n        <Title title={<Xl8 xid=\"\">Query Details</Xl8>}></Title>\r\n        <Table data={data} header={headers} callback={cb} key={key}></Table>\r\n        <Toast\r\n          onClose={() => setShowToast(false)}\r\n          show={showToast}\r\n          header={OVER_QUERY_LIMIT_HEADER}\r\n          body={OVER_QUERY_LIMIT}\r\n          variant={\"danger\"}\r\n          containerClass={\"toast-container-qrd\"}\r\n        />\r\n      </Main>\r\n    </RoleAuthenticator>\r\n  );\r\n};\r\n\r\nexport default QRDetails;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\about\\About.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\pnr\\PNR.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\watchlist\\Watchlist.js",["628","629","630"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport Title from \"../../../components/title/Title\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport Main from \"../../../components/main/Main\";\r\nimport { Tabs, Tab } from \"react-bootstrap\";\r\nimport { wlpax, wldocs, hitcats } from \"../../../services/serviceWrapper\";\r\nimport { hasData, watchlistDateFormat } from \"../../../utils/utils\";\r\nimport WLModal from \"./WLModal\";\r\nimport \"./constants.js\";\r\nimport CSVReader from \"../../../components/CSVReader/CSVReader\";\r\nimport Toast from \"../../../components/toast/Toast\";\r\nimport Confirm from \"../../../components/confirmationModal/Confirm\";\r\nimport \"./Watchlist.css\";\r\nimport { Fab, Action } from \"react-tiny-fab\";\r\nimport \"react-tiny-fab/dist/styles.css\";\r\n\r\nconst Watchlist = props => {\r\n  const TAB = { PAX: \"passenger\", DOX: \"document\" };\r\n  const mode = (props.mode || \"\").toLowerCase();\r\n  const isDox = mode === TAB.DOX;\r\n  const importRef = useRef(null);\r\n  const [file, setFile] = useState();\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [id, setId] = useState(0);\r\n  const [key, setKey] = useState(0);\r\n  const [data, setData] = useState();\r\n  const [wlcatData, setWlcatData] = useState([]);\r\n  const [editRow, setEditRow] = useState({});\r\n  const [tab, setTab] = useState(isDox ? TAB.DOX : TAB.PAX); // default to pax when no param is in the uri\r\n  const [buttonTypeText, setButtonTypeText] = useState(); // default to pax when no param is in the uri\r\n  const [showToast, setShowToast] = useState(false);\r\n  const [toastHeader, setToastHeader] = useState();\r\n  const [toastContent, setToastContent] = useState();\r\n  const [toastVariant, setToastVariant] = useState();\r\n\r\n  const deleteText = {\r\n    message: <Xl8 xid=\"wl005\">Are you sure you want to delete the record?</Xl8>,\r\n    title: <Xl8 xid=\"wl006\">Delete Confirmation</Xl8>,\r\n    style: \"danger\"\r\n  };\r\n\r\n  const handleImportData = results => {\r\n    const service = tab === TAB.DOX ? wldocs : wlpax;\r\n    const importedWl = { action: \"Create\", id: null, wlItems: [] };\r\n    results.forEach(result => {\r\n      let isValidItem = true;\r\n      const item = result.data || {};\r\n      const catLabel = item[\"category\"];\r\n      item[\"categoryId\"] = (wlcatData.find(item => item.label === catLabel) || {}).id;\r\n      if (item[\"dob\"]) item[\"dob\"] = watchlistDateFormat(item[\"dob\"]); //the rule engine throws error for date formated mm/dd/yyyy\r\n\r\n      delete item[\"category\"]; // replaced by categoryId\r\n\r\n      if (item[\"dob\"] === \"Invalid Date\") isValidItem = false;\r\n\r\n      if (isValidItem) importedWl.wlItems.push(item);\r\n    });\r\n\r\n    service.post(importedWl).then(res => {\r\n      if (res.status === \"SUCCESS\") {\r\n        fetchData(); //get latest dataa\r\n        setToastHeader(\"Watchlist\");\r\n        setToastVariant(\"success\");\r\n        setToastContent(`${importedWl.wlItems.length} ${tab} watchlist items imported`);\r\n        setShowToast(true);\r\n      }\r\n    });\r\n  };\r\n\r\n  const cb = function(result) {};\r\n\r\n  const launchModal = recordId => {\r\n    setId(recordId);\r\n    setShowModal(true);\r\n  };\r\n\r\n  const closeModal = ev => {\r\n    setId(0);\r\n    setEditRow({});\r\n    setShowModal(false);\r\n\r\n    if (ev === \"SUCCESS\") fetchData();\r\n  };\r\n\r\n  const launchImport = file => {\r\n    if (importRef.current) {\r\n      setFile(file);\r\n      importRef.current.open(file);\r\n    }\r\n  };\r\n\r\n  const deleteWatchlistItem = wlId => {\r\n    const service = wlpax;\r\n    service.del(wlId).then(res => {\r\n      if (!hasData(wlcatData)) getCats();\r\n      else fetchData();\r\n    });\r\n  };\r\n\r\n  const getDeleteColumnData = id => {\r\n    return (\r\n      <Confirm header={deleteText.title} message={deleteText.message}>\r\n        {confirm => (\r\n          <div className=\"icon-col\">\r\n            <i\r\n              className=\"fa fa-remove qbrb-icon-black\"\r\n              onClick={confirm(() => deleteWatchlistItem(id))}\r\n            ></i>\r\n          </div>\r\n        )}\r\n      </Confirm>\r\n    );\r\n  };\r\n\r\n  const getEditRowData = item => {\r\n    return (\r\n      <div className=\"icon-col\">\r\n        <i\r\n          className=\"fa fa-pencil-square-o table-icon\"\r\n          onClick={() => {\r\n            launchModal(item.id);\r\n            setEditRow(item);\r\n          }}\r\n        ></i>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const tabs = (\r\n    <Tabs defaultActiveKey={tab} id=\"wlTabs\">\r\n      <Tab\r\n        eventKey={TAB.PAX}\r\n        title={\r\n          <Xl8 xid=\"wl001\" id=\"wlTabs-tab-passenger\">\r\n            Passenger\r\n          </Xl8>\r\n        }\r\n      ></Tab>\r\n      <Tab\r\n        eventKey={TAB.DOX}\r\n        title={\r\n          <Xl8 xid=\"wl002\" id=\"wlTabs-tab-document\">\r\n            Document\r\n          </Xl8>\r\n        }\r\n      ></Tab>\r\n    </Tabs>\r\n  );\r\n\r\n  const titleTabCallback = ev => {\r\n    // only respond to tab click events. Clicking the header button has no effect.\r\n    // Could also create separate callbacks for the left and right children in the title comp.\r\n    if (ev.length === 0) return;\r\n\r\n    const id = ev.split(\"-\")[2];\r\n    const newTab = (id || \"\").toLowerCase() === TAB.PAX ? TAB.PAX : TAB.DOX;\r\n\r\n    setTab(newTab);\r\n  };\r\n\r\n  /**\r\n   * refetch data when the tab changes, but after fetching the watchlist cat.\r\n   * Later we can cache the results and poll to refresh on a timer. Ultimately we should create a single watchlist fetch\r\n   * and filter the results for each tab type. This is OK for now.\r\n   */\r\n  useEffect(() => {\r\n    if (!hasData(wlcatData)) return;\r\n\r\n    fetchData();\r\n  }, [tab, wlcatData]);\r\n\r\n  useEffect(() => {\r\n    tab === TAB.PAX\r\n      ? setButtonTypeText(<Xl8 xid=\"wl004\">Add Passenger</Xl8>)\r\n      : setButtonTypeText(<Xl8 xid=\"wl003\">Add Document</Xl8>);\r\n  }, [tab]);\r\n\r\n  // fetch the wl cats on page load.\r\n  useEffect(() => {\r\n    getCats();\r\n  }, []);\r\n\r\n  const getCats = () => {\r\n    hitcats.get().then(res => {\r\n      setWlcatData(res);\r\n    });\r\n  };\r\n\r\n  // Grab the value for the term whose field equals the name param.\r\n  // So if coll.terms = [{\"field\": \"examplename\", \"value\": \"examplevalue\"}, {\"field\": \"othername\", \"value\": \"othervalue\"}]\r\n  // getPropertyVal(coll, \"examplename\") returns \"examplevalue\"\r\n  const getPropertyVal = (coll, name) => {\r\n    return (coll.terms.filter(term => term.field === name)[0] || {}).value;\r\n  };\r\n\r\n  const fetchData = () => {\r\n    const service = tab === TAB.DOX ? wldocs : wlpax;\r\n\r\n    service.get().then(res => {\r\n      let parsed = [];\r\n\r\n      // Backend is sending us an object meant for running rules on the backend, which is just wrong.\r\n      // so until we refactor that code, we have to filter through all the data we don't need here\r\n      // and restructure it as a flat object. See #45.\r\n      if (hasData(res)) {\r\n        parsed = res.map(item => {\r\n          const firstName = getPropertyVal(item, \"firstName\");\r\n          const lastName = getPropertyVal(item, \"lastName\");\r\n          const dob = getPropertyVal(item, \"dob\");\r\n          const categoryId = getPropertyVal(item, \"categoryId\");\r\n          const documentType = getPropertyVal(item, \"documentType\");\r\n          const documentNumber = getPropertyVal(item, \"documentNumber\");\r\n          const category = (wlcatData.find(item => item.id == categoryId) || {}).label; // allow coersion. item.id is an int, categoryId is a string.\r\n\r\n          //TODO: consolidate pax/doc fetches??\r\n          if (tab === TAB.PAX)\r\n            return {\r\n              id: item.id,\r\n              firstName: firstName,\r\n              lastName: lastName,\r\n              dob: dob,\r\n              categoryId: categoryId,\r\n              category: category\r\n            };\r\n\r\n          return {\r\n            id: item.id,\r\n            documentNumber: documentNumber,\r\n            documentType: documentType,\r\n            categoryId: categoryId,\r\n            category: category\r\n          };\r\n        });\r\n      }\r\n\r\n      setData(parsed);\r\n      setKey(key + 1);\r\n    });\r\n  };\r\n\r\n  const doxHeader = [\r\n    {\r\n      Accessor: \"id\",\r\n      Xl8: true,\r\n      Header: [\"edit001\", \"Edit\"],\r\n      disableExport: true,\r\n      disableSortBy: true,\r\n      Cell: ({ row }) => getEditRowData(row.original)\r\n    },\r\n    { Accessor: \"documentType\", Xl8: true, Header: [\"wl011\", \"Document Type\"] },\r\n    { Accessor: \"documentNumber\", Xl8: true, Header: [\"wl012\", \"Document Number\"] },\r\n    { Accessor: \"category\", Xl8: true, Header: [\"wl013\", \"Category\"] },\r\n    {\r\n      Accessor: \"delete\",\r\n      Xl8: true,\r\n      Header: [\"wl014\", \"Delete\"],\r\n      disableExport: true,\r\n      Cell: ({ row }) => getDeleteColumnData(row.original.id)\r\n    }\r\n  ];\r\n\r\n  const paxHeader = [\r\n    {\r\n      Accessor: \"id\",\r\n      Xl8: true,\r\n      disableExport: true,\r\n      disableSortBy: true,\r\n      Header: [\"edit001\", \"Edit\"],\r\n      Cell: ({ row }) => getEditRowData(row.original)\r\n    },\r\n    { Accessor: \"firstName\", Xl8: true, Header: [\"wl015\", \"First Name\"] },\r\n    { Accessor: \"lastName\", Xl8: true, Header: [\"wl016\", \"Last Name\"] },\r\n    { Accessor: \"dob\", Xl8: true, Header: [\"wl016\", \"DOB\"] },\r\n    { Accessor: \"category\", Xl8: true, Header: [\"wl017\", \"Category\"] },\r\n    {\r\n      Accessor: \"delete\",\r\n      Xl8: true,\r\n      disableExport: true,\r\n      Header: [\"wl014\", \"Delete\"],\r\n      Cell: ({ row }) => getDeleteColumnData(row.original.id)\r\n    }\r\n  ];\r\n\r\n  const header = tab === TAB.DOX ? doxHeader : paxHeader;\r\n  const wlType = tab;\r\n\r\n  return (\r\n    <Main className=\"full bg-white\">\r\n      <Title\r\n        title={<Xl8 xid=\"wl007\">Watchlists</Xl8>}\r\n        leftChild={tabs}\r\n        leftCb={titleTabCallback}\r\n        key={tab}\r\n      ></Title>\r\n      <Table\r\n        data={data}\r\n        key={key}\r\n        header={header}\r\n        callback={cb}\r\n        exportFileName={`watchlists-${wlType}`}\r\n      ></Table>\r\n      <Fab icon={<i className=\"fa fa-plus\" />} variant=\"info\">\r\n        <Action text={buttonTypeText} onClick={() => launchModal(0)}>\r\n          <i className=\"fa fa-plus\" />\r\n        </Action>\r\n        <Action text={<Xl8 xid=\"csv001\">Import CSV</Xl8>} onClick={e => launchImport(e)}>\r\n          <CSVReader ref={importRef} callback={handleImportData} file={file} />\r\n        </Action>\r\n      </Fab>\r\n      <WLModal\r\n        type={tab}\r\n        show={showModal}\r\n        onHide={closeModal}\r\n        callback={cb}\r\n        data={editRow}\r\n        categories={wlcatData}\r\n        id={id}\r\n      />\r\n      <Toast\r\n        onClose={() => setShowToast(false)}\r\n        show={showToast}\r\n        header={toastHeader}\r\n        body={toastContent}\r\n        variant={toastVariant}\r\n      />\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default Watchlist;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\Admin.js",["631","632"],"import React from \"react\";\r\nimport Title from \"../../components/title/Title\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport Main from \"../../components/main/Main\";\r\nimport ExternalLink from \"../../components/externalLink/ExternalLink\";\r\nimport { Card, CardDeck, Container } from \"react-bootstrap\";\r\nimport { hasData, getEndpoint } from \"../../utils/utils\";\r\nimport { Link } from \"@reach/router\";\r\nimport \"./Admin.css\";\r\n\r\nconst Admin = props => {\r\n  const children = props.children?.props?.children;\r\n\r\n  if (getEndpoint(props.location?.pathname) === \"admin\")\r\n    return (\r\n      <Main className=\"full-cards\">\r\n        <Title title={<Xl8 xid=\"adm001\">Admin</Xl8>} />\r\n        <CardDeck className=\"page-deck\">\r\n          {children.map(info => {\r\n            const data = info.props;\r\n            return (\r\n              <Card className=\"page-tiles\" key={data.path}>\r\n                {data.hasExternalLink ? (\r\n                  <ExternalLink to={data.path} className=\"card-link\">\r\n                    <Card.Body>\r\n                      <Card.Title className=\"nowrap text-center\">\r\n                        <i className={`fa fa-3x ${data.icon}`}></i>\r\n                      </Card.Title>\r\n                      <div className=\"text-center text-muted m-3\">{data.name}</div>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                      <div className=\"card-description\">\r\n                        <Card.Text>{data.desc}</Card.Text>\r\n                      </div>\r\n                    </Card.Footer>\r\n                  </ExternalLink>\r\n                ) : (\r\n                  <Link to={data.path} className=\"card-link\">\r\n                    <Card.Body>\r\n                      <Card.Title className=\"nowrap text-center\">\r\n                        <i className={`fa fa-3x ${data.icon}`}></i>\r\n                      </Card.Title>\r\n                      <div className=\"text-center text-muted m-3\">{data.name}</div>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                      <div className=\"card-description\">\r\n                        <Card.Text>{data.desc}</Card.Text>\r\n                      </div>\r\n                    </Card.Footer>\r\n                  </Link>\r\n                )}\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardDeck>\r\n      </Main>\r\n    );\r\n\r\n  return <>{props.children}</>;\r\n};\r\n\r\nexport default Admin;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\search\\Search.js",["633"],"import React, { useEffect, useState } from \"react\";\r\nimport Title from \"../../components/title/Title\";\r\nimport Table from \"../../components/table/Table\";\r\nimport Main from \"../../components/main/Main\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport { search } from \"../../services/serviceWrapper\";\r\nimport { asArray, hasData, localeDate } from \"../../utils/utils\";\r\nimport { Link, useParams } from \"@reach/router\";\r\nimport \"./Search.scss\";\r\n\r\nconst Search = props => {\r\n  const [data, setData] = useState([]);\r\n  const [refreshKey, setRefreshKey] = useState([]);\r\n  const { searchParam } = useParams();\r\n  const cb = () => {};\r\n  const searchedTextUpper = searchParam.toUpperCase();\r\n  const getHighlight = text => {\r\n    return searchedTextUpper.includes((\"\" + text).toUpperCase()) ? \"highlight\" : \"\";\r\n  };\r\n\r\n  const linkToPaxdetails = (passengerId, flightId, displayText) => {\r\n    return <Link to={`/gtas/paxDetail/${flightId}/${passengerId}`}>{displayText} </Link>;\r\n  };\r\n  const Headers = [\r\n    {\r\n      Accessor: \"lastName\",\r\n      Header: \"Last Name\",\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <span className={getHighlight(row.original.lastName)}>\r\n            {linkToPaxdetails(\r\n              row.original.passengerId,\r\n              row.original.flightId,\r\n              row.original.lastName\r\n            )}\r\n          </span>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      Accessor: \"firstName\",\r\n      Header: \"First Name\",\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <span className={getHighlight(row.original.firstName)}>\r\n            {row.original.firstName}\r\n          </span>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      Accessor: \"middleName\",\r\n      Header: \"Middle Name\",\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <span className={getHighlight(row.original.middleName)}>\r\n            {row.original.middleName}\r\n          </span>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      Accessor: \"flightNumber\",\r\n      Header: \"Flight Number\",\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <span className={getHighlight(row.original.flightNumber)}>\r\n            {row.original.flightNumber}\r\n          </span>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      Accessor: \"origin\",\r\n      Header: \"Origin\",\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <span className={getHighlight(row.original.origin)}>{row.original.origin}</span>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      Accessor: \"destination\",\r\n      Header: \"Destination\",\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <span className={getHighlight(row.original.destination)}>\r\n            {row.original.destination}\r\n          </span>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      Accessor: \"etd\",\r\n      Header: \"ETD\",\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <span className={getHighlight(row.original.etd)}>\r\n            {localeDate(row.original.etd)}\r\n          </span>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      Accessor: \"eta\",\r\n      Header: \"ETA\",\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <span className={getHighlight(row.original.eta)}>\r\n            {localeDate(row.original.eta)}\r\n          </span>\r\n        );\r\n      }\r\n    }\r\n  ];\r\n\r\n  const pageSize = 500;\r\n  const params = `?pageNumber=1&pageSize=${pageSize}&column=_score&dir=des&query=${searchParam}`;\r\n  const parseData = items => {\r\n    const parsedData = asArray(items).map(item => {\r\n      return {\r\n        ...item,\r\n        eta: localeDate(item.eta),\r\n        etd: localeDate(item.etd)\r\n      };\r\n    });\r\n    return parsedData;\r\n  };\r\n  useEffect(() => {\r\n    search.passengers(params).then(res => {\r\n      if (hasData(res.result)) {\r\n        setData(parseData(res.result.passengers));\r\n        setRefreshKey(refreshKey + 1);\r\n      }\r\n    });\r\n  }, [searchParam]);\r\n\r\n  return (\r\n    <Main className=\"full bg-white\">\r\n      <Title\r\n        title={\r\n          <>\r\n            <Xl8 xid=\"srch001\">Search Result for: </Xl8> {searchedTextUpper}\r\n          </>\r\n        }\r\n        uri={props.uri}\r\n      />\r\n      <Table\r\n        data={data}\r\n        id=\"searchTable\"\r\n        callback={cb}\r\n        header={Headers}\r\n        key={refreshKey}\r\n        enableColumnFilter={true}\r\n      />\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\flightPax\\FlightPax.js",["634","635","636","637"],"import React, { useEffect, useState } from \"react\";\r\nimport Table from \"../../components/table/Table\";\r\nimport Title from \"../../components/title/Title\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport FlightBadge from \"../../components/flightBadge/FlightBadge\";\r\n// import LabelledInput from \"../../components/labelledInput/LabelledInput\";\r\nimport SidenavContainer from \"../../components/sidenavContainer/SidenavContainer\";\r\nimport CountdownBadge from \"../../components/countdownBadge/CountdownBadge\";\r\nimport { Col, Tabs, Tab } from \"react-bootstrap\";\r\nimport Main from \"../../components/main/Main\";\r\nimport RoleAuthenticator from \"../../context/roleAuthenticator/RoleAuthenticator\";\r\nimport { Link } from \"@reach/router\";\r\nimport { flightPassengers } from \"../../services/serviceWrapper\";\r\nimport {\r\n  asArray,\r\n  hasData,\r\n  getAge,\r\n  alt,\r\n  localeDateOnly,\r\n  localeDate,\r\n  sortableDate\r\n} from \"../../utils/utils\";\r\nimport { ROLE } from \"../../utils/constants\";\r\nimport \"./FlightPax.css\";\r\n\r\nconst FlightPax = props => {\r\n  const cb = function(result) {};\r\n\r\n  const [data, setData] = useState();\r\n  const [hitData, setHitData] = useState();\r\n  const [allData, setAllData] = useState();\r\n  const [tab, setTab] = useState(\"all\");\r\n  const [key, setKey] = useState(0);\r\n  const flightData = hasData(props.location.state?.data) ? props.location.state.data : {};\r\n\r\n  const hasAnyHits = item => {\r\n    if (item.watchlistHitCount > 0 || item.manualHitCount > 0 || item.fuzzyHitCount > 0 || item.ruleHitCount > 0\r\n        || item.graphHitCount > 0 || item.externalHitCount > 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const parseData = data => {\r\n    return asArray(data).map(item => {\r\n      const displayDobDate = localeDateOnly(\r\n        new Date(item.dob).toISOString().slice(0, -14)\r\n      );\r\n      item.docNumber = item.documents?.length > 0 ? item.documents[0] : \"\"; // TODO Documents: shd show all or none here.\r\n      item.age = getAge(item.dob) ? ` (${getAge(item.dob)})` : \"\";\r\n      item.dobStr = `${sortableDate(new Date(item.dob))} ${displayDobDate} ${item.age}`;\r\n      item.dobAge = `${alt(displayDobDate)} ${item.age}`;\r\n      item.rulehit = item.onRuleHitList ? 1 : \"\";\r\n      item.watchhit = item.onWatchList ? 1 : \"\";\r\n      item.hitCounts = `${item.lowPrioHitCount || 0}${item.medPrioHitCount ||\r\n        0}${item.highPrioHitCount || 0}`;\r\n      item.totalHitCounts = item.lowPrioHitCount+item.medPrioHitCount+item.highPrioHitCount;\r\n      item.aggregateHitsCount = {\r\n        low: item.lowPrioHitCount,\r\n        med: item.medPrioHitCount,\r\n        high: item.highPrioHitCount\r\n      };\r\n      return item;\r\n    });\r\n  };\r\n\r\n  const hitHeaders = [\r\n    {\r\n      Accessor: \"ruleHitCount\",\r\n      Xl8: true,\r\n      Header: [\"fp011\", \"Rule Hits\"],\r\n      disableGroupBy: true,\r\n      aggregate: \"sum\",\r\n      Aggregated: ({ value }) => `${value} Hits`\r\n    },\r\n    {\r\n      Accessor: \"watchlistHitCount\",\r\n      Xl8: true,\r\n      Header: [\"fp012\", \"Watchlist Hits\"],\r\n      disableGroupBy: true,\r\n      aggregate: \"sum\",\r\n      Aggregated: ({ value }) => `${value} Hits`\r\n    },\r\n    {\r\n      Accessor: \"graphHitCount\",\r\n      Xl8: true,\r\n      Header: [\"fp022\", \"Graph Hits\"],\r\n      disableGroupBy: true,\r\n      aggregate: \"sum\",\r\n      Aggregated: ({ value }) => `${value} Hits`\r\n    },\r\n    {\r\n      Accessor: \"fuzzyHitCount\",\r\n      Xl8: true,\r\n      Header: [\"fp023\", \"Partial Hits\"],\r\n      disableGroupBy: true,\r\n      aggregate: \"sum\",\r\n      Aggregated: ({ value }) => `${value} Hits`\r\n    },\r\n    {\r\n      Accessor: \"manualHitCount\",\r\n      Xl8: true,\r\n      Header: [\"fp024\", \"Manual Hits\"],\r\n      disableGroupBy: true,\r\n      aggregate: \"sum\",\r\n      Aggregated: ({ value }) => `${value} Hits`\r\n    },\r\n    {\r\n      Accessor: \"externalHitCount\",\r\n      Xl8: true,\r\n      Header: [\"fp025\", \"External Hits\"],\r\n      disableGroupBy: true,\r\n      aggregate: \"sum\",\r\n      Aggregated: ({ value }) => `${value} Hits`\r\n    }\r\n  ];\r\n\r\n  const aggregateHitHeader = {\r\n    Accessor: \"totalHitCounts\",\r\n    Xl8: true,\r\n    Header: [\"fp026\", \"Hit Aggregates\"],\r\n    disableGroupBy: true,\r\n    aggregate: 'sum',\r\n    Aggregated: ({ value }) => `${value} Hits`,\r\n    Cell: ({ row }) => {\r\n      return (\r\n        <span\r\n          style={{\r\n            \"justify-content\": \"space-between\",\r\n            display: \"flex\",\r\n            \"align-items\": \"baseline\",\r\n            marginLeft: \"5px\",\r\n            marginRight: \"5px\"\r\n          }}\r\n        >\r\n          {row.original.aggregateHitsCount.low > 0 && (\r\n            <span>\r\n              <i\r\n                className=\"fa fa-flag\"\r\n                style={{ color: \"#FCF300\" }}\r\n                title=\"normal severity\"\r\n              ></i>\r\n              {row.original.aggregateHitsCount.low}\r\n            </span>\r\n          )}\r\n          {row.original.aggregateHitsCount.med > 0 && (\r\n            <span>\r\n              <i\r\n                className=\"fa fa-flag\"\r\n                style={{ color: \"orange\" }}\r\n                title=\"high severity\"\r\n              ></i>\r\n              {row.original.aggregateHitsCount.med}\r\n            </span>\r\n          )}\r\n          {row.original.aggregateHitsCount.high > 0 && (\r\n            <span>\r\n              <i className=\"fa fa-flag\" style={{ color: \"red\" }} title=\"top severity\"></i>{\" \"}\r\n              {row.original.aggregateHitsCount.high}\r\n            </span>\r\n          )}\r\n        </span>\r\n      );\r\n    }\r\n  };\r\n  const arrayHeaderFixer = tab !== \"hits\" ? [aggregateHitHeader] : hitHeaders;\r\n  const headers = [\r\n    ...arrayHeaderFixer,\r\n    {\r\n      Accessor: \"passengerType\",\r\n      Xl8: true,\r\n      Header: [\"fp013\", \"Passenger Type\"],\r\n      disableGroupBy: true\r\n    },\r\n    {\r\n      Accessor: \"lastName\",\r\n      Xl8: true,\r\n      Header: [\"fp014\", \"Last Name\"],\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <RoleAuthenticator\r\n            alt={row.original.lastName}\r\n            roles={[ROLE.ADMIN, ROLE.PAXVWR]}\r\n          >\r\n            <Link to={`/gtas/paxDetail/${props.id}/${row.original.id}`}>\r\n              {row.original.lastName}\r\n            </Link>\r\n          </RoleAuthenticator>\r\n        );\r\n      },\r\n      disableGroupBy: true,\r\n      aggregate: \"count\",\r\n      Aggregated: ({}) => ``\r\n    },\r\n    {\r\n      Accessor: \"firstName\",\r\n      Xl8: true,\r\n      Header: [\"fp015\", \"First Name\"],\r\n      disableGroupBy: true\r\n    },\r\n    {\r\n      Accessor: \"middleName\",\r\n      Xl8: true,\r\n      Header: [\"fp016\", \"Middle Name\"],\r\n      disableGroupBy: true\r\n    },\r\n    { Accessor: \"gender\", Xl8: true, Header: [\"fp017\", \"Gender\"], disableGroupBy: true },\r\n    {\r\n      Accessor: \"dobStr\",\r\n      Xl8: true,\r\n      Header: [\"fp018\", \"DOB\"],\r\n      Cell: ({ row }) => <div>{row.original.dobAge}</div>,\r\n      disableGroupBy: true,\r\n      aggregate: \"count\",\r\n      Aggregated: ({}) => ``\r\n    },\r\n    {\r\n      Accessor: \"docNumber\",\r\n      Xl8: true,\r\n      Header: [\"fp019\", \"Doc Number\"],\r\n      disableGroupBy: true\r\n    },\r\n    {\r\n      Accessor: \"nationality\",\r\n      Xl8: true,\r\n      Header: [\"fp020\", \"Nationality\"],\r\n      disableGroupBy: true\r\n    },\r\n    { Accessor: \"coTravellerId\", Xl8: true, Header: [\"fp021\", \"PNR Record Loc.\"] }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    flightPassengers.get(props.id).then(res => {\r\n      if (!hasData(res)) {\r\n        setAllData([]);\r\n        setHitData([]);\r\n        return;\r\n      }\r\n\r\n      let parsed = parseData(res);\r\n\r\n      const parsedHits = parsed.filter(item => {\r\n        return hasAnyHits(item);\r\n      });\r\n\r\n      setAllData(parsed);\r\n      setHitData(parsedHits);\r\n      setKey(1);\r\n    });\r\n  }, [props.id]);\r\n\r\n  useEffect(() => {\r\n    if (tab === \"hits\") setData(hitData);\r\n    else setData(allData);\r\n\r\n    const newkey = key + 1;\r\n    setKey(newkey);\r\n  }, [hitData, tab]);\r\n\r\n  const tabs = (\r\n    <Tabs defaultActiveKey=\"all\" id=\"flightPaxTabs\">\r\n      <Tab\r\n        eventKey=\"all\"\r\n        title={\r\n          <Xl8 xid=\"fp001\" id=\"flightPaxTabs-tab-all\">\r\n            All\r\n          </Xl8>\r\n        }\r\n      ></Tab>\r\n      <Tab\r\n        eventKey=\"hits\"\r\n        title={\r\n          <Xl8 xid=\"fp002\" id=\"flightPaxTabs-tab-hits\">\r\n            Hits\r\n          </Xl8>\r\n        }\r\n      ></Tab>\r\n    </Tabs>\r\n  );\r\n\r\n  const titleTabCallback = ev => {\r\n    const id = ev.split(\"-\")[2];\r\n\r\n    setTab(id);\r\n  };\r\n\r\n  const getFlightData = () => {\r\n    return {\r\n      flightNumber: flightData.fullFlightNumber,\r\n      carrier: \"\",\r\n      flightDestination: flightData.destination || flightData.flightDestination,\r\n      flightOrigin: flightData.origin || flightData.flightOrigin,\r\n      eta: flightData.eta,\r\n      etd: flightData.etd\r\n    };\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SidenavContainer>\r\n        <br />\r\n        <FlightBadge data={getFlightData()}></FlightBadge>\r\n        <Col className=\"notopmargin\">\r\n          <div className=\"filterform-container form\">\r\n            <div className=\"flightpax-countdown-container\">\r\n              <CountdownBadge\r\n                future={flightData.direction === \"O\" ? flightData.etd : flightData.eta}\r\n                baseline={Date.now()}\r\n                direction={flightData.direction}\r\n              ></CountdownBadge>\r\n            </div>\r\n            <br />\r\n            {/* { label: <Xl8 xid=\"pd008\">First Name</Xl8>, value: res.firstName },\r\n      { label: <Xl8 xid=\"pd009\">Middle Name</Xl8>, value: res.middleName }, */}\r\n\r\n            <table class=\"table table-sm table-borderless\">\r\n              <tbody>\r\n                <tr class=\"flightpax-row\">\r\n                  <td class=\"left\">\r\n                    <Xl8 xid=\"fp006\">Direction:</Xl8>\r\n                  </td>\r\n                  <td class=\"right\">{flightData.direction}</td>\r\n                </tr>\r\n                <tr class=\"flightpax-row\">\r\n                  <td class=\"left\">\r\n                    <Xl8 xid=\"fp009\">Passengers:</Xl8>\r\n                  </td>\r\n                  <td class=\"right\">{flightData.passengerCount}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Col>\r\n      </SidenavContainer>\r\n      <Main>\r\n        <Title\r\n          title={<Xl8 xid=\"fp010\">Passengers</Xl8>}\r\n          leftChild={tabs}\r\n          leftCb={titleTabCallback}\r\n        ></Title>\r\n        <Table\r\n          key={key}\r\n          header={headers}\r\n          data={data}\r\n          id=\"Passengers\"\r\n          callback={cb}\r\n          disableGroupBy={false}\r\n          enableColumnFilter={true}\r\n        ></Table>\r\n      </Main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FlightPax;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\manageUsers\\ManageUsers.js",["638","639"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, DropdownButton, Dropdown } from \"react-bootstrap\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport Main from \"../../../components/main/Main\";\r\nimport { users } from \"../../../services/serviceWrapper\";\r\nimport Title from \"../../../components/title/Title\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport { asArray } from \"../../../utils/utils\";\r\nimport { ACTION } from \"../../../utils/constants\";\r\n\r\nimport \"./ManageUsers.scss\";\r\nimport UserModal from \"./UserModal\";\r\nimport Confirm from \"../../../components/confirmationModal/Confirm\";\r\nimport ChangePasswordModal from \"./changePasswordModal/ChangePasswordModal\";\r\nimport Toast from \"../../../components/toast/Toast\";\r\nimport { UserContext } from \"../../../context/user/UserContext\";\r\nimport { Fab } from \"react-tiny-fab\";\r\nimport \"react-tiny-fab/dist/styles.css\";\r\n\r\nconst ManageUsers = props => {\r\n  const addNewUser = <Xl8 xid=\"manu007\">Add New User</Xl8>;\r\n  const [data, setData] = useState(undefined);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [refreshKey, setRefreshKey] = useState(1);\r\n  const [isEditModal, setIsEditModal] = useState(false);\r\n  const [modalTitle, setModalTitle] = useState(addNewUser);\r\n  const [editRowDetails, setEditRowDetails] = useState({});\r\n  const [showChangePasswordModal, setShowChangePasswordModal] = useState(false);\r\n  const [selectedUserId, setSelectedUserId] = useState();\r\n  const [showToast, setShowToast] = useState(false);\r\n\r\n  const PASSWORD_CHANGE_CONFIRMATION = (\r\n    <>\r\n      <Xl8 xid=\"manu018\"> You have changed a password for: </Xl8>\r\n      <span>{selectedUserId}</span>\r\n    </>\r\n  );\r\n  const PASSWORD_CHANGE_CONFIRMATION_HEADER = <Xl8 xid=\"manu019\">Change Password</Xl8>;\r\n\r\n  const { getUserState } = useContext(UserContext);\r\n\r\n  const isLoggedinUser = userId => {\r\n    const loggedinUser = getUserState();\r\n    return loggedinUser.userId === userId;\r\n  };\r\n  const cb = function(status = ACTION.CLOSE, result) {\r\n    if (status !== ACTION.CLOSE && status !== ACTION.CANCEL) fetchData();\r\n  };\r\n\r\n  const openEditModal = rowDetails => {\r\n    setIsEditModal(true);\r\n    setModalTitle(<Xl8 xid=\"manu001\">Edit User</Xl8>);\r\n    setEditRowDetails(rowDetails);\r\n    setShowModal(true);\r\n  };\r\n\r\n  const changePassword = userId => {\r\n    setSelectedUserId(userId);\r\n    setShowChangePasswordModal(true);\r\n  };\r\n\r\n  const changePasswordCallback = (status, res) => {\r\n    setShowChangePasswordModal(false);\r\n\r\n    if (status !== ACTION.CANCEL) {\r\n      setShowToast(true);\r\n    }\r\n  };\r\n\r\n  const deleteUser = rowDetails => {\r\n    users.del(rowDetails.userId).then(res => {\r\n      cb(ACTION.DELETE, res);\r\n    });\r\n  };\r\n\r\n  const setupAddModal = () => {\r\n    if (showModal) return setShowModal(false);\r\n\r\n    setShowModal(true);\r\n    setModalTitle(addNewUser);\r\n    setIsEditModal(false);\r\n    setEditRowDetails({});\r\n  };\r\n\r\n  const headers = [\r\n    {\r\n      Accessor: \"Edit\",\r\n      Xl8: true,\r\n      Header: [\"edit001\", \"Edit\"],\r\n      disableFilters: true,\r\n      disableSortBy: true,\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <div className=\"text-center edit-user\">\r\n            <DropdownButton\r\n              variant=\"outline-info\"\r\n              title={<Xl8 xid=\"manu002\">Choose Action</Xl8>}\r\n            >\r\n              <Dropdown.Item as=\"button\" onClick={() => openEditModal(row.original)}>\r\n                <Xl8 xid=\"manu001\">Edit User</Xl8>\r\n              </Dropdown.Item>\r\n              {!isLoggedinUser(row.original.userId) && (\r\n                <Dropdown.Item\r\n                  as=\"button\"\r\n                  onClick={() => changePassword(row.original.userId)}\r\n                >\r\n                  <Xl8 xid=\"manu003\">Change Password</Xl8>\r\n                </Dropdown.Item>\r\n              )}\r\n              <Confirm\r\n                header={<Xl8 xid=\"manu004\">Confirm User Deletion</Xl8>}\r\n                message={\r\n                  <span>\r\n                    <Xl8 xid=\"manu005\">Please click confirm to delete this user: </Xl8>{\" \"}\r\n                    {row.original.userId}\r\n                  </span>\r\n                }\r\n              >\r\n                {confirm =>\r\n                  !isLoggedinUser(row.original.userId) && (\r\n                    <Dropdown.Item\r\n                      as=\"button\"\r\n                      onClick={confirm(() => {\r\n                        deleteUser(row.original);\r\n                      })}\r\n                    >\r\n                      <Xl8 xid=\"manu006\">Delete User</Xl8>\r\n                    </Dropdown.Item>\r\n                  )\r\n                }\r\n              </Confirm>\r\n            </DropdownButton>\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      Accessor: \"active\",\r\n      Xl8: true,\r\n      Header: [\"manu011\", \"Active\"],\r\n      isBoolean: true,\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <div className=\"text-center\">\r\n            <i\r\n              className={`fa fa-lg ${\r\n                !!row.original.active ? \"fa-check-square text-success\" : \"\"\r\n              }`}\r\n            ></i>\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    { Accessor: \"userId\", Xl8: true, Header: [\"manu012\", \"User ID\"] },\r\n    { Accessor: \"firstName\", Xl8: true, Header: [\"manu013\", \"First Name\"] },\r\n    { Accessor: \"lastName\", Xl8: true, Header: [\"manu014\", \"Last Name\"] },\r\n    { Accessor: \"email\", Xl8: true, Header: [\"manu015\", \"Email\"] },\r\n    { Accessor: \"phoneNumber\", Xl8: true, Header: [\"manu016\", \"Phone Number\"] },\r\n    {\r\n      Accessor: \"emailEnabledInt\",\r\n      Xl8: true,\r\n      Header: [\"manu017\", \"User Email Notification\"],\r\n      isBoolean: true,\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <div className=\"text-center\">\r\n            <i\r\n              className={`fa fa-lg ${\r\n                !!row.original.emailEnabled ? \"fa-check-square text-success\" : \"\"\r\n              }`}\r\n            ></i>\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      Accessor: \"highPriorityEmailInt\",\r\n      Xl8: true,\r\n      Header: [\"manu017\", \"Automated Email Notification\"],\r\n      isBoolean: true,\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <div className=\"text-center\">\r\n            <i\r\n              className={`fa fa-lg ${\r\n                !!row.original.highPriorityEmail ? \"fa-check-square text-success\" : \"\"\r\n              }`}\r\n            ></i>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  ];\r\n\r\n  const button = (\r\n    <Button\r\n      variant=\"ternary\"\r\n      className=\"btn btn-info\"\r\n      name={props.name}\r\n      onClick={() => {}}\r\n    >\r\n      {addNewUser}\r\n    </Button>\r\n  );\r\n\r\n  const parseData = raw => {\r\n    return asArray(raw).map(row => {\r\n      // Table component workaround.\r\n      // For boolean fields, set false/null values to 0 and true to 1 so they sort as expected.\r\n      // We pass this to the table and build the headers using the Int fields in place of the original bool fields.\r\n      // Otherwise, weird things happen.\r\n      return {\r\n        emailEnabledInt: row.emailEnabled ? 1 : 0,\r\n        highPriorityEmailInt: row.highPriorityEmail ? 1 : 0,\r\n        activeInt: row.active ? 1 : 0,\r\n        ...row\r\n      };\r\n    });\r\n  };\r\n\r\n  const fetchData = () => {\r\n    users.get.getAllNonArchived().then(res => {\r\n      setData(parseData(res));\r\n      setRefreshKey(refreshKey + 1);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Main className=\"full bg-white\">\r\n        <Title title={<Xl8 xid=\"manu008\">Manage Users</Xl8>}></Title>\r\n        <Table\r\n          id=\"users\"\r\n          data={data}\r\n          callback={cb}\r\n          key={refreshKey}\r\n          header={headers}\r\n          enableColumnFilter={true}\r\n        ></Table>\r\n        <Fab\r\n          icon={<i className=\"fa fa-plus nospin\" />}\r\n          variant=\"info\"\r\n          onClick={setupAddModal}\r\n        ></Fab>\r\n\r\n        <UserModal\r\n          show={showModal}\r\n          callback={cb}\r\n          onHide={() => setShowModal(false)}\r\n          isEdit={isEditModal}\r\n          title={modalTitle}\r\n          editRowDetails={editRowDetails}\r\n          userIds={asArray(data).map(user => user.userId)}\r\n        />\r\n        <ChangePasswordModal\r\n          show={showChangePasswordModal}\r\n          onHide={() => setShowChangePasswordModal(false)}\r\n          userId={selectedUserId}\r\n          callback={changePasswordCallback}\r\n        />\r\n        <Toast\r\n          onClose={() => setShowToast(false)}\r\n          show={showToast}\r\n          header={PASSWORD_CHANGE_CONFIRMATION_HEADER}\r\n          body={PASSWORD_CHANGE_CONFIRMATION}\r\n          variant={\"success\"}\r\n          containerClass={\"toast-container\"}\r\n        />\r\n      </Main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ManageUsers;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\fileDownload\\FileDownload.js",["640","641","642"],"import React, { useEffect, useState } from \"react\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport { logfile } from \"../../../services/serviceWrapper\";\r\nimport Title from \"../../../components/title/Title\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport Main from \"../../../components/main/Main\";\r\nimport LabelledInput from \"../../../components/labelledInput/LabelledInput\";\r\nimport { asArray, hasData, localeDate } from \"../../../utils/utils\";\r\nimport \"./fileDownload.css\";\r\n\r\nconst FileDownload = ({ name }) => {\r\n  const [logTypes, setLogTypes] = useState([]);\r\n  const [data, setData] = useState([]);\r\n  const [selRefreshKey, setSelRefreshKey] = useState(0); //Should be safe as should only ever be updated once.\r\n  const [tblRefreshKey, setTblRefreshKey] = useState(2);\r\n  const [currentLogType, setCurrentLogType] = useState(\"\");\r\n  const cb = function(result) {};\r\n\r\n  const onLogTypeSelect = target => {\r\n    let logFileType = target.selectedOptions[0].value;\r\n    if (hasData(logFileType) && logFileType != \"\") {\r\n      getLogFilesList(logFileType);\r\n      setCurrentLogType(logFileType);\r\n    } else {\r\n      setData([]);\r\n      setTblRefreshKey(tblRefreshKey + 1);\r\n      setCurrentLogType(\"\");\r\n    }\r\n  };\r\n\r\n  const getLogFilesList = logFileType => {\r\n    logfile.get(undefined, logFileType).then(res => {\r\n      setData(res);\r\n      setTblRefreshKey(tblRefreshKey + 1);\r\n    });\r\n  };\r\n\r\n  //Get logtypes for dropdown selection\r\n  useEffect(() => {\r\n    if (logTypes.length === 0) {\r\n      logfile.get().then(res => {\r\n        setLogTypes(parseLogTypes(res));\r\n        setSelRefreshKey(selRefreshKey + 1);\r\n      });\r\n    }\r\n  }, []);\r\n  //Parse log types return into array of values for select\r\n  const parseLogTypes = res => {\r\n    if (res) {\r\n      return asArray(res).map(logType => {\r\n        return {\r\n          value: logType,\r\n          label: logType\r\n        };\r\n      });\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const downloadFile = rowDetails => {\r\n    logfile.download(currentLogType + \"/\" + rowDetails.fileName);\r\n  };\r\n\r\n  const headers = [\r\n    {\r\n      Accessor: \"Download\",\r\n      Xl8: true,\r\n      Header: [\"fdl002\", \"Download\"],\r\n      disableSortBy: true,\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <div className=\"icon-col\">\r\n            <i\r\n              className=\"fa fa-download table-icon\"\r\n              onClick={() => downloadFile(row.original)}\r\n            ></i>\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    { Accessor: \"fileName\", Xl8: true, Header: [\"fdl003\", \"File Name\"] },\r\n    { Accessor: \"size\", Xl8: true, Header: [\"fdl004\", \"Size\"] },\r\n    {\r\n      Accessor: \"createDate\",\r\n      Xl8: true,\r\n      Header: [\"fdl005\", \"Create Date\"],\r\n      Cell: ({ row }) => localeDate(row.original.createDate)\r\n    },\r\n    {\r\n      Accessor: \"lastModified\",\r\n      Xl8: true,\r\n      Header: [\"fdl006\", \"Last Modified\"],\r\n      Cell: ({ row }) => localeDate(row.original.lastModified)\r\n    }\r\n  ];\r\n\r\n  const fileTypeCtrl = (\r\n    <div className=\"filedownload-action-buttons\">\r\n      <LabelledInput\r\n        inputType=\"select\"\r\n        labelText={<Xl8 xid=\"fdl007\">Log Type</Xl8>}\r\n        inputStyle=\"file-type\"\r\n        name=\"severity\"\r\n        options={logTypes}\r\n        required={true}\r\n        alt=\"nothing\"\r\n        spacebetween\r\n        callback={onLogTypeSelect}\r\n        key={selRefreshKey}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Main className=\"full bg-white\">\r\n      <Title title={name} leftChild={fileTypeCtrl} style=\"stacker title\"></Title>\r\n      <div className=\"grid-container\">\r\n        <Table callback={cb} key={tblRefreshKey} data={data} header={headers}></Table>\r\n      </div>\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default FileDownload;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\errorLog\\ErrorLog.js",["643","644"],"import React, {useEffect, useState} from \"react\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport {errorlog} from \"../../../services/serviceWrapper\";\r\nimport Title from \"../../../components/title/Title\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport Main from \"../../../components/main/Main\";\r\nimport SidenavContainer from \"../../../components/sidenavContainer/SidenavContainer\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport LabelledInput from \"../../../components/labelledInput/LabelledInput\";\r\nimport FilterForm from \"../../../components/filterForm2/FilterForm\";\r\nimport {asArray, localeDate} from \"../../../utils/utils\";\r\n\r\nconst ErrorLog = ({ name }) => {\r\n  const cb = function(result) {};\r\n  const [data, setData] = useState();\r\n  const [refreshKey, setRefreshKey] = useState(1);\r\n  const [filterKey, setFilterKey] = useState(1);\r\n  const [errorCodes, setErrorCodes] = useState([]);\r\n  const selectAllCodes = \"Select All Codes\";\r\n  let startDate = new Date();\r\n  let endDate = new Date();\r\n  endDate.setDate(endDate.getDate() + 1);\r\n  startDate.setDate(startDate.getDate() - 1);\r\n  const initialParamState = () => {\r\n    return { startDate: startDate, endDate: endDate };\r\n  };\r\n\r\n  const headers = [\r\n    {\r\n      Accessor: \"errorId\",\r\n      Xl8: true,\r\n      Header: [\"el005\", \"Error Id\"]\r\n    },\r\n    {\r\n      Accessor: \"errorCode\",\r\n      Xl8: true,\r\n      Header: [\"el006\", \"Error Code\"]\r\n    },\r\n    {\r\n      Accessor: \"errorDescription\",\r\n      Xl8: true,\r\n      Header: [\"el007\", \"Error Description\"]\r\n    },\r\n    {\r\n      Accessor: \"timestamp\",\r\n      Xl8: true,\r\n      Header: [\"el008\", \"Error Timestamp\"],\r\n      Cell: ({ row }) => localeDate(row.original.timestamp)\r\n    }\r\n  ];\r\n  const preFetchCallback = params => {\r\n    let parsedParams = \"?\";\r\n    if (params) {\r\n      if (params.startDate) {\r\n        parsedParams += \"startDate=\" + params.startDate.toISOString();\r\n      }\r\n      if (params.endDate) {\r\n        parsedParams += \"&endDate=\" + params.endDate.toISOString();\r\n      }\r\n      if (params.errorCode != selectAllCodes) {\r\n        parsedParams += \"&code=\" + params.errorCode;\r\n      }\r\n    }\r\n\r\n    return parsedParams;\r\n  };\r\n\r\n  useEffect(() => {\r\n    errorlog.get.codes().then(res =>{\r\n      let codes = [{label:selectAllCodes, value:selectAllCodes}]; //Always top dummy value\r\n      codes = codes.concat(asArray(res).map(code => {\r\n        return {\r\n          label: code,\r\n          value: code,\r\n        };\r\n      }));\r\n      setErrorCodes(codes);\r\n      setFilterKey(filterKey+1);\r\n    });\r\n  }, []);\r\n\r\n  const setDataWrapper = res => {\r\n    setData(res);\r\n    setRefreshKey(refreshKey + 1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SidenavContainer>\r\n        <Col className=\"notopmargin\">\r\n          <FilterForm\r\n            service={errorlog.get.logs}\r\n            paramCallback={preFetchCallback}\r\n            callback={setDataWrapper}\r\n            getInitialState={initialParamState}\r\n            key={filterKey}\r\n          >\r\n            <LabelledInput\r\n                labelText={<Xl8 xid=\"el001\">Error Codes</Xl8>}\r\n                datafield=\"errorCode\"\r\n                inputType=\"select\"\r\n                name=\"errorCode\"\r\n                inputVal={selectAllCodes}\r\n                options={errorCodes}\r\n                required={true}\r\n                alt=\"nothing\"\r\n                callback={cb}\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              inputType=\"dateTime\"\r\n              inputVal={startDate}\r\n              labelText={<Xl8 xid=\"el003\">Start Date</Xl8>}\r\n              name=\"startDate\"\r\n              callback={cb}\r\n              required={true}\r\n              alt=\"Start Date\"\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              inputType=\"dateTime\"\r\n              inputVal={endDate}\r\n              labelText={<Xl8 xid=\"el004\">End Date</Xl8>}\r\n              name=\"endDate\"\r\n              callback={cb}\r\n              required={true}\r\n              alt=\"End Date\"\r\n            />\r\n          </FilterForm>\r\n        </Col>\r\n      </SidenavContainer>\r\n      <Main>\r\n        <Title title={name}></Title>\r\n\r\n        <Table\r\n          data={data}\r\n          id=\"errorLog\"\r\n          callback={cb}\r\n          header={headers}\r\n          key={refreshKey}\r\n        ></Table>\r\n      </Main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorLog;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\auditLog\\AuditLog.js",["645","646"],"import React, {useEffect, useState} from \"react\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport { auditlog } from \"../../../services/serviceWrapper\";\r\nimport Title from \"../../../components/title/Title\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport SidenavContainer from \"../../../components/sidenavContainer/SidenavContainer\";\r\nimport FilterForm from \"../../../components/filterForm2/FilterForm\";\r\nimport LabelledInput from \"../../../components/labelledInput/LabelledInput\";\r\nimport Main from \"../../../components/main/Main\";\r\nimport {asArray, localeDate} from \"../../../utils/utils\";\r\n\r\nconst AuditLog = ({ name }) => {\r\n  const cb = function(result) {};\r\n  const [data, setData] = useState();\r\n  const [refreshKey, setRefreshKey] = useState(1);\r\n  const [filterKey, setFilterKey] = useState(0);\r\n  const [auditActions, setAuditActions] = useState([]);\r\n  const selectAllActions = \"Select All Actions\";\r\n  let startDate = new Date();\r\n  let endDate = new Date();\r\n  endDate.setDate(endDate.getDate() + 1);\r\n  startDate.setDate(startDate.getDate() - 1);\r\n\r\n  const initialParamState = () => {\r\n    return {\r\n      startDate: startDate,\r\n      endDate: endDate\r\n    };\r\n  };\r\n\r\n   useEffect(() => {\r\n     auditlog.get.actions().then(res =>{\r\n       let acts = [{label:selectAllActions, value:selectAllActions}]; //Always top dummy value\r\n       acts = acts.concat(asArray(res).map(action => {\r\n         return {\r\n           label: action,\r\n           value: action,\r\n         };\r\n       }));\r\n       setAuditActions(acts);\r\n       setFilterKey(filterKey+1);\r\n     });\r\n   }, []);\r\n\r\n  const preFetchCallback = params => {\r\n    let parsedParams = \"?\";\r\n    if (params) {\r\n      if (params.startDate) {\r\n        parsedParams += \"startDate=\" + params.startDate.toISOString();\r\n      }\r\n      if (params.endDate) {\r\n        parsedParams += \"&endDate=\" + params.endDate.toISOString();\r\n      }\r\n      if (params.actionType != selectAllActions) {\r\n        parsedParams += \"&actionType=\" + params.actionType;\r\n      }\r\n      if (params.user) {\r\n        parsedParams += \"&user=\" + params.user;\r\n      }\r\n    }\r\n    return parsedParams;\r\n  };\r\n\r\n  const headers = [\r\n    {\r\n      Accessor: \"actionType\",\r\n      Xl8: true,\r\n      Header: [\"al005\", \"Action Type\"]\r\n    },\r\n    {\r\n      Accessor: \"status\",\r\n      Xl8: true,\r\n      Header: [\"al006\", \"Status\"]\r\n    },\r\n    {\r\n      Accessor: \"message\",\r\n      Xl8: true,\r\n      Header: [\"al007\", \"Message\"]\r\n    },\r\n    {\r\n      Accessor: \"user\",\r\n      Xl8: true,\r\n      Header: [\"al008\", \"User\"]\r\n    },\r\n    {\r\n      Accessor: \"timestamp\",\r\n      Xl8: true,\r\n      Header: [\"al009\", \"Timestamp\"],\r\n      Cell: ({ row }) => localeDate(row.original.timestampInMilli)\r\n    }\r\n  ];\r\n\r\n  const setDataWrapper = res => {\r\n    setData(res);\r\n    setRefreshKey(refreshKey + 1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SidenavContainer>\r\n        <Col className=\"notopmargin\">\r\n          <FilterForm\r\n            service={auditlog.get.logs}\r\n            paramCallback={preFetchCallback}\r\n            callback={setDataWrapper}\r\n            getInitialState={initialParamState}\r\n            key={filterKey}\r\n          >\r\n            <LabelledInput\r\n              labelText={<Xl8 xid=\"al001\">User</Xl8>}\r\n              datafield=\"user\"\r\n              name=\"user\"\r\n              inputType=\"text\"\r\n              callback={cb}\r\n              alt=\"User\"\r\n            />\r\n            <LabelledInput\r\n              labelText={<Xl8 xid=\"al002\">Actions</Xl8>}\r\n              datafield=\"actionType\"\r\n              inputType=\"select\"\r\n              name=\"actionType\"\r\n              inputVal={selectAllActions}\r\n              options={auditActions}\r\n              required={true}\r\n              alt=\"nothing\"\r\n              callback={cb}\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              inputType=\"dateTime\"\r\n              inputVal={startDate}\r\n              labelText={<Xl8 xid=\"al003\">Start Date</Xl8>}\r\n              name=\"startDate\"\r\n              callback={cb}\r\n              required={true}\r\n              alt=\"Start Date\"\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              inputType=\"dateTime\"\r\n              inputVal={endDate}\r\n              labelText={<Xl8 xid=\"al004\">End Date</Xl8>}\r\n              name=\"endDate\"\r\n              callback={cb}\r\n              required={true}\r\n              alt=\"End Date\"\r\n            />\r\n          </FilterForm>\r\n        </Col>\r\n      </SidenavContainer>\r\n      <Main>\r\n        <Title title={name}></Title>\r\n        <Table\r\n          data={data}\r\n          key={refreshKey}\r\n          id=\"Audit Log\"\r\n          callback={cb}\r\n          header={headers}\r\n        ></Table>\r\n      </Main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuditLog;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\pageUnauthorized\\PageUnauthorized.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\CodeEditor.js",["647"],"import React, { useState, useEffect } from \"react\";\r\nimport Title from \"../../../components/title/Title\";\r\nimport Main from \"../../../components/main/Main\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport { Tabs, Tab } from \"react-bootstrap\";\r\nimport { navigate } from \"@reach/router\";\r\nimport { getEndpoint } from \"../../../utils/utils\";\r\n\r\nimport \"./CodeEditor.css\";\r\n\r\nconst CodeEditor = props => {\r\n  const endpoint = getEndpoint(props.location?.pathname);\r\n  const startTab = endpoint === \"codeeditor\" ? \"country\" : endpoint;\r\n  const tabcontent = props.children.props.children;\r\n  const [tab, setTab] = useState(startTab);\r\n\r\n  function tabHandler(ev) {\r\n    const tabname = ev\r\n      .split(\"-\")\r\n      .pop()\r\n      .toLowerCase();\r\n\r\n    setTab(tabname);\r\n  }\r\n\r\n  useEffect(() => {\r\n    navigate(`/gtas/admin/codeeditor/${tab}`);\r\n  }, [tab]);\r\n\r\n  const headerTabs = (\r\n    <Tabs defaultActiveKey=\"country\" id=\"codeTabs\" className=\"gtas-tabs\">\r\n      <Tab\r\n        eventKey=\"country\"\r\n        title={\r\n          <Xl8 xid=\"app022\" id=\"codeTabs-tab-country\">\r\n            Country\r\n          </Xl8>\r\n        }\r\n      ></Tab>\r\n      <Tab\r\n        eventKey=\"airport\"\r\n        title={\r\n          <Xl8 xid=\"app023\" id=\"codeTabs-tab-airport\">\r\n            Airport\r\n          </Xl8>\r\n        }\r\n      ></Tab>\r\n      <Tab\r\n        eventKey=\"carrier\"\r\n        title={\r\n          <Xl8 xid=\"app024\" id=\"codeTabs-tab-carrier\">\r\n            Carrier\r\n          </Xl8>\r\n        }\r\n      ></Tab>\r\n      <Tab\r\n        eventKey=\"cctype\"\r\n        title={\r\n          <Xl8 xid=\"app035\" id=\"codeTabs-tab-cctype\">\r\n            Credit Card Type\r\n          </Xl8>\r\n        }\r\n      ></Tab>\r\n    </Tabs>\r\n  );\r\n\r\n  let tabMap = {};\r\n  tabcontent.forEach(function(tab) {\r\n    tabMap[tab.props.path] = tab.props.name;\r\n  });\r\n\r\n  return (\r\n    <Main className=\"full bg-white\">\r\n      <Title\r\n        title={<Xl8 xid=\"app020\">Code Editor</Xl8>}\r\n        leftChild={headerTabs}\r\n        leftCb={tabHandler}\r\n        style=\"stacker title\"\r\n      />\r\n      <div className=\"grid-container\">{props.children}</div>\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default CodeEditor;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\airport\\Airport.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\carrier\\Carrier.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\uploadAttachment\\UploadAttachment.js",["648","649","650","651"],"import React, { useEffect, useState } from \"react\";\r\nimport { attachment } from \"../../../services/serviceWrapper\";\r\nimport \"./UploadAttachment.scss\";\r\nimport Title from \"../../../components/title/Title\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport { Button, Dropdown, DropdownButton } from \"react-bootstrap\";\r\nimport Confirm from \"../../../components/confirmationModal/Confirm\";\r\nimport AttachmentModal from \"./AttachmentModal\";\r\nimport { ACTION } from \"../../../utils/constants\";\r\n\r\nconst UploadAttachment = props => {\r\n  const [selectedFiles] = useState(null);\r\n  const [filesForDisplay, setFilesForDisplay] = useState([]);\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [refreshDataKey, setRefreshDataKey] = useState(0);\r\n  const [data, setData] = useState([{}]);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const paxId = props.paxId;\r\n\r\n  const cb = (status, resp) => { //SLATE FOR REMOVAL -- DOES NOTHING AS PAX DETAIL CONTROLS CALLBACK FOR ATTACHMENT MODAL NOW\r\n    if (status !== ACTION.CLOSE && status !== ACTION.CANCEL)\r\n      setRefreshDataKey(refreshDataKey + 1);\r\n  };\r\n\r\n  const deleteAttachment = row => {\r\n    attachment.del(row.id).then(resp => {\r\n      setRefreshDataKey(refreshDataKey + 1);\r\n    });\r\n  };\r\n\r\n  const downloadAttachment = row => {\r\n    attachment.get.download(row.id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const listItems = [];\r\n    if (selectedFiles != null && typeof selectedFiles != \"undefined\") {\r\n      for (var x = 0; x < selectedFiles.length; x++) {\r\n        listItems.push(selectedFiles[x]);\r\n      }\r\n    }\r\n    setFilesForDisplay(listItems);\r\n  }, [selectedFiles]);\r\n\r\n  useEffect(() => {\r\n    attachment.get.getAllAttachmentsMeta(paxId).then(resp => {\r\n      setData(resp);\r\n      setTableKey(tableKey + 1);\r\n    });\r\n  }, [props.attachmentRefreshKey]);\r\n\r\n  const headers = [\r\n    {\r\n      Accessor: \"Actions\",\r\n      disableFilters: true,\r\n      disableSortBy: true,\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <div className=\"text-center edit-user\">\r\n            <DropdownButton\r\n              variant=\"outline-info\"\r\n              title={<Xl8 xid=\"manu002\">Choose Action</Xl8>}\r\n            >\r\n              <Confirm\r\n                header={<Xl8 xid=\"att01\">Confirm Attachment Deletion</Xl8>}\r\n                message={\r\n                  <div>\r\n                    <Xl8 xid=\"att02\">Please confirm attachment deletion for file:</Xl8>\r\n                    {row.original.filename}\r\n                  </div>\r\n                }\r\n              >\r\n                {confirm => (\r\n                  <Dropdown.Item\r\n                    as=\"button\"\r\n                    onClick={confirm(() => {\r\n                      deleteAttachment(row.original);\r\n                    })}\r\n                  >\r\n                    <Xl8 xid=\"att03\">Delete Attachment</Xl8>\r\n                  </Dropdown.Item>\r\n                )}\r\n              </Confirm>\r\n              <Dropdown.Item as=\"button\" onClick={() => downloadAttachment(row.original)}>\r\n                <Xl8 xid=\"att04\">Download File</Xl8>\r\n              </Dropdown.Item>\r\n            </DropdownButton>\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    { Accessor: \"filename\", Xl8: true, Header: [\"att005\", \"File Name\"] },\r\n    { Accessor: \"contentType\", Xl8: true, Header: [\"att006\", \"File Type\"] },\r\n    { Accessor: \"description\", Xl8: true, Header: [\"att007\", \"Description\"] }\r\n  ];\r\n\r\n  const button = (\r\n    <Button\r\n      variant=\"ternary\"\r\n      className=\"btn btn-outline-info\"\r\n      name=\"Add Attachment\"\r\n      onClick={() => {\r\n        setShowModal(true);\r\n      }}\r\n      required={props.required}\r\n      value={props.inputVal}\r\n      alt={props.alt}\r\n    >\r\n      <Xl8 xid=\"att008\">Add an Attachment</Xl8>\r\n      <AttachmentModal\r\n        show={showModal}\r\n        callback={cb}\r\n        onHide={() => setShowModal(false)}\r\n        title={<Xl8 xid=\"att010\">Upload Attachments</Xl8>}\r\n        paxId={paxId}\r\n      ></AttachmentModal>\r\n    </Button>\r\n  );\r\n\r\n  return (\r\n    <div className=\"one-column-grid-container\">\r\n      {/* <Title title={<Xl8 xid=\"att009\">Uploaded Attachments</Xl8>} rightChild={button} /> */}\r\n      <Table data={data} id=\"attachments\" header={headers} key={tableKey} callback={cb} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadAttachment;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\country\\Country.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\hitCats\\HitCats.js",["652","653","654"],"import React, { useState, useEffect } from \"react\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport { hitcats, users } from \"../../../services/serviceWrapper\";\r\nimport Title from \"../../../components/title/Title\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport Main from \"../../../components/main/Main\";\r\nimport { Button, Dropdown, DropdownButton } from \"react-bootstrap\";\r\nimport HitModal from \"./HitModal\";\r\nimport Confirm from \"../../../components/confirmationModal/Confirm\";\r\nimport { Fab } from \"react-tiny-fab\";\r\nimport \"react-tiny-fab/dist/styles.css\";\r\n\r\nconst HitCats = ({ name }) => {\r\n  const cb = function() {};\r\n  const addNewCat = <Xl8 xid=\"wlm001\">Add Category</Xl8>;\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [refreshKey, setRefreshKey] = useState(1);\r\n  const [isEditModal, setIsEditModal] = useState(false);\r\n  const [editRowDetails, setEditRowDetails] = useState();\r\n  const [modalTitle, setModalTitle] = useState(addNewCat);\r\n\r\n  const openEditModal = rowDetails => {\r\n    setIsEditModal(true);\r\n    setModalTitle(<Xl8 xid=\"wlm002\">Edit Category</Xl8>);\r\n    setEditRowDetails(rowDetails);\r\n    setShowModal(true);\r\n  };\r\n\r\n  const headers = [\r\n    {\r\n      Accessor: \"Edit\",\r\n      Xl8: true,\r\n      Header: [\"edit001\", \"Edit\"],\r\n      disableFilters: true,\r\n      disableSortBy: true,\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <div className=\"text-center edit-user\">\r\n            <DropdownButton\r\n              variant=\"outline-info\"\r\n              title={<Xl8 xid=\"manc002\">Choose Action</Xl8>}\r\n            >\r\n              <Dropdown.Item as=\"button\" onClick={() => openEditModal(row.original)}>\r\n                <Xl8 xid=\"wlc006\">Edit Category</Xl8>\r\n              </Dropdown.Item>\r\n              <Confirm\r\n                header={<Xl8 xid=\"manc004\">Confirm Category Deletion</Xl8>}\r\n                message={\r\n                  <span>\r\n                    <Xl8 xid=\"wlc007\">\r\n                      Please click confirm to delete a category with label:\r\n                    </Xl8>\r\n                    {row.original.label}\r\n                  </span>\r\n                }\r\n              >\r\n                {confirm => (\r\n                  <Dropdown.Item\r\n                    as=\"button\"\r\n                    onClick={confirm(() => {\r\n                      deleteCat(row.original);\r\n                    })}\r\n                  >\r\n                    <Xl8 xid=\"wlc008\">Delete Hit Category</Xl8>\r\n                  </Dropdown.Item>\r\n                )}\r\n              </Confirm>\r\n            </DropdownButton>\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      Accessor: \"label\",\r\n      Xl8: true,\r\n      Header: [\"wlc003\", \"Label\"]\r\n    },\r\n    {\r\n      Accessor: \"description\",\r\n      Xl8: true,\r\n      Header: [\"wlc004\", \"Description\"]\r\n    },\r\n    {\r\n      Accessor: \"severity\",\r\n      Xl8: true,\r\n      Header: [\"wlc005\", \"Severity\"]\r\n    }\r\n  ];\r\n  const refresh = () => {\r\n    setRefreshKey(refreshKey + 1);\r\n  };\r\n\r\n  const setupEditModal = () => {\r\n    setModalTitle(addNewCat);\r\n    setEditRowDetails({});\r\n    setIsEditModal(false);\r\n    setShowModal(!showModal);\r\n  };\r\n\r\n  const deleteCat = rowDetails => {\r\n    hitcats.del(rowDetails.id).then(res => {\r\n      setRefreshKey(refreshKey + 1);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Main className=\"full bg-white\">\r\n      <Title title={name}></Title>\r\n      <Table\r\n        service={hitcats.get}\r\n        key={refreshKey}\r\n        callback={cb}\r\n        header={headers}\r\n      ></Table>\r\n      <Fab\r\n        icon={<i className=\"fa fa-plus nospin\" />}\r\n        variant=\"info\"\r\n        onClick={setupEditModal}\r\n      ></Fab>\r\n\r\n      <HitModal\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        refresh={refresh}\r\n        callback={cb}\r\n        isEdit={isEditModal}\r\n        title={modalTitle}\r\n        editRowDetails={editRowDetails}\r\n      />\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default HitCats;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\creditcardtype\\CreditCardType.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\settings\\Settings.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\loaderStats\\LoaderStats.js",["655","656"],"import React, { useEffect, useState } from \"react\";\r\nimport LabelledInput from \"../../../components/labelledInput/LabelledInput\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport Main from \"../../../components/main/Main\";\r\nimport { loaderStats } from \"../../../services/serviceWrapper\";\r\nimport { Container, Col } from \"react-bootstrap\";\r\nimport Title from \"../../../components/title/Title\";\r\nimport { localeDate } from \"../../../utils/utils\";\r\n\r\nconst LoaderStats = ({ name }) => {\r\n  const onChange = function(result) {};\r\n  const cb = () => {};\r\n  const [key, setKey] = useState(0);\r\n\r\n  const parseData = function(res) {\r\n    const parsedData = {\r\n      ...res,\r\n      lastMessageAnalyzedByDrools: localeDate(res?.lastMessageAnalyzedByDrools),\r\n      lastMessageInSystem: localeDate(res?.lastMessageInSystem),\r\n      mostRecentRuleHit: localeDate(res?.mostRecentRuleHit)\r\n    };\r\n\r\n    return parsedData;\r\n  };\r\n\r\n  return (\r\n    <Main className=\"full\">\r\n      <Title title={<Xl8 xid=\"ls001\">Loader Statistics</Xl8>}></Title>\r\n      <br></br>\r\n      <Container>\r\n        <Col lg={{ span: 4, offset: 4 }}>\r\n          <Form\r\n            key={key}\r\n            getService={loaderStats.get}\r\n            title=\"\"\r\n            callback={cb}\r\n            action=\"refresh\"\r\n            submitText={<Xl8 xid=\"ls008\">Refresh</Xl8>}\r\n            parseData={parseData}\r\n          >\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"ls004\">Last message received:</Xl8>}\r\n              inputType=\"text\"\r\n              name=\"lastMessageInSystem\"\r\n              alt=\"Last message received\"\r\n              readOnly\r\n              callback={onChange}\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"ls002\">Last message analyzed:</Xl8>}\r\n              inputType=\"text\"\r\n              name=\"lastMessageAnalyzedByDrools\"\r\n              callback={onChange}\r\n              readOnly\r\n              alt=\"Last message analyzed\"\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"ls003\">Most recent rule hit (Partial excluded):</Xl8>}\r\n              inputType=\"text\"\r\n              name=\"mostRecentRuleHit\"\r\n              callback={onChange}\r\n              readOnly\r\n              alt=\"Most recent rule hit (Partial excluded) timestamp\"\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"ls005\">Passengers from past 500 messages:</Xl8>}\r\n              inputType=\"text\"\r\n              name=\"passengerCount\"\r\n              callback={onChange}\r\n              readOnly\r\n              alt=\"Passengers Count from past 500 messages\"\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"ls006\">Loading/Parsing errors past 500 messages:</Xl8>}\r\n              inputType=\"text\"\r\n              name=\"totalLoadingParsingErrors\"\r\n              callback={onChange}\r\n              readOnly\r\n              alt=\"Loading/Parsing errors past 500 messages\"\r\n            />\r\n\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"ls007\">Rule errors last 500 messages:</Xl8>}\r\n              inputType=\"text\"\r\n              name=\"totalRuleErros\"\r\n              callback={onChange}\r\n              readOnly\r\n              alt=\"Rule errors last 500 messages\"\r\n            />\r\n          </Form>\r\n        </Col>\r\n      </Container>\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default LoaderStats;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\noteCats\\NoteCats.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\lang\\LanguageEditor.js",["657","658","659","660"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { LiveEditContext } from \"../../context/translation/LiveEditContext\";\r\nimport Title from \"../../components/title/Title\";\r\nimport Table from \"../../components/table/Table\";\r\nimport Main from \"../../components/main/Main\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport LabelledInput from \"../../components/labelledInput/LabelledInput\";\r\nimport { translations } from \"../../services/serviceWrapper\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport \"./LanguageEditor.css\";\r\n\r\nconst LanguageEditor = () => {\r\n  const { getLiveEditState, action } = useContext(LiveEditContext);\r\n\r\n  const [isEdit, setIsEdit] = useState(0);\r\n  const [refresh, setRefresh] = useState(0);\r\n  const [data, setData] = useState();\r\n  const [t, i18n] = useTranslation();\r\n\r\n  const currentLanguage = window.navigator.language.split(\"-\")[0];\r\n\r\n  const cb = () => {};\r\n\r\n  const handleClick = ev => {\r\n    const actionText = ev.value ? \"edit\" : \"read\";\r\n\r\n    action({ type: actionText });\r\n    setIsEdit(ev.value);\r\n    setRefresh(refresh + 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (refresh > 0) window.location.reload();\r\n  }, [refresh]);\r\n\r\n  useEffect(() => {\r\n    const editstate = getLiveEditState();\r\n    setIsEdit(editstate.isEdit);\r\n\r\n    translations.get().then(res => {\r\n      setData(res);\r\n    });\r\n  }, []);\r\n\r\n  const header = [\r\n    {\r\n      Accessor: \"id\",\r\n      Xl8: true,\r\n      Header: [\"led003\", \"ID\"]\r\n    },\r\n    {\r\n      Accessor: \"code\",\r\n      Xl8: true,\r\n      Header: [\"led004\", \"Code\"]\r\n    },\r\n    {\r\n      Accessor: \"language\",\r\n      Xl8: true,\r\n      Header: [\"led005\", \"Language\"]\r\n    },\r\n    {\r\n      Accessor: \"translation\",\r\n      Xl8: true,\r\n      Header: [\"led006\", \"Translation\"]\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Main className=\"full bg-white\" key={isEdit}>\r\n      <Title\r\n        title={<Xl8 xid=\"led001\">Language Editor</Xl8>}\r\n        rightChild={\r\n          <div className=\"liveedit\">\r\n            <LabelledInput\r\n              inputType=\"checkbox\"\r\n              labelText={<Xl8 xid=\"led002\">Live Edit</Xl8>}\r\n              selected={isEdit}\r\n              spacebetween\r\n              callback={handleClick}\r\n            ></LabelledInput>\r\n          </div>\r\n        }\r\n      ></Title>\r\n      <Table data={data} id=\"Queries\" callback={cb} key={data} header={header}></Table>\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default LanguageEditor;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\signUpRequests\\SignUpRequests.js",["661"],"import React, { useState } from \"react\";\r\nimport { Dropdown, DropdownButton, Button, Col } from \"react-bootstrap\";\r\nimport Title from \"../../../components/title/Title\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport { signuprequests } from \"../../../services/serviceWrapper\";\r\nimport SidenavContainer from \"../../../components/sidenavContainer/SidenavContainer\";\r\nimport Main from \"../../../components/main/Main\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport FilterForm from \"../../../components/filterForm2/FilterForm\";\r\nimport LabelledInput from \"../../../components/labelledInput/LabelledInput\";\r\nimport { hasData } from \"../../../utils/utils\";\r\nimport SignUpRequestModal from \"./SignUpRequestModal\";\r\nimport { ACTION, STATUS } from \"../../../utils/constants\";\r\nimport Toast from \"../../../components/toast/Toast\";\r\nimport Confirm from \"../../../components/confirmationModal/Confirm\";\r\n\r\nconst SignUpRequests = () => {\r\n  const [data, setData] = useState();\r\n  const [refreshKey, setRefreshKey] = useState(0);\r\n  const [fetchData, setFetchData] = useState(0);\r\n  const [showToast, setShowToast] = useState(false);\r\n  const [toastContent, setToastContent] = useState(\"\");\r\n  const [toastHeader, setToastHeader] = useState(\"\");\r\n  const [variant, setVariant] = useState(\"\");\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [requestId, setRequestId] = useState();\r\n  const cb = () => {};\r\n  const actions = { REJECT: \"Reject\", APPROVE: \"Approve\" };\r\n  const setDataWrapper = data => {\r\n    setData(data);\r\n    setRefreshKey(refreshKey + 1);\r\n  };\r\n\r\n  const handleResponse = (res, actionType) => {\r\n    const status = res.status;\r\n    const message = res.message;\r\n\r\n    if (status === STATUS.SUCCESS) {\r\n      setVariant(\"success\");\r\n    } else {\r\n      setVariant(\"danger\");\r\n    }\r\n    setToastContent(message);\r\n    setToastHeader(`${actionType} Sign up Request`);\r\n    setToastHeader(status);\r\n    setToastContent(message); //TODO: the front end should decide what message to dispaly\r\n    setShowModal(false);\r\n    setShowToast(true);\r\n    setFetchData(fetchData + 1);\r\n  };\r\n\r\n  const approve = requestId => {\r\n    setRequestId(requestId);\r\n    setShowModal(true);\r\n  };\r\n\r\n  const postApproveCallback = (status, res) => {\r\n    if (status === ACTION.CANCEL) setShowModal(false);\r\n    else handleResponse(res, actions.APPROVE);\r\n  };\r\n\r\n  const reject = requestId => {\r\n    signuprequests.reject(requestId).then(res => {\r\n      handleResponse(res, actions.REJECT);\r\n    });\r\n  };\r\n\r\n  const preFetchCallback = params => {\r\n    let parsedParams = \"?\";\r\n\r\n    if (hasData(params.username)) parsedParams += \"&username=\" + params.username;\r\n    if (hasData(params.location)) parsedParams += \"&location=\" + params.location;\r\n    if (hasData(params.status)) parsedParams += \"&status=\" + params.status;\r\n\r\n    return parsedParams.replace(\"?&\", \"?\");\r\n  };\r\n\r\n  const requestStatusOptions = [\r\n    {\r\n      value: \"NEW\",\r\n      label: \"New\"\r\n    },\r\n    {\r\n      value: \"APPROVED\",\r\n      label: \"Approved\"\r\n    },\r\n    {\r\n      value: \"REJECTED\",\r\n      label: \"Rejected\"\r\n    }\r\n  ];\r\n\r\n  const headers = [\r\n    {\r\n      Accessor: \"id\",\r\n      Xl8: true,\r\n      Header: [\"sur013\", \"Action\"],\r\n      disableSortBy: true,\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <div className=\"text-center edit-user\">\r\n            <DropdownButton\r\n              variant=\"outline-info\"\r\n              title={<Xl8 xid=\"manu002\">Choose Action</Xl8>}\r\n            >\r\n              <Dropdown.Item\r\n                as=\"button\"\r\n                onClick={() => approve(row.original.id)}\r\n                disabled={row.original.status !== \"NEW\"}\r\n              >\r\n                <Xl8 xid=\"sur001\">Approve</Xl8>\r\n              </Dropdown.Item>\r\n\r\n              <Confirm\r\n                header={<Xl8 xid=\"sur014\">Reject Sign up Request</Xl8>}\r\n                message={\r\n                  <span>\r\n                    <Xl8 xid=\"sur015\">\r\n                      Please click confirm to reject the sign up request by:\r\n                    </Xl8>\r\n                    <br />\r\n                    <br />\r\n                    {row.original.firstName} {row.original.lastName}\r\n                  </span>\r\n                }\r\n              >\r\n                {confirm => (\r\n                  <Dropdown.Item\r\n                    as=\"button\"\r\n                    onClick={confirm(() => reject(row.original.id))}\r\n                    disabled={row.original.status !== \"NEW\"}\r\n                  >\r\n                    <Xl8 xid=\"sur002\">Reject</Xl8>\r\n                  </Dropdown.Item>\r\n                )}\r\n              </Confirm>\r\n            </DropdownButton>\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n\r\n    { Accessor: \"username\", Xl8: true, Header: [\"sur008\", \"Username\"] },\r\n    { Accessor: \"firstName\", Xl8: true, Header: [\"sur009\", \"First Name\"] },\r\n    { Accessor: \"lastName\", Xl8: true, Header: [\"sur010\", \"Last Name\"] },\r\n    { Accessor: \"signupLocation\", Xl8: true, Header: [\"sur011\", \"Signup Location\"] },\r\n    { Accessor: \"status\", Xl8: true, Header: [\"sur012\", \"Status\"] }\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <SidenavContainer>\r\n        <Col className=\"notopmargin\">\r\n          <FilterForm\r\n            service={signuprequests.get}\r\n            paramCallback={preFetchCallback}\r\n            callback={setDataWrapper}\r\n            key={fetchData}\r\n          >\r\n            <LabelledInput\r\n              labelText={<Xl8 xid=\"sur003\">Username</Xl8>}\r\n              datafield\r\n              name=\"username\"\r\n              inputType=\"text\"\r\n              callback={cb}\r\n              alt=\"Username\"\r\n            />\r\n            <LabelledInput\r\n              labelText={<Xl8 xid=\"sur004\">Status</Xl8>}\r\n              datafield\r\n              name=\"status\"\r\n              inputType=\"select\"\r\n              inputVal=\"NEW\"\r\n              inputStyle=\"form-select\"\r\n              options={requestStatusOptions}\r\n              callback={cb}\r\n              alt=\"status\"\r\n            />\r\n            <LabelledInput\r\n              labelText={<Xl8 xid=\"sur005\">Location</Xl8>}\r\n              datafield\r\n              name=\"location\"\r\n              inputType=\"text\"\r\n              callback={cb}\r\n              alt=\"Location\"\r\n            />\r\n          </FilterForm>\r\n        </Col>\r\n      </SidenavContainer>\r\n      <Main>\r\n        <Title title={<Xl8 xid=\"sur006\">Sign Up Requests</Xl8>}></Title>\r\n\r\n        <Table\r\n          data={data}\r\n          header={headers}\r\n          id=\"SigUpRequest\"\r\n          callback={cb}\r\n          key={refreshKey}\r\n        ></Table>\r\n\r\n        <SignUpRequestModal\r\n          show={showModal}\r\n          onHide={() => setShowModal(false)}\r\n          callback={postApproveCallback}\r\n          requestId={requestId}\r\n        />\r\n        <Toast\r\n          onClose={() => setShowToast(false)}\r\n          show={showToast}\r\n          header={toastHeader}\r\n          body={toastContent}\r\n          variant={variant}\r\n        ></Toast>\r\n      </Main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignUpRequests;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\noteCats\\NoteModal.js",["662","663"],"import React, { useState } from \"react\";\r\nimport { Container, Alert, Button } from \"react-bootstrap\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport { notetypes } from \"../../../services/serviceWrapper\";\r\nimport LabelledInput from \"../../../components/labelledInput/LabelledInput\";\r\nimport { ACTION } from \"../../../utils/constants\";\r\nimport Modal, {\r\n  ModalBody,\r\n  ModalHeader,\r\n  ModalTitle\r\n} from \"../../../components/modal/Modal\";\r\n\r\nconst NoteModal = props => {\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [alertContent, setAlertContent] = useState(\"\");\r\n  const [variant, setVariant] = useState(\"\");\r\n  const row = props.editRowDetails || {};\r\n  const cb = function(result) {};\r\n\r\n  const postSubmit = (status, res) => {\r\n    props.onHide();\r\n\r\n    if (status !== ACTION.CANCEL) props.refresh();\r\n  };\r\n\r\n  const preSubmit = fields => {\r\n    let res = { ...fields[0] };\r\n    res.id = props.isEdit ? row.id : \"\";\r\n    return [res];\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      onHide={props.onHide}\r\n      size=\"md\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      className=\"max-500-width-container\"\r\n    >\r\n      <ModalHeader closeButton>\r\n        <ModalTitle>{props.title}</ModalTitle>\r\n      </ModalHeader>\r\n      <Alert show={showAlert} variant={variant}>\r\n        {alertContent}\r\n        <hr />\r\n        <Button onClick={() => setShowAlert(false)} variant=\"outline-success\">\r\n          <Xl8 xid=\"form002\">Confirm</Xl8>\r\n        </Button>\r\n      </Alert>\r\n      <ModalBody>\r\n        <Container fluid>\r\n          <Form\r\n            submitService={props.isEdit ? notetypes.put : notetypes.post}\r\n            title=\"\"\r\n            callback={postSubmit}\r\n            paramCallback={preSubmit}\r\n            action=\"add\"\r\n            cancellable\r\n            afterProcessed={props.onHide}\r\n          >\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"ntm003\">Category</Xl8>}\r\n              inputType=\"text\"\r\n              inputVal={row.noteType}\r\n              name=\"noteType\"\r\n              required={true}\r\n              alt=\"nothing\"\r\n              callback={cb}\r\n            />\r\n          </Form>\r\n        </Container>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default NoteModal;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\utils\\utils.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\signUpRequests\\SignUpRequestModal.js",["664"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport { roles, signuprequests } from \"../../../services/serviceWrapper\";\r\nimport LabelledInput from \"../../../components/labelledInput/LabelledInput\";\r\nimport { asArray } from \"../../../utils/utils\";\r\nimport { ROLE } from \"../../../utils/constants\";\r\nimport Title from \"../../../components/title/Title\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport Modal, {\r\n  ModalBody,\r\n  ModalHeader,\r\n  ModalTitle\r\n} from \"../../../components/modal/Modal\";\r\n\r\nfunction SignUpRequestModal(props) {\r\n  const [allRoles, setAllRoles] = useState([]);\r\n\r\n  const cb = () => {};\r\n\r\n  const preSubmit = fields => {\r\n    const requestId = fields[0];\r\n    const roles = asArray(fields[1].roles).filter(role => role.checked);\r\n    const res = { requestId: requestId, roles: roles };\r\n    return [res];\r\n  };\r\n\r\n  const fetchRoles = () => {\r\n    roles.get().then(roles => {\r\n      const transforemedRoles = asArray(roles).map(role => {\r\n        let isChecked = false;\r\n        let isDisabled = false;\r\n\r\n        if (role.roleDescription === ROLE.FLIGHTVWR) {\r\n          isChecked = true;\r\n          isDisabled = true;\r\n        }\r\n        return {\r\n          ...role,\r\n          label: role.roleDescription,\r\n          key: role.roleId,\r\n          type: \"checkbox\",\r\n          checked: isChecked,\r\n          disabled: isDisabled\r\n        };\r\n      });\r\n      setAllRoles(transforemedRoles);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchRoles();\r\n  }, []);\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      onHide={props.onHide}\r\n      size=\"md\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      className=\"max-500-width-container\"\r\n    >\r\n      <ModalHeader closeButton>\r\n        <ModalTitle>{<Xl8 xid=\"surm001\">Select Roles</Xl8>}</ModalTitle>\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Form\r\n          submitService={signuprequests.approve}\r\n          title=\"\"\r\n          callback={props.callback}\r\n          action=\"add\"\r\n          submitText={<Xl8 xid=\"surm002\">Approve</Xl8>}\r\n          paramCallback={preSubmit}\r\n          cancellable\r\n          recordId={props.requestId}\r\n        >\r\n          <div className=\"signup-checkbox\">\r\n            <LabelledInput\r\n              datafield\r\n              inputType=\"checkboxGroup\"\r\n              inputVal={allRoles}\r\n              labelText={<Xl8 xid=\"surm003\">Roles:</Xl8>}\r\n              name=\"roles\"\r\n              alt=\"Roles\"\r\n              callback={cb}\r\n            />\r\n          </div>\r\n        </Form>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nSignUpRequestModal.propTypes = {\r\n  requestId: PropTypes.string,\r\n  callback: PropTypes.func,\r\n  show: PropTypes.bool,\r\n  onHide: PropTypes.func\r\n};\r\n\r\nexport default SignUpRequestModal;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\settings\\settingModal.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\hitCats\\HitModal.js",["665","666"],"import React, { useState } from \"react\";\r\nimport { Button, Container, Alert } from \"react-bootstrap\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport { hitcatspost } from \"../../../services/serviceWrapper\";\r\nimport LabelledInput from \"../../../components/labelledInput/LabelledInput\";\r\nimport { ACTION } from \"../../../utils/constants\";\r\nimport Modal, {\r\n  ModalBody,\r\n  ModalHeader,\r\n  ModalTitle\r\n} from \"../../../components/modal/Modal\";\r\n\r\nconst HitModal = props => {\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [alertContent, setAlertContent] = useState(\"\");\r\n  const [variant, setVariant] = useState(\"\");\r\n  const row = props.editRowDetails || {};\r\n  const cb = function(result) {};\r\n  const severityLevels = [\r\n    { value: \"Top\", label: \"Top\" },\r\n    { value: \"High\", label: \"High\" },\r\n    { value: \"Normal\", label: \"Normal\" }\r\n  ];\r\n\r\n  const postSubmit = (status, res) => {\r\n    props.onHide();\r\n\r\n    if (status !== ACTION.CANCEL) props.refresh();\r\n  };\r\n\r\n  const preSubmit = fields => {\r\n    let res = { ...fields[0] };\r\n    res.id = props.isEdit ? row.id : \"\";\r\n    return [res];\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      onHide={props.onHide}\r\n      size=\"md\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      className=\"max-500-width-container\"\r\n    >\r\n      <ModalHeader closeButton>\r\n        <ModalTitle>{props.title}</ModalTitle>\r\n      </ModalHeader>\r\n      <Alert show={showAlert} variant={variant}>\r\n        {alertContent}\r\n        <hr />\r\n        <Button onClick={() => setShowAlert(false)} variant=\"outline-success\">\r\n          <Xl8 xid=\"form003\">Confirm</Xl8>\r\n        </Button>\r\n      </Alert>\r\n      <ModalBody>\r\n        <Container fluid>\r\n          <Form\r\n            submitService={props.isEdit ? hitcatspost.put : hitcatspost.post}\r\n            callback={postSubmit}\r\n            paramCallback={preSubmit}\r\n            action=\"add\"\r\n            cancellable\r\n            afterProcessed={props.onHide}\r\n          >\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"wlm003\">Name:</Xl8>}\r\n              inputType=\"text\"\r\n              inputVal={row.label}\r\n              name=\"label\"\r\n              required={true}\r\n              alt=\"nothing\"\r\n              callback={cb}\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"wlm004\">Description:</Xl8>}\r\n              inputType=\"textarea\"\r\n              inputVal={row.description}\r\n              name=\"description\"\r\n              required={true}\r\n              alt=\"nothing\"\r\n              callback={cb}\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"wlm005\">Severity Level:</Xl8>}\r\n              inputType=\"select\"\r\n              name=\"severity\"\r\n              inputVal={props.isEdit ? row.severity : severityLevels[0].value}\r\n              options={severityLevels}\r\n              required={true}\r\n              alt=\"nothing\"\r\n              callback={cb}\r\n            />\r\n          </Form>\r\n        </Container>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default HitModal;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\creditcardtype\\CreditCardTypeModal.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\country\\CountryModal.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\uploadAttachment\\AttachmentModal.js",["667"],"import React, { useEffect, useState } from \"react\";\r\nimport { Alert, Button } from \"react-bootstrap\";\r\nimport { attachment } from \"../../../services/serviceWrapper\";\r\nimport \"./UploadAttachment.scss\";\r\nimport LabelledInput from \"../../../components/labelledInput/LabelledInput\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport { ACTION } from \"../../../utils/constants\";\r\nimport Modal, {\r\n  ModalBody,\r\n  ModalHeader,\r\n  ModalTitle\r\n} from \"../../../components/modal/Modal\";\r\n\r\nconst AttachmentModal = props => {\r\n  const cb = function(result) {};\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const [filesForDisplay, setFilesForDisplay] = useState([]);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [alertContent, setAlertContent] = useState(\"\");\r\n  const [variant, setVariant] = useState(\"\");\r\n  const paxId = props.paxId;\r\n\r\n  const handleClose = (status, res) => {\r\n    setShowModal(false);\r\n    setShowAlert(false);\r\n    setSelectedFiles([]);\r\n    // props.onHide();\r\n    props.callback(status, res);\r\n  };\r\n  const handleShow = () => setShowModal(true);\r\n\r\n  const postSubmit = (status, resp) => {\r\n    if (status === ACTION.CANCEL) {\r\n      handleClose();\r\n    } else {\r\n      if (resp.status === \"SUCCESS\") {\r\n        handleClose(status, resp);\r\n      } else {\r\n        setVariant(\"danger\");\r\n        typeof resp.message != \"undefined\" && resp.message != null\r\n          ? setAlertContent(resp.message)\r\n          : setAlertContent(\"There was an issue with the server for that request.\");\r\n        setShowAlert(true);\r\n        setSelectedFiles([]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onChangeCb = ev => {\r\n    if (maxFileSelect(ev) && maxFileSize) {\r\n      setSelectedFiles(ev.target.files);\r\n    }\r\n  };\r\n\r\n  const maxFileSelect = ev => {\r\n    let files = ev.target.files; // create file object\r\n    if (files.length > 4) {\r\n      const msg = \"Only 4 files may be uploaded at a time\";\r\n      ev.target.value = null; // discard selected file\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const maxFileSize = ev => {\r\n    let files = ev.target.files;\r\n    let size = 15000;\r\n    let err = \"\";\r\n    for (var x = 0; x < files.length; x++) {\r\n      if (files[x].size > size) {\r\n        err += files[x].type + \" exceeds file size limit \\n\";\r\n      }\r\n    }\r\n    if (err !== \"\") {\r\n      ev.target.value = null;\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const preSubmit = fields => {\r\n    let res = { ...fields[0] };\r\n    if (typeof selectedFiles != \"undefined\" && selectedFiles != null) {\r\n      let desc = [];\r\n      const formData = new FormData();\r\n      for (let x = 0; x < selectedFiles.length; x++) {\r\n        formData.append(\"file\", selectedFiles[x]);\r\n        desc.push(res.description);\r\n      }\r\n      formData.append(\"descriptions\", desc);\r\n      formData.append(\"paxId\", paxId);\r\n      return [formData];\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const listItems = [];\r\n    if (selectedFiles != null && typeof selectedFiles != \"undefined\") {\r\n      for (let x = 0; x < selectedFiles.length; x++) {\r\n        listItems.push(selectedFiles[x]);\r\n      }\r\n    } else {\r\n      setFilesForDisplay(null);\r\n    }\r\n    setFilesForDisplay(listItems);\r\n  }, [selectedFiles]);\r\n\r\n  return (\r\n    <>\r\n      <div onClick={handleShow}>{props.children}</div>\r\n\r\n      <Modal\r\n        show={showModal}\r\n        onHide={handleClose}\r\n        size=\"md\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <ModalHeader closeButton>\r\n          <ModalTitle>\r\n            <Xl8 xid=\"attm001\">Attachments</Xl8>\r\n          </ModalTitle>\r\n        </ModalHeader>\r\n        <Alert show={showAlert} variant={variant}>\r\n          {alertContent}\r\n          <hr />\r\n          <Button onClick={() => setShowAlert(false)} variant=\"outline-success\">\r\n            <Xl8 xid=\"form003\">Confirm</Xl8>\r\n          </Button>\r\n        </Alert>\r\n        <ModalBody>\r\n          <div className=\"container\">\r\n            <div className=\"files\">\r\n              <input type=\"file\" multiple onChange={onChangeCb} />\r\n            </div>\r\n          </div>\r\n          {filesForDisplay != null &&\r\n          !filesForDisplay.empty &&\r\n          filesForDisplay.length > 0 ? (\r\n            <div className=\"container\">\r\n              <Xl8 xid=\"attm002\">Files To Be Uploaded:</Xl8>\r\n\r\n              <ul>\r\n                {filesForDisplay.map((data, index) => {\r\n                  return (\r\n                    <li key={index}>\r\n                      <u>\r\n                        <Xl8 xid=\"attm003\">File Name:</Xl8>\r\n                      </u>\r\n                      {data.name} <br></br>\r\n                      <u>\r\n                        <Xl8 xid=\"attm004\">File Size:</Xl8>\r\n                      </u>\r\n                      {data.size} kbs\r\n                    </li>\r\n                  );\r\n                })}\r\n              </ul>\r\n            </div>\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n          <Form\r\n            submitService={attachment.post}\r\n            title=\"\"\r\n            callback={postSubmit}\r\n            action=\"add\"\r\n            submitText={<Xl8 xid=\"attm005\">Upload</Xl8>}\r\n            paramCallback={preSubmit}\r\n            cancellable\r\n          >\r\n            <LabelledInput\r\n              datafield=\"description\"\r\n              inputType=\"textarea\"\r\n              labelText={<Xl8 xid=\"attm006\">Description:</Xl8>}\r\n              name=\"description\"\r\n              required={true}\r\n              alt=\"nothing\"\r\n              callback={cb}\r\n            />\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AttachmentModal;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\seatChart\\seat\\Seat.js",["668","669"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"./Seat.scss\";\r\nimport { hasData } from \"../../../utils/utils\";\r\nimport SeatInfoModal from \"./SeatInfoModal\";\r\n\r\nconst Seat = props => {\r\n  const reserved = hasData(props.seatInfo);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const selectedSeatClass = props.selected ? \"selected-seat\" : \"\";\r\n  const hasHitClass = props.seatInfo?.hasHits ? \"has-hit\" : \"\";\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        variant=\"light\"\r\n        size=\"sm\"\r\n        className={`seat ${selectedSeatClass} ${hasHitClass} ${props.className} `}\r\n        disabled={!reserved}\r\n        onClick={() => setShowModal(true)}\r\n      >\r\n        {props.seatNumber}\r\n      </Button>\r\n      <SeatInfoModal\r\n        seatInfo={props.seatInfo}\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n      />\r\n    </>\r\n  );\r\n};\r\nSeat.propTypes = {\r\n  seatNumber: PropTypes.string,\r\n  seatInfo: PropTypes.any,\r\n  currentPaxSeat: PropTypes.string,\r\n  selected: PropTypes.bool,\r\n  className: PropTypes.string\r\n};\r\nexport default Seat;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\seatChart\\seatChartCard\\SeatChartCard.js",["670"],"import { Link } from \"@reach/router\";\r\nimport React from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport LabelledInput from \"../../labelledInput/LabelledInput\";\r\n\r\nconst SeatChartCard = props => {\r\n  return (\r\n    <Container>\r\n      {props.data &&\r\n        props.data?.map(item => (\r\n          <Row>\r\n            <Col>\r\n              <b>{item.label}:</b>\r\n            </Col>\r\n            <Col>\r\n              <LabelledInput\r\n                alt=\"Flight Number\"\r\n                // inputStyle=\"big-name-sidebar\"\r\n                inputType=\"label\"\r\n                inputVal={item.value}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        ))}\r\n\r\n      <Row>{props.link}</Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SeatChartCard;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\services\\serviceWrapper.js",["671","672","673","674","675","676"],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\seatChart\\legend\\Legend.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\loading\\Loading.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\confirmationModal\\Confirm.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\confirmationModal\\ConfirmationModal.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\toast\\Toast.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\labelledInput\\LabelledInput.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\main\\Main.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\filterForm2\\FilterForm.js",["677","678","679","680","681","682","683"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport { asArray, hasData, getParamList } from \"../../utils/utils\";\r\nimport { Button, ButtonToolbar, Form as RBForm } from \"react-bootstrap\";\r\nimport Title from \"../../components/title/Title\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nimport \"./FilterForm.css\";\r\n\r\n/**\r\n * **Generic filter form used to fetch data for use in another component.**\r\n */\r\nconst FilterForm = props => {\r\n  const [formkey, setFormKey] = useState(0);\r\n  const [fetchkey, setFetchKey] = useState(0);\r\n  const [fields, setFields] = useState([]);\r\n  const [fieldMap, setFieldMap] = useState([]);\r\n  const [datafieldNames, setDatafieldNames] = useState([]);\r\n  // const [getSuccess, setGetSuccess] = useState(\"\");\r\n  const [kids, setKids] = useState([]);\r\n  const [params, setParams] = useState(\"\");\r\n  const [isPolling, setIsPolling] = useState(false);\r\n  const interval = props.interval || 0;\r\n  let latestParams = \"\";\r\n\r\n  const fetchData = (newParams, retainState = true) => {\r\n    if (fetchkey < 1) return;\r\n\r\n    const p = newParams || params;\r\n    const controller = new AbortController();\r\n    const signal = controller.signal;\r\n\r\n    const promise = props.service(p).then(res => {\r\n      props.callback(res, retainState);\r\n    });\r\n\r\n    promise.cancel = controller.abort;\r\n    return promise;\r\n  };\r\n\r\n  const { data } = useQuery(isPolling, fetchData, {\r\n    refetchInterval: interval,\r\n    manual: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (interval > 0) {\r\n      setIsPolling(true);\r\n    }\r\n    setFetchKey(fetchkey + 1);\r\n\r\n    return () => {\r\n      setIsPolling(false);\r\n    };\r\n  }, []);\r\n\r\n  const onChange = ev => {\r\n    const componentname = ev.name;\r\n    const value = ev.value;\r\n\r\n    let newfields = fields;\r\n    let datafieldname = fieldMap[componentname];\r\n    newfields[datafieldname] = value;\r\n\r\n    setFields(newfields);\r\n  };\r\n\r\n  const onReset = e => {\r\n    let fields = [];\r\n    const initialParamState = hasData(props.getInitialState)\r\n      ? props.getInitialState()\r\n      : {};\r\n\r\n    datafieldNames.forEach(function(name) {\r\n      fields[name] = initialParamState[name] || \"\";\r\n    });\r\n\r\n    setFields(fields);\r\n    setFetchKey(fetchkey + 1);\r\n    setFormKey(formkey + 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const newParams = calcParams();\r\n    fetchData(newParams, false);\r\n  }, [fetchkey]);\r\n\r\n  const onFormSubmit = e => {\r\n    if (e) e.preventDefault();\r\n    setFetchKey(fetchkey + 1);\r\n  };\r\n\r\n  const calcParams = () => {\r\n    const cb = props.paramCallback;\r\n    latestParams = getParamList(fields);\r\n\r\n    if (hasData(cb)) latestParams = cb(fields);\r\n\r\n    setParams(latestParams);\r\n\r\n    return latestParams;\r\n  };\r\n\r\n  // bind children containing form data (datafield prop) to the ev handler and state\r\n  const bindChildren = populatedFields => {\r\n    let boundChildren = asArray(props.children).map((child, idx) => {\r\n      if (!child.props?.datafield) return child;\r\n\r\n      let cleanprops = Object.assign({}, child.props);\r\n      // intercept the callback so FilterForm is notified of input field changes.\r\n      // Delete it here, and replace it in newchild (below) with a FilterForm handler.\r\n      // We can also forward the event on to the original callback or to a parent\r\n      // of FilterForm if needed.\r\n      delete cleanprops.callback;\r\n\r\n      return React.cloneElement(child, {\r\n        key: idx,\r\n        callback: onChange,\r\n        ...cleanprops\r\n      });\r\n    });\r\n\r\n    setKids(boundChildren);\r\n    setFields(populatedFields);\r\n    // setGetSuccess(hasData(populatedFields)); // do we still need this??\r\n  };\r\n\r\n  useEffect(() => {\r\n    bindChildren(fields);\r\n  }, [fields]);\r\n\r\n  useEffect(() => {\r\n    let dfnames = datafieldNames;\r\n    let fMap = fieldMap;\r\n\r\n    asArray(props.children).forEach((child, idx) => {\r\n      const datafield = child.props?.datafield;\r\n\r\n      if (datafield) {\r\n        const noname = `unnamedfield${idx}`;\r\n        const componentname = child.props.name || noname;\r\n        const fieldname = datafield === true ? componentname : datafield;\r\n        // Either the name or datafield prop must contain a string\r\n        if (fieldname === noname) {\r\n          throw new Error(`The child collection contains a \"datafield\" element whose name is not defined in the \r\n                \"name\" or \"datafield\" props. Remove the \"datafield\" prop or define a name for the element.`);\r\n        }\r\n\r\n        fMap[componentname] = fieldname;\r\n        fields[fMap[componentname]] = child.props.inputVal;\r\n\r\n        dfnames.push(fieldname);\r\n      }\r\n    });\r\n\r\n    bindChildren(fields);\r\n\r\n    setFieldMap(fMap);\r\n    setDatafieldNames(dfnames);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"filterform-container\">\r\n      {props.title && <Title style=\"subtitle text-center\" title={props.title}></Title>}\r\n      <RBForm\r\n        className={props.className}\r\n        onSubmit={onFormSubmit}\r\n        onReset={onReset}\r\n        key={formkey}\r\n      >\r\n        <ErrorBoundary message=\"FilterForm children could not be rendered\">\r\n          {kids}\r\n        </ErrorBoundary>\r\n        <br></br>\r\n        <ButtonToolbar className=\"container\">\r\n          <Button type=\"reset\" variant=\"dark m-1 text-white outline-dark-outline\">\r\n            {props.clearText || <Xl8 xid=\"ff001\">Reset</Xl8>}\r\n          </Button>\r\n          &nbsp;\r\n          <Button type=\"submit\" variant=\"primary m-1\">\r\n            {props.submitText || <Xl8 xid=\"ff002\">Search</Xl8>}\r\n          </Button>\r\n        </ButtonToolbar>\r\n      </RBForm>\r\n    </div>\r\n  );\r\n};\r\n\r\nFilterForm.propTypes = {\r\n  title: PropTypes.string,\r\n  submitText: PropTypes.string,\r\n  clearText: PropTypes.string,\r\n  service: PropTypes.func.isRequired,\r\n  id: PropTypes.string,\r\n  callback: PropTypes.func.isRequired,\r\n  paramCallback: PropTypes.func,\r\n  interval: PropTypes.number,\r\n  initialParamState: PropTypes.object\r\n};\r\n\r\nexport default FilterForm;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\sidenavContainer\\SidenavContainer.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\table\\Table.js",["684","685"],"import React, { useEffect, useState, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { hasData, titleCase, asArray, altObj } from \"../../utils/utils\";\r\nimport {\r\n  useTable,\r\n  usePagination,\r\n  useGroupBy,\r\n  useSortBy,\r\n  useExpanded,\r\n  useFilters\r\n} from \"react-table\";\r\nimport { navigate } from \"@reach/router\";\r\n// import { withTranslation } from 'react-i18next';\r\nimport Xl8 from \"../xl8/Xl8\";\r\nimport Loading from \"../../components/loading/Loading\";\r\nimport { Table as RBTable, Pagination, Button } from \"react-bootstrap\";\r\nimport { jsonToCSV } from \"react-papaparse\";\r\nimport { useExportData } from \"react-table-plugins\";\r\nimport \"./Table.css\";\r\n\r\n//Will auto-populate with data retrieved from the given uri\r\n//Attempts to format the header from the column names, but can be passed a header array instead.\r\n\r\nconst Table = props => {\r\n  // to show the spinner when data is loading (either from within Table or at the caller), we assume:\r\n  // props.data === undefined ==> data is pending\r\n  // props.data === []        ==> fetch is complete, data has no rows\r\n  // hasData(props.data)      ==> fetch is complete, data has rows\r\n\r\n  const [data, setData] = useState(props.data || undefined);\r\n  const [header, setHeader] = useState(props.header || []);\r\n  const [columns, setColumns] = useState([]);\r\n  const [rowcount, setRowcount] = useState(\"\");\r\n  const stateVals = props.hasOwnProperty(\"stateVals\") ? altObj(props.stateVals()) : {};\r\n  const [displayColumnFilter, setDisplayColumnFilter] = useState(false);\r\n  const [showPending, setShowPending] = useState(false);\r\n\r\n  useEffect(() => {\r\n    validateProps();\r\n\r\n    if (hasData(props.data)) parseData(props.data);\r\n    else if (hasData(props.service)) getData();\r\n    else parseData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    parseData(data);\r\n  }, [data]);\r\n\r\n  function ColumnFilter({ column: { filterValue, setFilter } }) {\r\n    return (\r\n      <input\r\n        className=\"table-filter-form\"\r\n        value={filterValue || \"\"}\r\n        onChange={e => {\r\n          setFilter(e.target.value || undefined);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  function BooleanFilter({ column: { filterValue, setFilter } }) {\r\n    return (\r\n      <select\r\n        className=\"table-filter-form\"\r\n        value={filterValue}\r\n        onChange={e => {\r\n          setFilter(e.target.value || undefined);\r\n        }}\r\n      >\r\n        <option value=\"\">All</option>\r\n        <option value={1}>True</option>\r\n        <option value={0}>False</option>\r\n      </select>\r\n    );\r\n  }\r\n\r\n  function getExportFileBlob({ columns, data, fileType, fileName }) {\r\n    if (fileType === \"csv\") {\r\n      const headerNames = columns.map(col => col.exportValue);\r\n      const csvString = jsonToCSV({ fields: headerNames, data });\r\n      return new Blob([csvString], { type: \"text/csv\" });\r\n    }\r\n  }\r\n\r\n  function getExportFileName({ fileType, all }) {\r\n    return `${all ? \"all-\" : \"\"}${props.exportFileName || \"data\"}`;\r\n  }\r\n\r\n  const RTable = ({ columns, data }) => {\r\n    const defaultColumn = React.useMemo(\r\n      () => ({\r\n        Filter: ColumnFilter\r\n      }),\r\n      []\r\n    );\r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      page,\r\n      prepareRow,\r\n      canPreviousPage,\r\n      canNextPage,\r\n      pageOptions,\r\n      pageCount,\r\n      gotoPage,\r\n      nextPage,\r\n      previousPage,\r\n      setPageSize,\r\n      exportData,\r\n      state: { pageIndex, pageSize, sortBy }\r\n    } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn,\r\n        initialState: {\r\n          pageIndex: stateVals.pageIndex || 0,\r\n          pageSize: stateVals.pageSize || 25,\r\n          sortBy: stateVals.sortBy || []\r\n        },\r\n        getExportFileBlob,\r\n        getExportFileName\r\n      },\r\n      useFilters,\r\n      useGroupBy,\r\n      useSortBy,\r\n      useExpanded,\r\n      usePagination,\r\n      useExportData\r\n    );\r\n\r\n    const sortIcon = column => {\r\n      if (hasData(props.stateCb))\r\n        props.stateCb({ pageSize: pageSize, pageIndex: pageIndex, sortBy: sortBy });\r\n\r\n      const icon = column.isSorted ? (\r\n        column.isSortedDesc ? (\r\n          <i className=\"fa fa-sort-down p-2\" />\r\n        ) : (\r\n          <i className=\"fa fa-sort-up p-2\" />\r\n        )\r\n      ) : (\r\n        <i className=\"fa fa-sort p-2\" />\r\n      );\r\n      return icon;\r\n    };\r\n    // const collator = new Intl.Collator(undefined, {\r\n    //   numeric: true,\r\n    //   sensitivity: 'base',\r\n    // });\r\n\r\n    // this is a hack. Need access to the record set displayed in outbound queries as it is sorted so we can scroll\r\n    // through it on the query detail page **in the same order**. Issue is that the react-table version that exposes the sorted\r\n    // recordset isn't working, so I have to mimmick the additional sorting by applying the current sort state to the data passed\r\n    // in from the DB. Works mostly, but sorts alphanumerics differently from react-table. Can apply Intl.Collator to correct this\r\n    // or just find the correct api to get the digested/sorted data directly from the react-table dep.\r\n    const getLinkData = () => {\r\n      let dt = data.slice();\r\n      let result = dt;\r\n\r\n      sortBy.forEach(sort => {\r\n        // result = dt.sort(sortValues(sort.id, sort.desc));\r\n      });\r\n\r\n      let ids = result.map(item => {\r\n        return [item.id];\r\n      });\r\n\r\n      return ids.filter(Boolean);\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <div className=\"table-main\">\r\n          {showPending && <Loading></Loading>}\r\n          <RBTable {...getTableProps()} striped bordered hover>\r\n            <thead>\r\n              {headerGroups.map((headerGroup, index) => {\r\n                return (\r\n                  <Fragment key={index}>\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                      {headerGroup.headers.map(column => {\r\n                        let hdr = column.render(\"Header\");\r\n\r\n                        if (Array.isArray(hdr)) hdr = <Xl8 xid={hdr[0]}>{hdr[1]}</Xl8>;\r\n\r\n                        return (\r\n                          <th className=\"table-header\">\r\n                            <span\r\n                              className=\"table-sort-span\"\r\n                              {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                            >\r\n                              {hdr} {column.canSort ? sortIcon(column) : \"\"}\r\n                              {props.hasOwnProperty(\"disableGroupBy\") &&\r\n                              !props.disableGroupBy &&\r\n                              column.canGroupBy ? (\r\n                                <span {...column.getGroupByToggleProps()}>\r\n                                  {props.disableGroupBy ? (\r\n                                    \"\"\r\n                                  ) : column.isGrouped ? (\r\n                                    <i className=\"fa fa-object-ungroup\"></i>\r\n                                  ) : (\r\n                                    <i class=\"fa fa-object-group\"></i>\r\n                                  )}\r\n                                </span>\r\n                              ) : (\r\n                                \"\"\r\n                              )}\r\n                            </span>\r\n                          </th>\r\n                        );\r\n                      })}\r\n                    </tr>\r\n                    {props.enableColumnFilter && displayColumnFilter ? (\r\n                      <tr>\r\n                        {headerGroup.headers.map(column => {\r\n                          return (\r\n                            <th className=\"table-header\" key={column.id}>\r\n                              <div>\r\n                                {column.canFilter ? column.render(\"Filter\") : null}\r\n                              </div>\r\n                            </th>\r\n                          );\r\n                        })}\r\n                      </tr>\r\n                    ) : null}\r\n                  </Fragment>\r\n                );\r\n              })}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n              {page.map((row, i) => {\r\n                prepareRow(row);\r\n                const isGroupBy = row.isGrouped;\r\n                const link = !isGroupBy ? row.original.link : \"\";\r\n                const sendRowToLink = !isGroupBy ? row.original.sendRowToLink : \"\";\r\n                const linked = link ? \"linked\" : \"\";\r\n                return (\r\n                  <tr {...row.getRowProps()} className={linked}>\r\n                    {row.cells.map(cell => {\r\n                      const style = cell.column.className || \"\";\r\n                      if (link) {\r\n                        return (\r\n                          <td\r\n                            className={` p-1 ${style}`}\r\n                            {...cell.getCellProps()}\r\n                            onClick={() =>\r\n                              navigate(link, {\r\n                                state: { data: getLinkData() }\r\n                              })\r\n                            }\r\n                          >\r\n                            {cell.render(\"Cell\")}\r\n                          </td>\r\n                        );\r\n                      } else if (sendRowToLink) {\r\n                        return (\r\n                          <td\r\n                            className={` p-1 ${style}`}\r\n                            {...cell.getCellProps()}\r\n                            onClick={() =>\r\n                              navigate(sendRowToLink, {\r\n                                state: { data: row.original }\r\n                              })\r\n                            }\r\n                          >\r\n                            {cell.render(\"Cell\")}\r\n                          </td>\r\n                        );\r\n                      } else if (isGroupBy) {\r\n                        return (\r\n                          <td>\r\n                            {cell.isGrouped ? (\r\n                              // If it's a grouped cell, add an expander and row count\r\n                              <>\r\n                                <span {...row.getToggleRowExpandedProps()}>\r\n                                  {row.isExpanded ? \"V\" : \">\"}\r\n                                </span>{\" \"}\r\n                                {cell.render(\"Cell\")} ({row.subRows.length})\r\n                              </>\r\n                            ) : cell.isAggregated ? (\r\n                              // If the cell is aggregated, use the Aggregated\r\n                              // renderer for cell\r\n                              cell.render(\"Aggregated\")\r\n                            ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\r\n                              // Otherwise, just render the regular cell\r\n                              cell.render(\"Cell\")\r\n                            )}\r\n                          </td>\r\n                        );\r\n                      }\r\n                      return (\r\n                        <td className={` p-1 ${style}`} {...cell.getCellProps()}>\r\n                          {cell.render(\"Cell\")}\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </RBTable>\r\n\r\n          <Pagination>\r\n            <Pagination.First onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n              <i className=\"fa fa-fast-backward\"></i>\r\n            </Pagination.First>\r\n            <Pagination.Prev onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n              <i className=\"fa fa-backward\"></i>\r\n            </Pagination.Prev>\r\n            <Pagination.Next onClick={() => nextPage()} disabled={!canNextPage}>\r\n              <i className=\"fa fa-forward\"></i>\r\n            </Pagination.Next>\r\n            <Pagination.Last\r\n              className=\"mr-10\"\r\n              onClick={() => gotoPage(pageCount - 1)}\r\n              disabled={!canNextPage}\r\n            >\r\n              <i className=\"fa fa-fast-forward\"></i>\r\n            </Pagination.Last>\r\n            <span className=\"pag-text mr-10\">\r\n              <Xl8 xid=\"tab002\">Page</Xl8>\r\n              <strong className=\"pag-num\">\r\n                {pageIndex + 1} <Xl8 xid=\"tab003\"> of </Xl8> {pageOptions.length}\r\n              </strong>{\" \"}\r\n            </span>\r\n            <select\r\n              className=\"pag\"\r\n              value={pageSize}\r\n              onChange={e => {\r\n                setPageSize(Number(e.target.value));\r\n              }}\r\n            >\r\n              {[10, 25, 50, 100].map(pageSize => (\r\n                <option key={pageSize} value={pageSize}>\r\n                  {pageSize}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <Button\r\n              className=\"export-btn\"\r\n              variant=\"light\"\r\n              size=\"sm\"\r\n              onClick={() => exportData(\"csv\", true)}\r\n            >\r\n              {<Xl8 xid=\"tab004\">Export</Xl8>}\r\n            </Button>\r\n            <span className=\"tagrightpag\">\r\n              <h3 className=\"title-default\">\r\n                <i>{rowcount}</i>\r\n              </h3>\r\n            </span>\r\n          </Pagination>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const validateProps = () => {\r\n    // Allow empty arrays for the data prop, only verify that its an array.\r\n    // Uri and service props are tested for truthy values.\r\n    if (!hasData(props.uri) && !Array.isArray(props.data) && !hasData(props.service)) {\r\n      // const err = new Error(\"Table requires a uri, service (func), or data prop\");\r\n      console.log(\"Table requires a uri, service (func), or data prop\");\r\n      // throw err;\r\n    }\r\n  };\r\n\r\n  const parseData = data => {\r\n    if (!data) {\r\n      setShowPending(true);\r\n      return;\r\n    }\r\n\r\n    setShowPending(false);\r\n    const noDataFound = \"No Data Found\";\r\n    const noDataFoundHeader = {\r\n      Accessor: \"NoData\",\r\n      Xl8: true,\r\n      Header: [\"nodata001\", \"No Data Found\"]\r\n    };\r\n\r\n    let noDataObj = [{}];\r\n    noDataObj[0][props.id] = noDataFound;\r\n\r\n    let dataArray = asArray(data);\r\n    const isPopulated = hasData(dataArray);\r\n    const sdata = isPopulated ? dataArray : noDataObj;\r\n    const sheader = isPopulated\r\n      ? hasData(header)\r\n        ? header\r\n        : Object.keys(dataArray[0])\r\n      : [noDataFoundHeader];\r\n    let columns = [];\r\n\r\n    (sheader || []).forEach(element => {\r\n      const acc = element.Accessor || element;\r\n      const isXl8 = element.Xl8 === true;\r\n\r\n      if (!(props.ignoredFields || []).includes(acc)) {\r\n        // Dont titlecase Xl8 headers. Casing must be done manually at the caller.\r\n        const title = isXl8 ? element.Header : titleCase(element.Header || acc);\r\n        let cellconfig = {\r\n          Header: title,\r\n          accessor: acc,\r\n          aggregate: element.aggregate,\r\n          Aggregated: element.Aggregated,\r\n          disableFilters: element.disableFilters,\r\n          disableSortBy: element.disableSortBy,\r\n          disableExport: element.disableExport,\r\n          disableGroupBy: element.disableGroupBy\r\n        };\r\n\r\n        if (element.Cell !== undefined) {\r\n          cellconfig.Cell = element.Cell;\r\n        }\r\n        if (element.isBoolean) {\r\n          cellconfig.Filter = BooleanFilter;\r\n        }\r\n\r\n        columns.push(cellconfig);\r\n      }\r\n    });\r\n    setDisplayColumnFilter(isPopulated);\r\n    setData(sdata);\r\n    setHeader(sheader);\r\n    setColumns(columns);\r\n\r\n    //exclude the No-Data-Found row from the count\r\n    if (dataArray.length === 1 && dataArray[0][props.id] === noDataFound) setRowcount(0);\r\n    else setRowcount(dataArray.length);\r\n  };\r\n\r\n  const getData = (params = null) => {\r\n    setShowPending(true);\r\n    if (!hasData(props.service)) {\r\n      parseData();\r\n      return;\r\n    }\r\n    props\r\n      .service(params)\r\n      .then(response => {\r\n        parseData(response);\r\n        setShowPending(false);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        parseData([]);\r\n        setShowPending(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {props.title !== undefined && (\r\n        <h4 className={`title ${props.style}`}>{props.title}</h4>\r\n      )}\r\n      {props.smalltext !== undefined && <small>{props.smalltext}</small>}\r\n      <RTable\r\n        columns={columns}\r\n        data={data}\r\n        rowcount={rowcount}\r\n        initSort={props.initSort || []}\r\n      ></RTable>\r\n    </>\r\n  );\r\n};\r\n\r\nTable.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  callback: PropTypes.func.isRequired,\r\n  service: PropTypes.func,\r\n  uri: PropTypes.string,\r\n  data: PropTypes.array,\r\n  header: PropTypes.array,\r\n  title: PropTypes.string,\r\n  smalltext: PropTypes.string,\r\n  style: PropTypes.string,\r\n  stateCb: PropTypes.func,\r\n  stateVals: PropTypes.func,\r\n  ignoredFields: PropTypes.arrayOf(PropTypes.string),\r\n  enableColumnFilter: PropTypes.bool,\r\n  exportFileName: PropTypes.string\r\n};\r\n\r\nexport default Table;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\title\\Title.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\form\\Form.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\watchlist\\constants.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\carrier\\CarrierModal.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\codeEditor\\airport\\AirportModal.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\manageUsers\\UserModal.js",["686"],"import React, { useEffect, useState, useContext, useRef } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport { users, roles } from \"../../../services/serviceWrapper\";\r\nimport LabelledInput from \"../../../components/labelledInput/LabelledInput\";\r\nimport { UserContext } from \"../../../context/user/UserContext\";\r\nimport { asArray, hasData, isValidPassword } from \"../../../utils/utils\";\r\nimport { ACTION, ROLE } from \"../../../utils/constants\";\r\nimport \"./ManageUsers.scss\";\r\nimport Toast from \"../../../components/toast/Toast\";\r\nimport Modal, {\r\n  ModalBody,\r\n  ModalHeader,\r\n  ModalTitle\r\n} from \"../../../components/modal/Modal\";\r\n\r\nconst UserModal = props => {\r\n  const [allRoles, setAllRoles] = useState([]);\r\n  const { getUserState } = useContext(UserContext);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [alertContent, setAlertContent] = useState(\"\");\r\n\r\n  const cb = function(result) {};\r\n  const row = props.editRowDetails || {};\r\n  const loggedinUser = getUserState();\r\n\r\n  const isLoggedinUser = userId => {\r\n    return loggedinUser.userId === userId;\r\n  };\r\n  const loggedinUserHasAdminRole = () => {\r\n    const roles = loggedinUser.userRoles;\r\n    return roles.includes(ROLE.ADMIN);\r\n  };\r\n\r\n  const isRoleDisabled = role => {\r\n    return (\r\n      role.roleDescription === ROLE.FLIGHTVWR ||\r\n      (props.isEdit && isLoggedinUser(row.userId) && loggedinUserHasAdminRole())\r\n    );\r\n  };\r\n\r\n  const compareRoles = (role1, role2) => {\r\n    const roleDescription1 = role1.roleDescription?.toUpperCase();\r\n    const roleDescription2 = role2.roleDescription?.toUpperCase();\r\n    if (roleDescription1 < roleDescription2) return -1;\r\n    if (roleDescription1 > roleDescription2) return 1;\r\n\r\n    return 0;\r\n  };\r\n\r\n  const roleOptions = asArray(allRoles)\r\n    .sort(compareRoles)\r\n    .map(role => {\r\n      return {\r\n        label: role.roleDescription,\r\n        value: role.roleId,\r\n        disabled: isRoleDisabled(role)\r\n      };\r\n    });\r\n\r\n  const defaultRole = [{ label: ROLE.FLIGHTVWR, value: 9, disabled: true }];\r\n  const existingRoles = asArray(props.editRowDetails.roles).map(role => {\r\n    return {\r\n      label: role.roleDescription,\r\n      value: role.roleId,\r\n      disabled: isRoleDisabled(role)\r\n    };\r\n  });\r\n\r\n  const selectedRoles = hasData(existingRoles) ? existingRoles : defaultRole;\r\n\r\n  const postSubmit = (status, res) => {\r\n    if (status === ACTION.CANCEL) {\r\n      props.onHide();\r\n      setShowAlert(false);\r\n    } else if (res.status !== \"SUCCESS\") {\r\n      const message = res.message || (\r\n        <Xl8 xid=\"um03\">There was an issue with the server for that request.</Xl8>\r\n      );\r\n      setAlertContent(message);\r\n      setShowAlert(true);\r\n    } else {\r\n      setShowAlert(false);\r\n      props.onHide();\r\n      props.callback(status);\r\n    }\r\n  };\r\n\r\n  const preSubmit = fields => {\r\n    let res = { ...fields[0] };\r\n    //TODO selectedRoles is empty if no change occurs, which makes hard to apply default values\r\n    res.roles = asArray(res.roles).map(role => {\r\n      return { roleId: role.value, roleDescription: role.label };\r\n    });\r\n    res.password = props.isEdit ? null : res.password;\r\n    res.isCurrentlyLoggedInUser = isLoggedinUser(row.userId);\r\n    res.active = res.active ? 1 : 0;\r\n\r\n    return [res];\r\n  };\r\n\r\n  const validateInputs = fields => {\r\n    const existingUserIds = asArray(props.userIds);\r\n    let res = { ...fields[0] };\r\n    const INVALID_USER_ERROR = (\r\n      <Xl8 xid=\"um01\">\r\n        The user ID is already in the system. Please choose a different user ID.\r\n      </Xl8>\r\n    );\r\n    const INVALID_PASSWORD_ERROR = (\r\n      <Xl8 xid=\"um02\">\r\n        The password you entered does not satisfy the password criteria.\r\n      </Xl8>\r\n    );\r\n    let validPassword = true;\r\n    let validUserId = true;\r\n\r\n    if (!props.isEdit) {\r\n      validPassword = isValidPassword(res.password);\r\n      validUserId = !existingUserIds.includes(res.userId?.toUpperCase());\r\n    }\r\n    if (!validUserId) {\r\n      setAlertContent(INVALID_USER_ERROR);\r\n      setShowAlert(true);\r\n    } else if (!validPassword) {\r\n      setAlertContent(INVALID_PASSWORD_ERROR);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    return validPassword && validUserId;\r\n  };\r\n\r\n  const getPasswordInput = () => {\r\n    return props.isEdit ? (\r\n      <></>\r\n    ) : (\r\n      <LabelledInput\r\n        datafield\r\n        labelText={<Xl8 xid=\"um04\">Password</Xl8>}\r\n        inputType=\"password\"\r\n        name=\"password\"\r\n        required={true}\r\n        alt=\"nothing\"\r\n        callback={cb}\r\n        spacebetween\r\n      />\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    roles.get().then(res => {\r\n      setAllRoles(res);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      onHide={() => {\r\n        props.onHide();\r\n        setShowAlert(false);\r\n      }}\r\n      size=\"md\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      className=\"max-600-width-container\"\r\n    >\r\n      <ModalHeader closeButton>\r\n        <ModalTitle>{props.title}</ModalTitle>\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Container fluid>\r\n          <Form\r\n            submitService={props.isEdit ? users.put : users.post}\r\n            title=\"\"\r\n            callback={postSubmit}\r\n            action=\"add\"\r\n            paramCallback={preSubmit}\r\n            cancellable\r\n            validateInputs={validateInputs}\r\n          >\r\n            {props.isEdit ? (\r\n              <LabelledInput\r\n                datafield\r\n                labelText={<Xl8 xid=\"um005\">User ID</Xl8>}\r\n                inputType=\"text\"\r\n                name=\"userId\"\r\n                required={true}\r\n                inputVal={row.userId}\r\n                alt=\"nothing\"\r\n                callback={cb}\r\n                readOnly={true}\r\n                spacebetween\r\n              ></LabelledInput>\r\n            ) : (\r\n              <LabelledInput\r\n                datafield\r\n                labelText={<Xl8 xid=\"um005\">User ID</Xl8>}\r\n                inputType=\"text\"\r\n                name=\"userId\"\r\n                required={true}\r\n                inputVal={row.userId}\r\n                alt=\"nothing\"\r\n                callback={cb}\r\n                spacebetween\r\n              />\r\n            )}\r\n\r\n            {getPasswordInput()}\r\n\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"um007\">First Name</Xl8>}\r\n              inputType=\"text\"\r\n              name=\"firstName\"\r\n              required={true}\r\n              inputVal={row.firstName}\r\n              alt=\"nothing\"\r\n              callback={cb}\r\n              spacebetween\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"um008\">Last Name</Xl8>}\r\n              inputType=\"text\"\r\n              name=\"lastName\"\r\n              required={true}\r\n              inputVal={row.lastName}\r\n              alt=\"nothing\"\r\n              callback={cb}\r\n              spacebetween\r\n            />\r\n\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"um009\">Email</Xl8>}\r\n              inputType=\"email\"\r\n              name=\"email\"\r\n              required={true}\r\n              inputVal={row.email}\r\n              alt=\"nothing\"\r\n              callback={cb}\r\n              spacebetween\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"um010\">Phone Number</Xl8>}\r\n              inputType=\"tel\"\r\n              name=\"phoneNumber\"\r\n              inputVal={row.phoneNumber}\r\n              alt=\"nothing\"\r\n              placeholder=\"optional\"\r\n              callback={cb}\r\n              spacebetween\r\n            />\r\n            <LabelledInput\r\n              name=\"roles\"\r\n              datafield=\"roles\"\r\n              labelText={<Xl8 xid=\"um015\">Roles</Xl8>}\r\n              inputType=\"multiSelect\"\r\n              inputVal={selectedRoles}\r\n              options={roleOptions}\r\n              callback={cb}\r\n              alt=\"Roles\"\r\n              spacebetween\r\n            />\r\n\r\n            <LabelledInput\r\n              datafield=\"emailEnabled\"\r\n              labelText={<Xl8 xid=\"um011\">Enable User Email Notification</Xl8>}\r\n              inputType=\"checkbox\"\r\n              name=\"emailEnabled\"\r\n              required={true}\r\n              alt=\"nothing\"\r\n              inputVal={row.emailEnabled}\r\n              callback={cb}\r\n              selected={row.emailEnabled}\r\n              spacebetween\r\n            />\r\n\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"um012\">Automated Email Notification</Xl8>}\r\n              inputType=\"checkbox\"\r\n              name=\"highPriorityEmail\"\r\n              required={true}\r\n              alt=\"nothing\"\r\n              inputVal={row.highPriorityEmail}\r\n              callback={cb}\r\n              selected={row.highPriorityEmail}\r\n              spacebetween\r\n            />\r\n            {props.isEdit ? (\r\n              <LabelledInput\r\n                datafield\r\n                labelText={<Xl8 xid=\"um013\">User Is Enabled</Xl8>}\r\n                inputType=\"checkbox\"\r\n                name=\"active\"\r\n                required={true}\r\n                alt=\"nothing\"\r\n                inputVal={!!row.active}\r\n                callback={cb}\r\n                selected={!!row.active}\r\n                readOnly={isLoggedinUser(row.userId)}\r\n                spacebetween\r\n              />\r\n            ) : (\r\n              <LabelledInput\r\n                datafield\r\n                labelText={<Xl8 xid=\"um014\">User Is Enabled</Xl8>}\r\n                inputType=\"checkbox\"\r\n                name=\"active\"\r\n                required={true}\r\n                alt=\"nothing\"\r\n                inputVal={true}\r\n                callback={cb}\r\n                selected={true}\r\n                spacebetween\r\n              />\r\n            )}\r\n          </Form>\r\n\r\n          <Toast\r\n            onClose={() => setShowAlert(false)}\r\n            show={showAlert}\r\n            header={<Xl8 xid=\"um016\">Add / Edit User</Xl8>}\r\n            body={alertContent}\r\n            variant={\"danger\"}\r\n          />\r\n        </Container>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default UserModal;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\watchlist\\WLModal.js",["687","688","689","690"],"import React, { useEffect, useState } from \"react\";\r\nimport { Container, Button } from \"react-bootstrap\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport LabelledInput from \"../../../components/labelledInput/LabelledInput\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\n\r\nimport { wlpax, wldocs } from \"../../../services/serviceWrapper\";\r\nimport { hasData, asArray, watchlistDateFormat } from \"../../../utils/utils\";\r\nimport { ACTION } from \"../../../utils/constants\";\r\nimport Modal, {\r\n  ModalBody,\r\n  ModalHeader,\r\n  ModalTitle\r\n} from \"../../../components/modal/Modal\";\r\nimport Confirm from \"../../../components/confirmationModal/Confirm\";\r\nimport \"./Watchlist.css\";\r\n\r\nconst WLModal = props => {\r\n  const TAB = { PAX: \"passenger\", DOX: \"document\" };\r\n  const type = (props.type || {}) === TAB.PAX ? TAB.PAX : TAB.DOX;\r\n  const id = props.id || 0;\r\n  const isEdit = id !== 0;\r\n  const mode = isEdit ? \"Edit\" : \"Add\";\r\n  const data = props.data;\r\n  const parsedData = hasData(data) ? { ...data, dob: new Date(data[\"dob\"]) } : data;\r\n  const title =\r\n    (type || {}) === TAB.DOX ? (\r\n      id === 0 ? (\r\n        <Xl8 xid=\"wlm001\"> Add Document</Xl8>\r\n      ) : (\r\n        <Xl8 xid=\"wlm002\"> Edit Document</Xl8>\r\n      )\r\n    ) : id === 0 ? (\r\n      <Xl8 xid=\"wlm003\"> Add Passenger</Xl8>\r\n    ) : (\r\n      <Xl8 xid=\"wlm004\"> Edit Passenger</Xl8>\r\n    );\r\n\r\n  const onFormChange = () => {};\r\n\r\n  // Form submitted or closed\r\n  const onFormExit = (action, ev) => {\r\n    //Currently the backend returns a success message or nothing.\r\n    //Form inserts a message with status = \"CANCELED\", so the page will receive either\r\n    // \"SUCCESS\", \"CANCELED\" or null. Need to standardize the return vals so we can pass\r\n    // the error back to the users in the alert/modal whatever.\r\n    // Here we will keep the modal form up if there's an error so the user can review the inputs.\r\n    const status = ev?.status;\r\n    if (hasData(status) || action === ACTION.CANCEL) props.onHide(status);\r\n  };\r\n\r\n  const categories = asArray(props.categories).map(item => {\r\n    return { label: item.label, value: item.id };\r\n  });\r\n\r\n  const docFields = (\r\n    <>\r\n      <LabelledInput\r\n        datafield\r\n        labelText={<Xl8 xid=\"wlm005\"> Document Type</Xl8>}\r\n        inputType=\"select\"\r\n        name=\"documentType\"\r\n        options={[\r\n          { value: \"P\", label: \"Passport\" },\r\n          { value: \"V\", label: \"Visa\" }\r\n        ]}\r\n        callback={onFormChange}\r\n        alt=\"Document Type\"\r\n        spacebetween\r\n      />\r\n      <LabelledInput\r\n        datafield\r\n        labelText={<Xl8 xid=\"wlm006\"> Document Number</Xl8>}\r\n        inputType=\"text\"\r\n        name=\"documentNumber\"\r\n        required={true}\r\n        alt=\"Document Number\"\r\n        callback={onFormChange}\r\n        spacebetween\r\n      />\r\n      <LabelledInput\r\n        datafield\r\n        labelText={<Xl8 xid=\"wlm007\"> Category ID</Xl8>}\r\n        inputType=\"select\"\r\n        options={categories}\r\n        name=\"categoryId\"\r\n        required={true}\r\n        alt=\"Category ID\"\r\n        callback={onFormChange}\r\n        spacebetween\r\n      />\r\n    </>\r\n  );\r\n\r\n  const paxFields = (\r\n    <>\r\n      <LabelledInput\r\n        datafield\r\n        labelText={<Xl8 xid=\"wlm008\"> First Name</Xl8>}\r\n        inputType=\"text\"\r\n        name=\"firstName\"\r\n        callback={onFormChange}\r\n        alt=\"First Name\"\r\n        spacebetween\r\n      />\r\n      <LabelledInput\r\n        datafield\r\n        labelText={<Xl8 xid=\"wlm009\"> Last Name</Xl8>}\r\n        inputType=\"text\"\r\n        name=\"lastName\"\r\n        callback={onFormChange}\r\n        alt=\"Last Name\"\r\n        spacebetween\r\n      />\r\n      <LabelledInput\r\n        datafield\r\n        labelText={<Xl8 xid=\"wlm010\"> Date of Birth</Xl8>}\r\n        inputType=\"dateTime\"\r\n        name=\"dob\"\r\n        required={true}\r\n        alt=\"Date of Birth\"\r\n        callback={onFormChange}\r\n        spacebetween\r\n        format=\"MM/dd/yyyy\"\r\n        disableCalendar={true}\r\n      />\r\n      <LabelledInput\r\n        datafield\r\n        labelText={<Xl8 xid=\"wlm007\"> Category ID</Xl8>}\r\n        inputType=\"select\"\r\n        options={categories}\r\n        name=\"categoryId\"\r\n        required={true}\r\n        alt=\"Category ID\"\r\n        callback={onFormChange}\r\n        spacebetween\r\n      />\r\n    </>\r\n  );\r\n\r\n  const fields = type === TAB.DOX ? docFields : paxFields;\r\n  const serviceType = type === TAB.DOX ? wldocs : wlpax;\r\n  const service = isEdit ? serviceType.put : serviceType.post;\r\n\r\n  const preSubmit = values => {\r\n    if (!hasData(values[0])) return [];\r\n\r\n    const vals = values[0];\r\n    const documentType = vals[\"documentType\"];\r\n    const documentNumber = vals[\"documentNumber\"];\r\n    const firstName = vals[\"firstName\"];\r\n    const lastName = vals[\"lastName\"];\r\n    const dob = watchlistDateFormat(vals[\"dob\"]);\r\n    const categoryId = vals[\"categoryId\"];\r\n    const action = isEdit ? \"Update\" : \"Create\";\r\n    const recordId = mode === \"Add\" ? \"null\" : id;\r\n\r\n    const result =\r\n      type === TAB.DOX\r\n        ? {\r\n            action: action,\r\n            id: recordId,\r\n            wlItems: [\r\n              {\r\n                documentType: documentType,\r\n                documentNumber: documentNumber,\r\n                categoryId: categoryId,\r\n                id: recordId\r\n              }\r\n            ]\r\n          }\r\n        : {\r\n            action: action,\r\n            id: recordId,\r\n            wlItems: [\r\n              {\r\n                firstName: firstName,\r\n                lastName: lastName,\r\n                dob: dob,\r\n                categoryId: categoryId,\r\n                id: recordId\r\n              }\r\n            ]\r\n          };\r\n\r\n    return [result];\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      onHide={props.onHide}\r\n      size=\"md\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      className=\"max-500-width-container\"\r\n    >\r\n      <ModalHeader closeButton>\r\n        <ModalTitle>{title}</ModalTitle>\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Container fluid className=\"wl-modal\">\r\n          <Form\r\n            submitService={service}\r\n            title=\"\"\r\n            callback={onFormExit}\r\n            action={mode.toLowerCase()}\r\n            paramCallback={preSubmit}\r\n            data={parsedData}\r\n            cancellable\r\n          >\r\n            {fields.props.children}\r\n          </Form>\r\n        </Container>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WLModal;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\queryrules\\QRModal.js",["691","692","693","694"],"import React, { useState, useEffect, useMemo, useContext } from \"react\";\r\nimport RAQB from \"../../../components/raqb/RAQB\";\r\nimport { Button, Container, Row } from \"react-bootstrap\";\r\nimport LabelledInput from \"../../../components/labelledInput/LabelledInput\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport { navigate } from \"@reach/router\";\r\nimport { hasData, asArray, localeDateOnly } from \"../../../utils/utils\";\r\nimport { QR, ACTION, CTX, ROLE } from \"../../../utils/constants\";\r\nimport { LookupContext } from \"../../../context/data/LookupContext\";\r\nimport RoleAuthenticator from \"../../../context/roleAuthenticator/RoleAuthenticator\";\r\nimport {\r\n  hitcats,\r\n  airportLookup,\r\n  countryLookup,\r\n  carrierLookup,\r\n  codeEditor\r\n} from \"../../../services/serviceWrapper\";\r\n\r\nimport { numProps, txtProps, dateProps } from \"../../../components/raqb/constants\";\r\nimport \"./QueryRules.css\";\r\nimport Modal, {\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalTitle\r\n} from \"../../../components/modal/Modal\";\r\n\r\nconst QRModal = props => {\r\n  const id = props.id;\r\n  const svc = props.service;\r\n  const mode = props.mode === QR.RULE ? QR.RULE : QR.QUERY;\r\n  const [data, setData] = useState(props.data?.query);\r\n  const [key, setKey] = useState(0);\r\n  const [summaryData, setSummaryData] = useState(\r\n    props.data || { startDate: localeDateOnly(Date.now()), enabled: true }\r\n  );\r\n\r\n  const [airports, setAirports] = useState([]);\r\n  const [countries, setCountries] = useState([]);\r\n  const [carriers, setCarriers] = useState([]);\r\n  const [ccTypes, setCcTypes] = useState([]);\r\n  const [dataConfig, setDataConfig] = useState([]);\r\n\r\n  const [title, setTitle] = useState(props.data?.title);\r\n  const [categories, setCategories] = useState([]);\r\n  const [query, setQuery] = useState(props.data?.query);\r\n  const [showInvalid, setShowInvalid] = useState(false);\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const isEdit = hasData(props.data);\r\n  const { getLookupState, lookupAction } = useContext(LookupContext);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      hasData(countries) &&\r\n      hasData(carriers) &&\r\n      hasData(airports) &&\r\n      hasData(ccTypes) &&\r\n      hasData(categories)\r\n    )\r\n      setLoaded(true);\r\n    else setLoaded(false);\r\n  }, [countries, carriers, airports, ccTypes, categories]);\r\n\r\n  const countryProps = useMemo(() => {\r\n    return {\r\n      type: \"select\",\r\n      fieldSettings: {\r\n        allowCustomValues: true,\r\n        listValues: countries\r\n      },\r\n      valueSources: [\"value\"]\r\n    };\r\n  }, [countries]);\r\n\r\n  const carrierProps = useMemo(() => {\r\n    return {\r\n      type: \"select\",\r\n      fieldSettings: {\r\n        allowCustomValues: true,\r\n        listValues: carriers\r\n      },\r\n      valueSources: [\"value\"]\r\n    };\r\n  }, [carriers]);\r\n  const airportProps = useMemo(() => {\r\n    return {\r\n      type: \"select\",\r\n      fieldSettings: {\r\n        allowCustomValues: true,\r\n        listValues: airports\r\n      },\r\n      valueSources: [\"value\"]\r\n    };\r\n  }, [airports]);\r\n  const ccTypeProps = useMemo(() => {\r\n    return {\r\n      type: \"select\",\r\n      fieldSettings: {\r\n        allowCustomValues: false,\r\n        listValues: ccTypes\r\n      },\r\n      valueSources: [\"value\"]\r\n    };\r\n  }, [ccTypes]);\r\n\r\n  const fieldConfigWithData = {\r\n    fields: {\r\n      Address: {\r\n        label: \"Address\",\r\n        type: \"!group\",\r\n        subfields: {\r\n          city: { label: \"City\", ...txtProps },\r\n          country: { label: \"Country\", ...countryProps },\r\n          line1: { label: \"Line 1\", ...txtProps },\r\n          line2: { label: \"Line 2\", ...txtProps },\r\n          line3: { label: \"Line 3\", ...txtProps },\r\n          postalCode: { label: \"Postal Code\", ...txtProps },\r\n          state: { label: \"State\", ...txtProps }\r\n        }\r\n      },\r\n      Bag: {\r\n        label: \"Bag\",\r\n        type: \"!group\",\r\n        subfields: {\r\n          airline: { label: \"Airline\", ...carrierProps },\r\n          \"bagMeasurements.bagCount\": { label: \"Bag Count\", ...numProps },\r\n          bagId: { label: \"Bag ID\", ...txtProps },\r\n          \"bagMeasurements.weight\": { label: \"Bag Weight (kg)\", ...numProps },\r\n          data_source: { label: \"Data Source\", ...txtProps },\r\n          destinationAirport: { label: \"Destination Airport\", ...airportProps },\r\n          country: { label: \"Destination Country\", ...countryProps },\r\n          primeFlight: {\r\n            label: \"Is Prime Flight\",\r\n            type: \"boolean\",\r\n            valueSources: [\"value\"]\r\n          },\r\n          headPool: {\r\n            label: \"Is Head Of a Baggage Pool\",\r\n            type: \"boolean\",\r\n            valueSources: [\"value\"]\r\n          }\r\n        }\r\n      },\r\n      CreditCard: {\r\n        label: \"Credit Card\",\r\n        type: \"!group\",\r\n        subfields: {\r\n          accountHolder: { label: \"Account Holder\", ...txtProps },\r\n          expiration: { label: \"Expiration Date\", ...dateProps },\r\n          number: { label: \"Number\", ...txtProps },\r\n          cardType: { label: \"Type\", ...ccTypeProps }\r\n        }\r\n      },\r\n      Document: {\r\n        label: \"Document\",\r\n        type: \"!group\",\r\n        subfields: {\r\n          documentNumber: { label: \"Number\", ...txtProps },\r\n          documentType: {\r\n            label: \"Type\",\r\n            type: \"select\",\r\n            fieldSettings: {\r\n              listValues: [\r\n                { value: \"P\", title: \"Passport\" },\r\n                { value: \"V\", title: \"Visa\" }\r\n              ]\r\n            },\r\n            valueSources: [\"value\"]\r\n          },\r\n          issuanceCountry: { label: \"Issuance Country\", ...countryProps },\r\n          expirationDate: { label: \"Expiration Date\", ...dateProps },\r\n          issuanceDate: { label: \"Issuance Date\", ...dateProps }\r\n        }\r\n      },\r\n      DwellTime: {\r\n        label: \"Dwell Time\",\r\n        type: \"!group\",\r\n        subfields: {\r\n          location: { label: \"Location\", ...txtProps },\r\n          dwellTime: { label: \"Lay over Time\", ...numProps }\r\n        }\r\n      },\r\n      Email: {\r\n        label: \"Email\",\r\n        type: \"!group\",\r\n        subfields: {\r\n          address: { label: \"Address\", ...txtProps },\r\n          domain: { label: \"Domain\", ...txtProps }\r\n        }\r\n      },\r\n      Flight: {\r\n        label: \"Flight\",\r\n        type: \"!group\",\r\n        subfields: {\r\n          destination: { label: \"Destination Airport\", ...airportProps },\r\n          origin: { label: \"Origin Airport\", ...airportProps },\r\n          carrier: { label: \"Carrier\", ...carrierProps },\r\n          destinationCountry: { label: \"Destination Country\", ...countryProps },\r\n          originCountry: { label: \"Origin Country\", ...countryProps },\r\n          direction: {\r\n            label: \"Direction\",\r\n            type: \"select\",\r\n            fieldSettings: {\r\n              listValues: [\r\n                { value: \"I\", title: \"Inbound\" },\r\n                { value: \"O\", title: \"Outbound\" },\r\n                { value: \"C\", title: \"Continuance\" }\r\n              ]\r\n            },\r\n            valueSources: [\"value\"]\r\n          },\r\n          etdDate: { label: \"ETD\", ...dateProps },\r\n          flightNumber: { label: \"Number\", ...txtProps },\r\n          \"mutableFlightDetails.etaDate\": { label: \"ETA\", ...dateProps }\r\n        }\r\n      },\r\n      BookingDetail: {\r\n        label: \"Flight Leg\",\r\n        type: \"!group\",\r\n        subfields: {\r\n          origin: { label: \"Origin\", ...airportProps },\r\n          destination: { label: \"Destination\", ...airportProps }\r\n        }\r\n      },\r\n      PaymentForm: {\r\n        label: \"Form of Payment\",\r\n        type: \"!group\",\r\n        subfields: {\r\n          wholeDollarAmount: { label: \"Monetary Amount(No Decimal)\", ...numProps },\r\n          paymentType: {\r\n            label: \"Form of Payment\",\r\n            type: \"select\",\r\n            fieldSettings: {\r\n              listValues: [\r\n                { value: \"CC\", title: \"Credit Card\" },\r\n                { value: \"CA\", title: \"Cash\" },\r\n                { value: \"CK\", title: \"Check\" },\r\n                { value: \"MS\", title: \"Miscellaneous Charges Order\" },\r\n                { value: \"VOC\", title: \"Voucher\" }\r\n              ]\r\n            },\r\n            valueSources: [\"value\"]\r\n          }\r\n        }\r\n      },\r\n      FrequentFlyer: {\r\n        label: \"Frequent Flyer\",\r\n        type: \"!group\",\r\n        subfields: {\r\n          carrier: { label: \"Carrier\", ...carrierProps },\r\n          number: { label: \"Number\", ...txtProps }\r\n        }\r\n      },\r\n      Passenger: {\r\n        label: \"Passenger\",\r\n        type: \"!group\",\r\n        subfields: {\r\n          \"passengerDetails.age\": { label: \"Age\", ...numProps },\r\n          \"passengerTripDetails.coTravelerCount\": {\r\n            label: \"APIS Co-Passenger Count\",\r\n            ...numProps\r\n          },\r\n          \"passengerTripDetails.hoursBeforeTakeOff\": {\r\n            label: \"Hours Before Take Off\",\r\n            ...numProps\r\n          },\r\n          \"passengerDetails.nationality\": { label: \"Nationality\", ...countryProps },\r\n          \"passengerTripDetails.debarkation\": {\r\n            label: \"Debarkation Airport\",\r\n            ...airportProps\r\n          },\r\n          \"passengerTripDetails.debarkCountry\": {\r\n            label: \"Debarkation Country\",\r\n            ...countryProps\r\n          },\r\n          \"passengerDetails.dob\": { label: \"DOB\", ...dateProps },\r\n          \"passengerTripDetails.embarkation\": {\r\n            label: \"Embarkation Airport\",\r\n            ...airportProps\r\n          },\r\n          \"passengerTripDetails.embarkCountry\": {\r\n            label: \"Embarkation Country\",\r\n            ...countryProps\r\n          },\r\n          \"passengerDetails.gender\": {\r\n            label: \"Gender\",\r\n            type: \"select\",\r\n            fieldSettings: {\r\n              listValues: [\r\n                { value: \"F\", title: \"Female\" },\r\n                { value: \"M\", title: \"Male\" },\r\n                { value: \"U\", title: \"Undisclosed\" },\r\n                { value: \"FI\", title: \"Female Infant\" },\r\n                { value: \"MI\", title: \"Male Infant\" }\r\n              ]\r\n            },\r\n            valueSources: [\"value\"]\r\n          },\r\n          \"passengerDetails.firstName\": { label: \"Name - First\", ...txtProps },\r\n          \"passengerDetails.lastName\": { label: \"Name - Last\", ...txtProps },\r\n          \"passengerDetails.middleName\": { label: \"Name - Middle\", ...txtProps },\r\n          \"passengerDetails.residencyCountry\": {\r\n            label: \"Residency Country\",\r\n            ...countryProps\r\n          },\r\n          \"passengerDetails.passengerType\": {\r\n            label: \"Type\",\r\n            type: \"select\",\r\n            fieldSettings: {\r\n              listValues: [\r\n                { value: \"P\", title: \"Passenger\" },\r\n                { value: \"C\", title: \"Crew\" },\r\n                { value: \"I\", title: \"Intransit\" }\r\n              ]\r\n            },\r\n            valueSources: [\"value\"]\r\n          }\r\n          // \"passengerTripDetails.travelFrequency\": {\r\n          //   label: \"Travel Frequency\",\r\n          //   ...numProps\r\n          // }\r\n        }\r\n      },\r\n      Phone: {\r\n        label: \"Phone\",\r\n        type: \"!group\",\r\n        subfields: { number: { label: \"Number\", ...txtProps } }\r\n      },\r\n      Pnr: {\r\n        label: \"PNR\",\r\n        type: \"!group\",\r\n        subfields: {\r\n          bagCount: { label: \"Bag - Count\", ...numProps },\r\n          baggageWeight: { label: \"Baggage - Weight\", ...numProps },\r\n          dateBooked: { label: \"Booking Date\", ...dateProps },\r\n          carrier: { label: \"Carrier Code\", ...carrierProps },\r\n          dateReceived: { label: \"Date Received\", ...dateProps },\r\n          daysBookedBeforeTravel: { label: \"Days Booked Before Travel\", ...numProps },\r\n          departureDate: { label: \"Departure Date\", ...dateProps },\r\n          id: { label: \"Pnr Id\", ...txtProps },\r\n          origin: { label: \"Origin - Airport\", ...airportProps },\r\n          originCountry: { label: \"Origin - Country\", ...countryProps },\r\n          passengerCount: { label: \"Passenger Count\", ...numProps },\r\n          recordLocator: { label: \"Record Locator\", ...txtProps },\r\n          seat: { label: \"Seat\", ...txtProps },\r\n          tripType: {\r\n            label: \"Trip Type\",\r\n            type: \"select\",\r\n            fieldSettings: {\r\n              listValues: [\r\n                { value: \"ONE-WAY\", title: \"One Way\" },\r\n                { value: \"ROUND-TRIP\", title: \"Round Trip\" },\r\n                { value: \"NON-CONTIGUOUS\", title: \"Non Contiguous\" },\r\n                { value: \"MULTI-CITY\", title: \"Multi City\" },\r\n                { value: \"OPEN JAW\", title: \"Open Jaw\" }\r\n              ]\r\n            },\r\n            valueSources: [\"value\"]\r\n          },\r\n          tripDuration: { label: \"Trip Duration\", ...numProps }\r\n        }\r\n      },\r\n      Seat: {\r\n        label: \"Seat\",\r\n        type: \"!group\",\r\n        subfields: {\r\n          number: { label: \"Seat Number\", ...txtProps },\r\n          cabinClass: { label: \"Cabin Class\", ...txtProps },\r\n          apis: { label: \"Is APIS\", type: \"boolean\", valueSources: [\"value\"] }\r\n        }\r\n      },\r\n      Agency: {\r\n        label: \"Travel Agency\",\r\n        type: \"!group\",\r\n        subfields: {\r\n          country: { label: \"Country\", ...countryProps },\r\n          identifier: { label: \"Identifier\", ...txtProps },\r\n          location: { label: \"Location\", ...txtProps },\r\n          name: { label: \"Name\", ...txtProps },\r\n          city: { label: \"City\", ...txtProps },\r\n          phone: { label: \"Phone\", ...txtProps }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (loaded) {\r\n      setDataConfig(fieldConfigWithData);\r\n      setKey(key + 1);\r\n    }\r\n  }, [loaded]);\r\n\r\n  const cb = ev => {\r\n    let newSummary = summaryData;\r\n    newSummary[ev.name] = ev.value;\r\n\r\n    setSummaryData(newSummary);\r\n    setTitle(newSummary.title);\r\n    setRefresh(true);\r\n  };\r\n\r\n  const dataCallback = formatted => {\r\n    setQuery(formatted);\r\n    setRefresh(true);\r\n  };\r\n\r\n  const onDelete = () => {\r\n    if (hasData(svc)) {\r\n      svc.del(id).then(res => {\r\n        props.callback(ACTION.DELETE);\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (refresh) refreshHighlight();\r\n  }, [refresh]);\r\n\r\n  const refreshHighlight = () => {\r\n    clearInvalid();\r\n\r\n    if (!showInvalid) {\r\n      setRefresh(false);\r\n      return;\r\n    }\r\n\r\n    validateAll();\r\n    setRefresh(false);\r\n  };\r\n\r\n  const highlightInvalid = invalidList => {\r\n    if (invalidList.length === 0) {\r\n      setShowInvalid(false);\r\n      return;\r\n    }\r\n\r\n    let highlights = invalidList.map(item =>\r\n      document.querySelectorAll(\r\n        `[data-id=\"${item}\"].rule_group.group-or-rule, [data-id=\"${item}\"].rule.group-or-rule`\r\n      )\r\n    );\r\n\r\n    highlights.forEach(item =>\r\n      item.forEach(subItem => subItem.classList.add(\"qrm-invalid\"))\r\n    );\r\n\r\n    highlightRequiredFormFields();\r\n  };\r\n\r\n  const highlightRequiredFormFields = () => {\r\n    if (!hasData(title)) {\r\n      document.querySelector('[name=\"title\"]').classList.add(\"qrm-invalid\");\r\n    }\r\n    if (!summaryData.ruleCat && mode === QR.RULE) {\r\n      document.querySelector('[name=\"ruleCat\"]').classList.add(\"qrm-invalid\");\r\n    }\r\n  };\r\n\r\n  const highlightComponent = () => {\r\n    let container = document.querySelector('[class=\"query-builder-container\"]');\r\n\r\n    if (!!container) container.classList.add(\"qrm-invalid\");\r\n  };\r\n\r\n  const validateAll = () => {\r\n    let isValid = true;\r\n\r\n    setShowInvalid(true);\r\n    const q = getSaveObject();\r\n    const details = q.details || q.query;\r\n    const invalids = details?.invalid;\r\n\r\n    if (!details) {\r\n      highlightComponent();\r\n      isValid = false;\r\n    }\r\n    if (hasData(invalids)) {\r\n      highlightInvalid(invalids);\r\n      isValid = false;\r\n    }\r\n\r\n    if (!title || (!summaryData.ruleCat && mode === QR.RULE)) {\r\n      highlightRequiredFormFields();\r\n      isValid = false;\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  const storeRule = () => {\r\n    const saved = getSaveObject();\r\n\r\n    lookupAction({ data: saved, type: \"lastRule\" });\r\n  };\r\n\r\n  const clearInvalid = () => {\r\n    const marked = document.getElementsByClassName(\"qrm-invalid\");\r\n\r\n    while (marked.length > 0) {\r\n      marked[0].classList.remove(\"qrm-invalid\");\r\n    }\r\n  };\r\n\r\n  const onSave = () => {\r\n    if (!hasData(svc)) return;\r\n\r\n    if (!validateAll()) return;\r\n\r\n    const q = getSaveObject();\r\n\r\n    const saveMethod = isEdit ? svc.put : svc.post;\r\n    const saveArgs = hasData(id) ? [id, q] : [q];\r\n\r\n    saveMethod(...saveArgs).then(() => {\r\n      // postpone callback to parent until *after* the save promise is resolved.\r\n      // Ensures the save is complete before we attempt to refresh the parent table data\r\n      props.callback(ACTION.SAVE);\r\n    });\r\n  };\r\n\r\n  const getSaveObject = () => {\r\n    const safeid = id > 0 ? id : null;\r\n\r\n    if (props.mode === QR.RULE) {\r\n      return {\r\n        id: safeid,\r\n        details: query,\r\n        summary: {\r\n          title: summaryData.title,\r\n          description: summaryData.description,\r\n          input: \"select\",\r\n          startDate: new Date(summaryData.startDate || Date.now()),\r\n          endDate: summaryData.endDate ? new Date(summaryData.endDate) : undefined,\r\n          enabled: summaryData.enabled,\r\n          ruleCat: summaryData.ruleCat,\r\n          overMaxHits: null,\r\n          tag: query\r\n        }\r\n      };\r\n    }\r\n\r\n    return {\r\n      id: safeid,\r\n      title: summaryData.title,\r\n      description: summaryData.description,\r\n      tag: query,\r\n      query: query\r\n    };\r\n  };\r\n\r\n  const onClose = () => {\r\n    props.callback(ACTION.CLOSE);\r\n  };\r\n\r\n  const onRun = () => {\r\n    if (!validateAll()) return;\r\n\r\n    storeRule();\r\n\r\n    navigate(\"/gtas/tools/qrdetails\", {\r\n      state: {\r\n        data: {\r\n          pageNumber: 1,\r\n          pageSize: 10,\r\n          query: query || data\r\n        }\r\n      }\r\n    });\r\n    props.callback(ACTION.RUN);\r\n  };\r\n\r\n  const onClear = () => {\r\n    setData(undefined);\r\n    setTitle();\r\n\r\n    setSummaryData({\r\n      title: \"\",\r\n      description: \"\",\r\n      startDate: localeDateOnly(Date.now()),\r\n      endDate: \"\",\r\n      enabled: true,\r\n      ruleCat: -1\r\n    });\r\n\r\n    setKey(key + 1);\r\n    setShowInvalid(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (key > 0) return;\r\n\r\n    setData(props.data?.query);\r\n\r\n    const storedCountries = getLookupState(CTX.COUNTRIES);\r\n    const storedCarriers = getLookupState(CTX.CARRIERS);\r\n    const storedAirports = getLookupState(CTX.AIRPORTCODES);\r\n    const storedCategories = getLookupState(CTX.RULECATS);\r\n    const storedCcTypes = getLookupState(CTX.CCTYPES);\r\n\r\n    // move to context.\r\n    if (/*hasData(storedCategories)*/ false) {\r\n      //Categories are perhaps small enough in amount that caching them is unnecessary?\r\n      setCategories(storedCategories);\r\n    } else {\r\n      hitcats.get().then(res => {\r\n        const cats = asArray(res).map(catitem => {\r\n          return { label: catitem.label, value: catitem.id };\r\n        });\r\n\r\n        if (hasData(cats)) lookupAction({ data: cats, type: CTX.RULECATS });\r\n        setCategories(cats);\r\n      });\r\n    }\r\n\r\n    if (hasData(storedCountries)) {\r\n      setCountries(storedCountries);\r\n    } else {\r\n      countryLookup.get().then(res => {\r\n        const ctyitems = asArray(res).map(ctyitem => {\r\n          return { value: ctyitem.iso3, title: ctyitem.name };\r\n        });\r\n\r\n        if (hasData(ctyitems)) lookupAction({ data: ctyitems, type: CTX.COUNTRIES });\r\n        setCountries(ctyitems);\r\n      });\r\n    }\r\n\r\n    if (hasData(storedCarriers)) {\r\n      setCarriers(storedCarriers);\r\n    } else {\r\n      carrierLookup.get().then(res => {\r\n        let caritems = asArray(res).map(caritem => {\r\n          return { title: `${caritem.name} (${caritem.iata})`, value: caritem.iata };\r\n        });\r\n\r\n        const result = caritems.sort(function(a, b) {\r\n          return a.title.toLowerCase() > b.title.toLowerCase() ? 1 : -1;\r\n        });\r\n\r\n        if (hasData(result)) lookupAction({ data: result, type: CTX.CARRIERS });\r\n        setCarriers(result);\r\n      });\r\n    }\r\n\r\n    if (hasData(storedAirports)) {\r\n      setAirports(storedAirports);\r\n    } else {\r\n      airportLookup.get().then(res => {\r\n        let apitems = asArray(res).map(apitem => {\r\n          return { title: apitem.iata, value: apitem.iata };\r\n        });\r\n\r\n        const result = apitems.sort(function(a, b) {\r\n          return a.title.toUpperCase() > b.title.toUpperCase() ? 1 : -1;\r\n        });\r\n\r\n        if (hasData(result)) lookupAction({ data: result, type: CTX.AIRPORTCODES });\r\n        setAirports(result);\r\n      });\r\n    }\r\n\r\n    if (hasData(storedCcTypes)) {\r\n      setCcTypes(storedCcTypes);\r\n    } else {\r\n      codeEditor.get.cctypeCodes().then(res => {\r\n        let ccitem = asArray(res).map(ccitem => {\r\n          return { title: `${ccitem.description} (${ccitem.code})`, value: ccitem.code };\r\n        });\r\n\r\n        const result = ccitem.sort(function(a, b) {\r\n          return a.title.toUpperCase() > b.title.toUpperCase() ? 1 : -1;\r\n        });\r\n\r\n        if (hasData(result)) lookupAction({ data: result, type: CTX.CCTYPES });\r\n        setCcTypes(result);\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={props.show}\r\n        onHide={props.onHide}\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        className=\"modal-center\"\r\n      >\r\n        <ModalHeader closeButton>\r\n          <ModalTitle>\r\n            <span>{props.title} </span>\r\n            <label className=\"big-name-sidebar\">{summaryData?.title}</label>\r\n          </ModalTitle>\r\n        </ModalHeader>\r\n        <ModalBody className=\"qbrb-modal-body\">\r\n          <div>\r\n            <Row className=\"qrm\">\r\n              <LabelledInput\r\n                datafield\r\n                key={`title${key}`}\r\n                labelText={<Xl8 xid=\"qrm001\">Title</Xl8>}\r\n                inputType=\"text\"\r\n                inputVal={summaryData?.title}\r\n                name=\"title\"\r\n                callback={cb}\r\n                alt=\"Title\"\r\n                spacebetween\r\n              />\r\n              <LabelledInput\r\n                datafield\r\n                labelText={<Xl8 xid=\"qrm002\">Description</Xl8>}\r\n                key={`desc${key}`}\r\n                inputType=\"text\"\r\n                inputVal={summaryData?.description}\r\n                name=\"description\"\r\n                callback={cb}\r\n                alt=\"Description\"\r\n                spacebetween\r\n              />\r\n            </Row>\r\n            {mode === QR.RULE && (\r\n              <>\r\n                <Row className=\"qrm\">\r\n                  <LabelledInput\r\n                    datafield\r\n                    labelText={<Xl8 xid=\"qrm003\">Start Date</Xl8>}\r\n                    key={`sd${key}`}\r\n                    required={true}\r\n                    inputType=\"text\"\r\n                    inputVal={localeDateOnly(summaryData?.startDate)}\r\n                    name=\"startDate\"\r\n                    callback={cb}\r\n                    alt=\"start date\"\r\n                    spacebetween\r\n                  />\r\n                  <LabelledInput\r\n                    datafield\r\n                    labelText={<Xl8 xid=\"qrm004\">End Date</Xl8>}\r\n                    key={`ed${key}`}\r\n                    inputType=\"text\"\r\n                    inputVal={localeDateOnly(summaryData?.endDate)}\r\n                    name=\"endDate\"\r\n                    callback={cb}\r\n                    alt=\"end date\"\r\n                    spacebetween\r\n                  />\r\n                </Row>\r\n                <Row className=\"qrm\">\r\n                  <LabelledInput\r\n                    key={`en${key}`}\r\n                    datafield\r\n                    labelText={<Xl8 xid=\"qrm005\">Enabled</Xl8>}\r\n                    inputType=\"checkbox\"\r\n                    name=\"enabled\"\r\n                    alt=\"query or rule is enabled\"\r\n                    selected={summaryData?.enabled}\r\n                    callback={cb}\r\n                    spacebetween\r\n                  />\r\n                  <LabelledInput\r\n                    datafield\r\n                    key={`rc${key}`}\r\n                    labelText={<Xl8 xid=\"qrm006\">Category</Xl8>}\r\n                    inputType=\"select\"\r\n                    options={categories}\r\n                    inputVal={summaryData?.ruleCat}\r\n                    required={true}\r\n                    name=\"ruleCat\"\r\n                    callback={cb}\r\n                    alt=\"alt\"\r\n                    spacebetween\r\n                    className=\"rule-cat\"\r\n                  />\r\n                </Row>\r\n              </>\r\n            )}\r\n            {loaded && (\r\n              <RAQB\r\n                data={data}\r\n                key={key}\r\n                config={dataConfig}\r\n                dataCallback={dataCallback}\r\n              ></RAQB>\r\n            )}\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button\r\n            type=\"button\"\r\n            key=\"close\"\r\n            className=\"m-2 outline-dark-outline\"\r\n            variant=\"outline-dark\"\r\n            onClick={onClose}\r\n          >\r\n            <Xl8 xid=\"qrm007\">Close</Xl8>\r\n          </Button>\r\n          <Button\r\n            type=\"button\"\r\n            key=\"clear\"\r\n            className=\"m-2 outline-dark-outline\"\r\n            variant=\"outline-dark\"\r\n            onClick={onClear}\r\n          >\r\n            <Xl8 xid=\"QRM008\">Clear</Xl8>\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            type=\"button\"\r\n            className=\"m-2 btn\"\r\n            variant=\"primary\"\r\n            onClick={onSave}\r\n          >\r\n            <Xl8 xid=\"qrm009\">Save</Xl8>\r\n          </Button>\r\n\r\n          <RoleAuthenticator roles={[ROLE.ADMIN, ROLE.QRYMGR]} alt={<></>}>\r\n            <Button\r\n              key=\"run\"\r\n              type=\"button\"\r\n              className=\"m-2 outline-dark-outline\"\r\n              variant=\"outline-dark\"\r\n              onClick={onRun}\r\n            >\r\n              <Xl8 xid=\"qrm010\">Query</Xl8>\r\n            </Button>\r\n          </RoleAuthenticator>\r\n          {isEdit && (\r\n            <Button\r\n              key=\"delete\"\r\n              type=\"button\"\r\n              className=\"m-2 outline-dark-outline\"\r\n              variant=\"outline-dark\"\r\n              onClick={onDelete}\r\n            >\r\n              <Xl8 xid=\"qrm011\">Delete</Xl8>\r\n            </Button>\r\n          )}\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QRModal;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\tools\\about\\config.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\modal\\Modal.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\manageUsers\\changePasswordModal\\ChangePasswordModal.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\countdownBadge\\CountdownBadge.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\externalLink\\ExternalLink.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\flightBadge\\FlightBadge.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\CSVReader\\CSVReader.js",["695","696"],"import React, { useRef, useState } from \"react\";\r\nimport Xl8 from \"../xl8/Xl8\";\r\nimport { CSVReader as RCSVReader } from \"react-papaparse\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst CSVReader = props => {\r\n  const buttonRef = useRef();\r\n\r\n  const handleOpenDialog = e => {\r\n    if (buttonRef.current) {\r\n      buttonRef.current.open(e);\r\n    }\r\n  };\r\n  const onFileLoad = data => {\r\n    props.callback(data);\r\n  };\r\n  const onError = (err, file, inputElem, reason) => {\r\n    console.log(err);\r\n  };\r\n\r\n  useState(() => {\r\n    handleOpenDialog(props.file);\r\n  }, []);\r\n\r\n  return (\r\n    <RCSVReader\r\n      ref={buttonRef}\r\n      onFileLoad={onFileLoad}\r\n      onError={onError}\r\n      noDrag\r\n      noProgressBar\r\n      config={{ header: true }}\r\n    >\r\n      {({ file }) => (\r\n        <div onClick={handleOpenDialog}>\r\n          <i className=\"fa fa-upload\" />\r\n        </div>\r\n      )}\r\n    </RCSVReader>\r\n  );\r\n};\r\n\r\nCSVReader.propTypes = {};\r\n\r\nexport default CSVReader;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\cardWithTable\\CardWithTable.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\segmentTable\\SegmentTable.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\kanban\\Kanban.js",["697"],"import React, { useState } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport Main from \"../../components/main/Main\";\r\nimport CountdownBadge from \"../../components/countdownBadge/CountdownBadge\";\r\nimport { CardDeck } from \"react-bootstrap\";\r\nimport { randomIntOfLength } from \"../../utils/utils\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\n\r\nimport \"./Kanban.css\";\r\n\r\nconst Kanban = props => {\r\n  const randdate = (length = 1) => new Date(Date.now() + randomIntOfLength(length));\r\n\r\n  console.log(randdate(9));\r\n  const actives = [\r\n    {\r\n      id: \"1001\",\r\n      content: (\r\n        <div>\r\n          <div className=\"font-weight-bolder\">Barthez, Veronique</div>\r\n          <div>Doc #: 21099D-MA78</div>\r\n          <div className=\"poe-countdown-outer\">\r\n            <span>Reason:</span>\r\n            <div className=\"poe-countdown-inner\">\r\n              <CountdownBadge future={randdate(9)} baseline={randdate()}></CountdownBadge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      id: \"1002\",\r\n      content: (\r\n        <div>\r\n          <div className=\"font-weight-bolder\">Floyd, Jojo</div>\r\n          <div>Doc #: 21099D-MA78</div>\r\n          <div className=\"poe-countdown-outer\">\r\n            <span>Reason:</span>\r\n            <div className=\"poe-countdown-inner\">\r\n              <CountdownBadge future={randdate(9)} baseline={randdate()}></CountdownBadge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      id: \"1003\",\r\n      content: (\r\n        <div>\r\n          <div className=\"font-weight-bolder\">Mellon, Carnegie</div>\r\n          <div>Doc #: 21099D-MA78</div>\r\n          <div className=\"poe-countdown-outer\">\r\n            <span>Reason:</span>\r\n            <div className=\"poe-countdown-inner\">\r\n              <CountdownBadge future={randdate(8)} baseline={randdate()}></CountdownBadge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      id: \"1004\",\r\n      content: (\r\n        <div>\r\n          <div className=\"font-weight-bolder\">Liu, Simu</div>\r\n          <div>Doc #: 21099D-MA78</div>\r\n          <div className=\"poe-countdown-outer\">\r\n            <span>Reason:</span>\r\n            <div className=\"poe-countdown-inner\">\r\n              <CountdownBadge future={randdate(6)} baseline={randdate()}></CountdownBadge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      id: \"1005\",\r\n      content: (\r\n        <div>\r\n          <div className=\"font-weight-bolder\">Varg, Hjordis</div>\r\n          <div>Doc #: 21099D-MA78</div>\r\n          <div className=\"poe-countdown-outer\">\r\n            <span>Reason:</span>\r\n            <div className=\"poe-countdown-inner\">\r\n              <CountdownBadge future={randdate(9)} baseline={randdate()}></CountdownBadge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  ];\r\n\r\n  const enroutes = [\r\n    {\r\n      id: \"1010\",\r\n      content: (\r\n        <div>\r\n          <div className=\"font-weight-bolder\">Martin, Doc</div>\r\n          <div>Doc #: 21099D-MA78</div>\r\n          <div className=\"poe-countdown-outer\">\r\n            <span>Reason:</span>\r\n            <div className=\"poe-countdown-inner\">\r\n              <CountdownBadge future={randdate(6)} baseline={randdate()}></CountdownBadge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      id: \"1012\",\r\n      content: (\r\n        <div>\r\n          <div className=\"font-weight-bolder\">Olu, Idris</div>\r\n          <div>Doc #: 21099D-MA78</div>\r\n          <div className=\"poe-countdown-outer\">\r\n            <span>Reason:</span>\r\n            <div className=\"poe-countdown-inner\">\r\n              <CountdownBadge future={randdate(7)} baseline={randdate()}></CountdownBadge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  ];\r\n\r\n  const encounters = [\r\n    {\r\n      id: \"1020\",\r\n      content: (\r\n        <div>\r\n          <div className=\"font-weight-bolder\">Marin, Imelda</div>\r\n          <div>Doc #: 21099D-MA78</div>\r\n          <div className=\"poe-countdown-outer\">\r\n            <span>Reason:</span>\r\n            <div className=\"poe-countdown-inner\">\r\n              <CountdownBadge future={randdate(3)} baseline={randdate()}></CountdownBadge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      id: \"1022\",\r\n      content: (\r\n        <div>\r\n          <div className=\"font-weight-bolder\">Olu, Idris</div>\r\n          <div>Doc #: 21099D-MA78</div>\r\n          <div className=\"poe-countdown-outer\">\r\n            <span>Reason: World Health</span>\r\n            <div className=\"poe-countdown-inner\">\r\n              <CountdownBadge future={randdate(5)} baseline={randdate()}></CountdownBadge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      id: \"1023\",\r\n      content: (\r\n        <div>\r\n          <div className=\"font-weight-bolder\">Twee, Harrison</div>\r\n          <div>Doc #: 21099D-MA78</div>\r\n          <div className=\"poe-countdown-outer\">\r\n            <span>Reason:</span>\r\n            <div className=\"poe-countdown-inner\">\r\n              <CountdownBadge future={randdate(5)} baseline={randdate()}></CountdownBadge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  ];\r\n\r\n  const misses = [\r\n    {\r\n      id: \"1030\",\r\n      content: (\r\n        <div>\r\n          <div className=\"font-weight-bolder\">Popoto, Vaquita</div>\r\n          <div>Doc #: 199485bb2</div>\r\n          <div className=\"poe-countdown-outer\">\r\n            <span>Reason: Local Police</span>\r\n            <div className=\"poe-countdown-inner\">\r\n              <CountdownBadge future={randdate()} baseline={randdate(6)}></CountdownBadge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  ];\r\n\r\n  const negatives = [\r\n    {\r\n      id: \"1040\",\r\n      content: (\r\n        <div>\r\n          <div className=\"font-weight-bolder\">Hsieh, Yu Min</div>\r\n          <div>Doc #: FF0294-KRCAN</div>\r\n          <div className=\"poe-countdown-outer\">\r\n            <span>Reason: Interpol</span>\r\n            <div className=\"poe-countdown-inner\">\r\n              <CountdownBadge future={randdate()} baseline={randdate(6)}></CountdownBadge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      id: \"1041\",\r\n      content: (\r\n        <div>\r\n          <div className=\"font-weight-bolder\">Sandiego, Carmen</div>\r\n          <div>Doc #: 3948HHERUS</div>\r\n          <div className=\"poe-countdown-outer\">\r\n            <span>Reason: </span>\r\n            <div className=\"poe-countdown-inner\">\r\n              <CountdownBadge future={randdate()} baseline={randdate(6)}></CountdownBadge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      id: \"1042\",\r\n      content: (\r\n        <div>\r\n          <div className=\"font-weight-bolder\">Pietr, Samuel</div>\r\n          <div>Doc #: BB2K9DRRE</div>\r\n          <div className=\"poe-countdown-outer\">\r\n            <span>Reason: </span>\r\n            <div className=\"poe-countdown-inner\">\r\n              <CountdownBadge future={randdate()} baseline={randdate(6)}></CountdownBadge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  ];\r\n\r\n  const columnsFromBackend = {\r\n    \"9001\": {\r\n      name: <Xl8 xid=\"poe0001\">Active Lookout</Xl8>,\r\n      items: actives,\r\n      background: \"#f0f0f0\",\r\n      dragbackground: \"#c0ddec\"\r\n    },\r\n    \"9002\": {\r\n      name: <Xl8 xid=\"poe0002\">Officer En Route</Xl8>,\r\n      items: enroutes,\r\n      background: \"#f0f0f0\",\r\n      dragbackground: \"#c0ddec\"\r\n    },\r\n    \"9003\": {\r\n      name: <Xl8 xid=\"poe0003\">Lookout Encountered</Xl8>,\r\n      items: encounters,\r\n      background: \"#f0f0f0\",\r\n      dragbackground: \"#c0ddec\"\r\n    },\r\n    \"9004\": {\r\n      name: <Xl8 xid=\"poe0004\">Lookout Referred</Xl8>,\r\n      items: [],\r\n      background: \"#f0f0f0\",\r\n      dragbackground: \"#c0ddec\"\r\n    },\r\n    \"9005\": {\r\n      name: <Xl8 xid=\"poe0005\">Did Not Board</Xl8>,\r\n      items: [],\r\n      background: \"#f0f0f0\",\r\n      dragbackground: \"lightyellow\"\r\n    },\r\n    \"9006\": {\r\n      name: <Xl8 xid=\"poe0006\">Lookout Missed</Xl8>,\r\n      items: misses,\r\n      background: \"#f0f0f0\",\r\n      dragbackground: \"lightpink\"\r\n    },\r\n    \"9007\": {\r\n      name: <Xl8 xid=\"poe0007\">Secondary Positive</Xl8>,\r\n      items: [],\r\n      dragbackground: \"lightgreen\",\r\n      background: \"#f0f0f0\"\r\n    },\r\n    \"9008\": {\r\n      name: <Xl8 xid=\"poe0008\">Secondary Negative</Xl8>,\r\n      items: negatives,\r\n      background: \"#f0f0f0\",\r\n      dragbackground: \"lightgray\"\r\n    }\r\n  };\r\n  const [columns, setColumns] = useState(columnsFromBackend);\r\n\r\n  const onDragEnd = (result, columns, setColumns) => {\r\n    if (!result.destination) return;\r\n    const { source, destination } = result;\r\n\r\n    if (source.droppableId !== destination.droppableId) {\r\n      const sourceColumn = columns[source.droppableId];\r\n      const destColumn = columns[destination.droppableId];\r\n      const sourceItems = [...sourceColumn.items];\r\n      const destItems = [...destColumn.items];\r\n      const [removed] = sourceItems.splice(source.index, 1);\r\n      destItems.splice(destination.index, 0, removed);\r\n      setColumns({\r\n        ...columns,\r\n        [source.droppableId]: {\r\n          ...sourceColumn,\r\n          items: sourceItems\r\n        },\r\n        [destination.droppableId]: {\r\n          ...destColumn,\r\n          items: destItems\r\n        }\r\n      });\r\n    } else {\r\n      const column = columns[source.droppableId];\r\n      const copiedItems = [...column.items];\r\n      const [removed] = copiedItems.splice(source.index, 1);\r\n      copiedItems.splice(destination.index, 0, removed);\r\n      setColumns({\r\n        ...columns,\r\n        [source.droppableId]: {\r\n          ...column,\r\n          items: copiedItems\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"scrollable\">\r\n      <CardDeck className=\"page-deck justify-content-center\">\r\n        <DragDropContext onDragEnd={result => onDragEnd(result, columns, setColumns)}>\r\n          {Object.entries(columns).map(([columnId, column], index) => {\r\n            return (\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  alignItems: \"center\",\r\n                  marginBlock: \"15px\"\r\n                }}\r\n                key={columnId}\r\n              >\r\n                <h5>{column.name}</h5>\r\n                <div style={{ margin: 8, maxHeight: \"calc((vh-120px)/2)\" }}>\r\n                  <Droppable droppableId={columnId} key={columnId}>\r\n                    {(provided, snapshot) => {\r\n                      return (\r\n                        <div\r\n                          {...provided.droppableProps}\r\n                          ref={provided.innerRef}\r\n                          style={{\r\n                            background: snapshot.isDraggingOver\r\n                              ? column.dragbackground\r\n                              : column.background,\r\n                            padding: 8,\r\n                            width: 300,\r\n                            minHeight: 200,\r\n                            maxHeight: \"calc((100vh - 250px)/2)\",\r\n                            overflowY: \"auto\",\r\n                            border: \"1px solid #d0d0d0\",\r\n                            backgroundColor: \"white\",\r\n                            borderRadius: \"3px\"\r\n                          }}\r\n                        >\r\n                          {column.items.map((item, index) => {\r\n                            return (\r\n                              <Draggable\r\n                                key={item.id}\r\n                                draggableId={item.id}\r\n                                index={index}\r\n                              >\r\n                                {(provided, snapshot) => {\r\n                                  return (\r\n                                    <div\r\n                                      ref={provided.innerRef}\r\n                                      {...provided.draggableProps}\r\n                                      {...provided.dragHandleProps}\r\n                                      style={{\r\n                                        userSelect: \"none\",\r\n                                        padding: 6,\r\n                                        margin: \"0 0 8px 0\",\r\n                                        minHeight: \"50px\",\r\n                                        backgroundColor: \"#009e9233\",\r\n                                        color: \"black\",\r\n                                        ...provided.draggableProps.style,\r\n                                        border: \"1px solid black\",\r\n                                        borderRadius: \"5px\",\r\n                                        textAlign: \"left\"\r\n                                      }}\r\n                                    >\r\n                                      {item.content}\r\n                                    </div>\r\n                                  );\r\n                                }}\r\n                              </Draggable>\r\n                            );\r\n                          })}\r\n                          {provided.placeholder}\r\n                        </div>\r\n                      );\r\n                    }}\r\n                  </Droppable>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </DragDropContext>\r\n      </CardDeck>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Kanban;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\errorBoundary\\ErrorBoundary.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\graph\\Graph.js",["698","699","700"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"../../services/configService\";\r\nimport Xl8 from \"../xl8/Xl8\";\r\nimport { cypher, cypherAuth } from \"../../services/serviceWrapper\";\r\nimport { provider, saves, palette } from \"./structure\";\r\nimport \"./Graph.css\";\r\nimport \"../../../node_modules/vaquita/css/vaquita-svg.css\";\r\nimport \"vaquita/dist/vaquita.min.css\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst vaqu = require(\"vaquita\");\r\n\r\nconst Graph = props => {\r\n  const pax1 = {\r\n    dob: props.paxData?.dob,\r\n    updatedAt: props.paxData?.updatedAt,\r\n    paxId: props.paxData?.paxId,\r\n    idTag: props.paxData?.paxIdTag,\r\n    firstName: props.paxData?.firstName,\r\n    middleName: props.paxData?.middleName,\r\n    lastName: props.paxData?.lastName,\r\n    id: props.paxData?.id,\r\n    createdAt: props.paxData?.createdAt,\r\n    createdBy: props.paxData?.createdBy,\r\n    updatedBy: props.paxData?.updatedBy,\r\n    suffix: props.paxData?.suffix,\r\n    gender: props.paxData?.gender,\r\n    nationality: props.paxData?.nationality,\r\n    passengerType: props.paxData?.passengerType,\r\n    seat: props.paxData?.seat,\r\n    flightIdTag: props.paxData.flightIdTag,\r\n    flightId: props.paxData?.flightId,\r\n    flightNumber: props.paxData?.flightNumber,\r\n    fullFlightNumber: `${props.paxData?.carrier}${props.paxData?.flightNumber}`.toUpperCase(),\r\n    carrier: props.paxData?.carrier,\r\n    etd: props.paxData?.etd,\r\n    eta: props.paxData?.eta,\r\n    flightOrigin: props.paxData?.flightOrigin,\r\n    flightDestination: props.paxData?.flightDestination,\r\n    onRuleHitList: props.paxData?.onRuleHitList,\r\n    onGraphHitList: props.paxData?.onGraphHitList,\r\n    onWatchList: props.paxData?.onWatchList,\r\n    onWatchListDoc: props.paxData?.onWatchListDoc,\r\n    onWatchListLink: props.paxData?.onWatchListLink,\r\n    documents: props.paxData?.documents,\r\n    origin: props.paxData.embarkation,\r\n    destination: props.paxData.debarkation\r\n  };\r\n  const componentNodeRef = useRef(null);\r\n  const [isReloaded, setIsReloaded] = useState(true);\r\n  const [vaquita, setVaquita] = useState(vaqu);\r\n  const [save, setSave] = useState(saves(pax1));\r\n\r\n  const SvgType = 2;\r\n  vaquita.tools.TOGGLE_TAXONOMY = false;\r\n  vaquita.query.USE_RELATION_DIRECTION = false;\r\n  vaquita.tools.SAVE_GRAPH = false;\r\n  vaquita.query.RESULTS_PAGE_SIZE = 100;\r\n  vaquita.query.MAX_RESULTS_COUNT = 30;\r\n  vaquita.graph.link.SHOW_MARKER = false;\r\n  vaquita.graph.node.DONUT_WIDTH = 15;\r\n  vaquita.graph.HORIZONTAL_NODES = 1;\r\n\r\n  vaquita.graph.setZoom(0.5, 2);\r\n\r\n  vaquita.provider.node.Provider = provider(vaquita, SvgType);\r\n\r\n  vaquita.provider.link.Provider = {\r\n    getColor: function(link) {\r\n      return palette[link.source.label.toLowerCase()];\r\n    }\r\n  };\r\n\r\n  vaquita.result.onTotalResultCount(function(count) {\r\n    // document.getElementById(\"result-total-count\").innerHTML = \"(\" + count + \")\";\r\n  });\r\n\r\n  const setCypherUrl = () => {\r\n    cypher.get().then(function(res) {\r\n      vaquita.rest.CYPHER_URL = res.result;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    cypherAuth.get().then(function(res) {\r\n      vaquita.rest.AUTHORIZATION = `${res.result}`;\r\n      setCypherUrl();\r\n      activateGraph();\r\n    });\r\n\r\n    return () => {\r\n      // prevent jquery from attempting updates on the resize event after the component is unmounted\r\n      // this deregisters the vaquita listener on the window on unmount\r\n      window.removeEventListener(\"resize\", vaquita.graph.centerRootNode, false);\r\n    };\r\n  }, []);\r\n\r\n  const activateGraph = () => {\r\n    const template = save.pax;\r\n\r\n    let vaq = vaquita;\r\n    vaq.graph.HORIZONTAL_NODES = template.horiz || 1;\r\n\r\n    // call start only when there's no rootnode\r\n    //TODO vaquita - expose a status field on graph?\r\n    if (vaquita.dataModel.getRootNode() === undefined) {\r\n      vaq.start(template);\r\n      setIsReloaded(false);\r\n    }\r\n    // refresh graph arena if the page reloads with new pax data\r\n    else if (isReloaded) {\r\n      vaq.refresh(template);\r\n      setIsReloaded(false);\r\n    }\r\n  };\r\n\r\n  const onClickSavedGraph = id => {\r\n    // Update Graph title:\r\n    if (!id) {\r\n      d3.select(\"#save-header\").text(\r\n        d3\r\n          .select(this)\r\n          .select(\".ppt-label\")\r\n          .text()\r\n      );\r\n      // id = id;\r\n    }\r\n\r\n    let vaq = vaquita;\r\n\r\n    vaq.graph.mainLabel = save[id];\r\n    vaq.graph.HORIZONTAL_NODES = save[id].horiz || 1;\r\n    vaq.tools.reset();\r\n  };\r\n\r\n  return (\r\n    <div className=\"line-container\" ref={componentNodeRef}>\r\n      <div className=\"ppt-body\">\r\n        <section className=\"ppt-section-main\">\r\n          <div className=\"ppt-container-graph\">\r\n            <nav id=\"popoto-saves\" className=\"ppt-taxo-nav\">\r\n              <div id=\"saves\">\r\n                <span className=\"ppt-header-span\">\r\n                  <Xl8 xid=\"link002\">This Passenger:</Xl8>\r\n                </span>\r\n                <table className=\"ppt-saved-ul\">\r\n                  <tbody>\r\n                    <tr id=\"Pax\" onClick={() => onClickSavedGraph(\"pax\")}>\r\n                      <td>\r\n                        <i className=\"fa fa-user-circle-o pptpassenger\"></i>\r\n                      </td>\r\n                      <td>\r\n                        <span className=\"ppt-label\" title=\"Passenger links\">\r\n                          <Xl8 xid=\"link003\">Passenger</Xl8>\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr id=\"Address\" onClick={() => onClickSavedGraph(\"address\")}>\r\n                      <td>\r\n                        <i className=\"fa fa-home pptaddress\"></i>\r\n                      </td>\r\n                      <td>\r\n                        <span\r\n                          className=\"ppt-label\"\r\n                          title=\"Addresses used by this passenger\"\r\n                        >\r\n                          <Xl8 xid=\"link004\">Address</Xl8>\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr id=\"CreditCard\" onClick={() => onClickSavedGraph(\"creditcard\")}>\r\n                      <td>\r\n                        <i className=\"fa fa-credit-card-alt pptcreditcard\"></i>\r\n                      </td>\r\n                      <td>\r\n                        <span\r\n                          className=\"ppt-label\"\r\n                          title=\"Credit cards used by this passenger\"\r\n                        >\r\n                          <Xl8 xid=\"link005\">Credit Card</Xl8>\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr id=\"Phone\" onClick={() => onClickSavedGraph(\"phone\")}>\r\n                      <td>\r\n                        <i className=\"fa fa-phone pptphone\"></i>\r\n                      </td>\r\n                      <td>\r\n                        <span\r\n                          className=\"ppt-label\"\r\n                          title=\"Phone numbers used by this passenger\"\r\n                        >\r\n                          <Xl8 xid=\"link006\">Phone</Xl8>\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr id=\"Email\" onClick={() => onClickSavedGraph(\"email\")}>\r\n                      <td>\r\n                        <i className=\"fa fa-envelope pptemail\"></i>\r\n                      </td>\r\n                      <td>\r\n                        <span\r\n                          className=\"ppt-label\"\r\n                          title=\"Email addresses used by this passenger\"\r\n                        >\r\n                          <Xl8 xid=\"link007\">Emails</Xl8>\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr id=\"Hit\" onClick={() => onClickSavedGraph(\"hit\")}>\r\n                      <td>\r\n                        <i className=\"fa fa-exclamation-circle ppthit\"></i>\r\n                      </td>\r\n                      <td>\r\n                        <span className=\"ppt-label\" title=\"Hits for this passenger\">\r\n                          <Xl8 xid=\"link008\">Hits</Xl8>\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr id=\"Document\" onClick={() => onClickSavedGraph(\"document\")}>\r\n                      <td>\r\n                        <div alt=\"\" className=\"pptdocument\"></div>\r\n                      </td>\r\n                      <td>\r\n                        <span\r\n                          className=\"ppt-label\"\r\n                          title=\"Documents used by this passenger\"\r\n                        >\r\n                          <Xl8 xid=\"link009\">Documents</Xl8>\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n                <hr />\r\n                <br />\r\n\r\n                <span className=\"ppt-header-span\">\r\n                  <Xl8 xid=\"link010\">This FLight:</Xl8>\r\n                </span>\r\n                <table className=\"ppt-saved-ul\">\r\n                  <tbody>\r\n                    <tr id=\"Flight\" onClick={() => onClickSavedGraph(\"flight\")}>\r\n                      <td>\r\n                        <i className=\"fa fa-plane pptflight\"></i>\r\n                      </td>\r\n                      <td>\r\n                        <span className=\"ppt-label\" title=\"Flight links\">\r\n                          <Xl8 xid=\"link011\">Flight</Xl8>\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr id=\"Address\" onClick={() => onClickSavedGraph(\"addressall\")}>\r\n                      <td>\r\n                        <i className=\"fa fa-home pptaddress\"></i>\r\n                      </td>\r\n                      <td>\r\n                        <span\r\n                          className=\"ppt-label\"\r\n                          title=\"All passenger addresses for this flight\"\r\n                        >\r\n                          <Xl8 xid=\"link012\">All Addresses</Xl8>\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr\r\n                      id=\"CreditCard\"\r\n                      onClick={() => onClickSavedGraph(\"creditcardall\")}\r\n                    >\r\n                      <td>\r\n                        <i className=\"fa fa-credit-card-alt pptcreditcard\"></i>\r\n                      </td>\r\n                      <td>\r\n                        <span\r\n                          className=\"ppt-label\"\r\n                          title=\"All passenger credit cards for this flight\"\r\n                        >\r\n                          <Xl8 xid=\"link013\">All Credit Cards</Xl8>\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr id=\"Phone\" onClick={() => onClickSavedGraph(\"phoneall\")}>\r\n                      <td>\r\n                        <i className=\"fa fa-phone pptphone\"></i>\r\n                      </td>\r\n                      <td>\r\n                        <span\r\n                          className=\"ppt-label\"\r\n                          title=\"All passenger phone numbers for this flight\"\r\n                        >\r\n                          <Xl8 xid=\"link014\">All Phones</Xl8>\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr id=\"Email\" onClick={() => onClickSavedGraph(\"emailall\")}>\r\n                      <td>\r\n                        <i className=\"fa fa-envelope pptemail\"></i>\r\n                      </td>\r\n                      <td>\r\n                        <span\r\n                          className=\"ppt-label\"\r\n                          title=\"All passenger email addresses for this flight\"\r\n                        >\r\n                          <Xl8 xid=\"link015\">All Emails</Xl8>\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr id=\"Hit\" onClick={() => onClickSavedGraph(\"hitall\")}>\r\n                      <td>\r\n                        <i className=\"fa fa-exclamation-circle ppthit\"></i>\r\n                      </td>\r\n                      <td>\r\n                        <span\r\n                          className=\"ppt-label\"\r\n                          title=\"All passenger hits for this flight\"\r\n                        >\r\n                          <Xl8 xid=\"link016\">All Hits</Xl8>\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr id=\"Document\" onClick={() => onClickSavedGraph(\"documentall\")}>\r\n                      <td>\r\n                        <div alt=\"\" className=\"pptdocument\"></div>\r\n                      </td>\r\n                      <td>\r\n                        <span\r\n                          className=\"ppt-label\"\r\n                          title=\"All passenger documents for this flight\"\r\n                        >\r\n                          <Xl8 xid=\"link017\">All Documents</Xl8>\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </nav>\r\n            <div id=\"popoto-graph\" className=\"ppt-div-graph\"></div>\r\n          </div>\r\n\r\n          {/* <div id=\"popoto-query\" className=\"ppt-container-query\"></div>\r\n\r\n                <div className=\"ppt-section-header\">\r\n                  RESULTS\r\n                  <span id=\"result-total-count\" className=\"ppt-count-results\"></span>\r\n                </div>\r\n\r\n                <div id=\"popoto-results\" className=\"ppt-container-results\"></div> */}\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\services\\genericService.js",["701"],"// import PropTypes from \"prop-types\";\r\nimport { hasData } from \"../utils/utils\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nconst GenericService = async props => {\r\n  let param = {\r\n    method: props.method,\r\n    headers: {\r\n      ...props.headers,\r\n      Cookie: `JSESSIONID: ${Cookies.get(\"JSESSIONID\")}`\r\n    },\r\n    credentials: \"include\"\r\n  };\r\n\r\n  param.body = props.body;\r\n\r\n  return fetch(props.uri, param)\r\n    .then(response => {\r\n      if (response === undefined) {\r\n        return [];\r\n      }\r\n      if (response.ok) {\r\n        if (response.url.endsWith(\"/authenticate\")) return response;\r\n        if (response.url.includes(\"paxdetailreport\")) return response.arrayBuffer();\r\n        return response.json().then(res => res.data || res || response);\r\n      } else {\r\n        return response;\r\n      }\r\n    })\r\n    .catch(error => {\r\n      return error;\r\n    });\r\n};\r\n\r\n// GenericService.propTypes = {\r\n//   uri: PropTypes.string.isRequired,\r\n//   method: PropTypes.oneOf(['get', 'delete', 'post', 'put']).isRequired,\r\n//   body: PropTypes.object,\r\n//   contentTypeReceive: PropTypes.string,\r\n//   mode: PropTypes.string,\r\n//   headers: PropTypes.object,\r\n//   contentTypeServer: PropTypes.string\r\n// };\r\n\r\nexport default GenericService;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\seatChart\\seat\\SeatInfoModal.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\dateTimePicker\\DateTimePicker.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\select\\Select.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\file\\File.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\label\\Label.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\textarea\\Textarea.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\text\\Text.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\checkbox\\Checkbox.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\checkboxGroup\\CheckboxGroup.js",["702","703"],"/*\r\n *\r\n *  * All Application code is Copyright 2016, The Department of Homeland Security (DHS), U.S. Customs and Border Protection (CBP).\r\n *  *\r\n *  * Please see LICENSE.txt for details.\r\n *\r\n */\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport GroupCheckBox from \"./GroupCheckBox\";\r\nimport LabelledInputDisplayWrapper from \"../LabelledInputDecorator\";\r\nimport { roles } from \"../../../services/serviceWrapper\";\r\n\r\nconst CheckboxGroup = props => {\r\n  const [values, setValues] = useState([...props.inputVal]);\r\n\r\n  const handleFieldChange = id => {\r\n    const newValues = [...values];\r\n    newValues[id] = { ...newValues[id], checked: !newValues[id].checked };\r\n    setValues(newValues);\r\n    const filterFormUpdate = {\r\n      name: props.name,\r\n      value: newValues\r\n    };\r\n    props.callback(filterFormUpdate);\r\n  };\r\n\r\n  //This is to load init values into the form the checkbox belongs to. i.e. default check values\r\n  const init = () => {\r\n    const filterFormUpdate = {\r\n      name: props.name,\r\n      value: values\r\n    };\r\n    props.callback(filterFormUpdate);\r\n  };\r\n\r\n  //This is to trigger initial form state for default values. Otherwise they're empty if no change is ever made.\r\n  useEffect(() => {\r\n    if (typeof values != \"undefined\" && values.length >= 0) {\r\n      init();\r\n    }\r\n  }, []);\r\n\r\n  let theCheckboxes = values.map((checkBox, index) => {\r\n    return (\r\n      <GroupCheckBox\r\n        key={index}\r\n        id={index}\r\n        name={checkBox.label}\r\n        type={checkBox.type}\r\n        onChange={handleFieldChange}\r\n        value={checkBox.checked}\r\n        checked={checkBox.checked}\r\n        disabled={checkBox.disabled}\r\n      />\r\n    );\r\n  });\r\n  // useful debugging statement: <pre>{JSON.stringify(values, null, 2)}</pre>\r\n  return <div>{theCheckboxes}</div>;\r\n};\r\n\r\nexport default LabelledInputDisplayWrapper(CheckboxGroup);\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\addToWatchList\\AddToWatchlist.js",["704"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, Container, Alert } from \"react-bootstrap\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport LabelledInput from \"../../../components/labelledInput/LabelledInput\";\r\nimport RoleAuthenticator from \"../../../context/roleAuthenticator/RoleAuthenticator\";\r\nimport { ROLE } from \"../../../utils/constants\";\r\nimport { addWLItems, hitcats } from \"../../../services/serviceWrapper\";\r\n\r\nimport { asArray } from \"../../../utils/utils\";\r\nimport Modal, {\r\n  ModalBody,\r\n  ModalHeader,\r\n  ModalTitle\r\n} from \"../../../components/modal/Modal\";\r\n\r\nconst AddToWatchlist = props => {\r\n  const cb = () => {};\r\n  const [show, setShow] = useState(false);\r\n  const [wlCategories, setWlCategories] = useState([]);\r\n  const passenger = props.watchlistItems.passenger;\r\n  const documents = props.watchlistItems.documents;\r\n\r\n  const handleClose = (status, res) => {\r\n    setShow(false);\r\n  };\r\n  const handleShow = () => setShow(true);\r\n\r\n  const paramCallback = fields => {\r\n    const categoryId = fields[0][\"categoryId\"];\r\n    const paxWatchlistItems = getPaxWatchlistItems(categoryId);\r\n    const docWatchlistItems = getDocWatchlistItems(categoryId);\r\n\r\n    const watchlistItems = {\r\n      passenger: paxWatchlistItems,\r\n      documents: docWatchlistItems\r\n    };\r\n    return [watchlistItems];\r\n  };\r\n\r\n  const getPaxWatchlistItems = categoryId => {\r\n    return {\r\n      action: \"Create\",\r\n      id: null,\r\n      wlItems: [\r\n        {\r\n          firstName: passenger?.firstName,\r\n          lastName: passenger?.lastName,\r\n          dob: passenger?.dob,\r\n          categoryId: categoryId,\r\n          id: null\r\n        }\r\n      ]\r\n    };\r\n  };\r\n\r\n  const getDocWatchlistItems = categoryId => {\r\n    const docWatchlistItems = { action: \"Create\", id: null, wlItems: [] };\r\n    asArray(documents).forEach(doc => {\r\n      const item = {\r\n        documentType: doc.documentType,\r\n        documentNumber: doc.documentNumber,\r\n        categoryId: categoryId,\r\n        id: null\r\n      };\r\n      docWatchlistItems.wlItems.push(item);\r\n    });\r\n    return docWatchlistItems;\r\n  };\r\n\r\n  useEffect(() => {\r\n    hitcats.get().then(res => {\r\n      const wlc = asArray(res).map(wl => {\r\n        return {\r\n          label: wl.label,\r\n          value: wl.id,\r\n          key: wl.id\r\n        };\r\n      });\r\n      setWlCategories(wlc);\r\n    });\r\n  }, []);\r\n\r\n  const launcher = props.icon ? (\r\n    <div onClick={handleShow}>\r\n      <i className=\"fa fa-eye\"></i>\r\n    </div>\r\n  ) : (\r\n    <div className=\"dropdown-item\" onClick={handleShow}>\r\n      <Xl8 xid=\"atw001\">Add to Watchlist</Xl8>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <RoleAuthenticator roles={[ROLE.ADMIN, ROLE.WLMGR]} alt={<></>}>\r\n      {launcher}\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        size=\"md\"\r\n        centered\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        className=\"max-500-width-container\"\r\n      >\r\n        <ModalHeader closeButton>\r\n          <ModalTitle>\r\n            <Xl8 xid=\"atw002\">Add Passenger/Document to Watchlist</Xl8>\r\n          </ModalTitle>\r\n        </ModalHeader>\r\n\r\n        <ModalBody>\r\n          <Container fluid>\r\n            <Form\r\n              submitService={addWLItems.post}\r\n              submitText={<Xl8 xid=\"atw003\">Add to Watchlist</Xl8>}\r\n              title=\"\"\r\n              callback={handleClose}\r\n              action=\"add\"\r\n              cancellable\r\n              paramCallback={paramCallback}\r\n            >\r\n              <LabelledInput\r\n                datafield\r\n                labelText={<Xl8 xid=\"atw004\">Category ID:</Xl8>}\r\n                inputType=\"select\"\r\n                options={wlCategories}\r\n                name=\"categoryId\"\r\n                required={true}\r\n                alt=\"Category ID\"\r\n                callback={cb}\r\n              />\r\n              <Alert variant=\"warning\">\r\n                <Xl8 xid=\"atw005\">\r\n                  This will add the following passenger and their applicable documents to\r\n                  the watchlist:\r\n                </Xl8>\r\n                {passenger?.firstName} {passenger?.lastName}\r\n              </Alert>\r\n            </Form>\r\n          </Container>\r\n        </ModalBody>\r\n      </Modal>\r\n    </RoleAuthenticator>\r\n  );\r\n};\r\n\r\nexport default AddToWatchlist;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\stepper\\Stepper.js",["705"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./Stepper.scss\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Row, Container } from \"react-bootstrap\";\r\nconst Stepper = props => {\r\n  const raw = props.steps || [];\r\n\r\n  const isActive = dt => {\r\n    return new Date(dt) < Date.now();\r\n  };\r\n  const getTidyFlightLegData = () => {\r\n    raw.sort((fl1, fl2) => {\r\n      if (fl1.legNumber < fl2.legNumber) return -1;\r\n      if (fl1.legNumber > fl2.legNumber) return 1;\r\n      else return 0;\r\n    });\r\n\r\n    let completeLeg = [];\r\n    raw.forEach(leg => {\r\n      if (completeLeg.length === 0) {\r\n        completeLeg.push({\r\n          label: leg.originAirport,\r\n          new: false,\r\n          active: isActive(leg.etd)\r\n        });\r\n      } else if (completeLeg[completeLeg.length - 1].label !== leg.originAirport) {\r\n        completeLeg.push({\r\n          label: leg.originAirport,\r\n          new: true,\r\n          active: isActive(leg.etd)\r\n        });\r\n      }\r\n\r\n      completeLeg.push({\r\n        label: leg.destinationAirport,\r\n        new: false,\r\n        active: isActive(leg.eta)\r\n      });\r\n    });\r\n\r\n    return completeLeg;\r\n  };\r\n\r\n  const [steps, setSteps] = useState();\r\n\r\n  const getClassName = elem => {\r\n    const active = elem.active ? \"active\" : \"\";\r\n    const newsegment = elem.new ? \"new-segment\" : \"\";\r\n    return `${active} ${newsegment}`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSteps(getTidyFlightLegData());\r\n  }, []);\r\n\r\n  return (\r\n    <Row>\r\n      {(steps || []).length > 0 && (\r\n        <Container className=\"stepper-container\" fluid>\r\n          <ul className=\"stepper\">\r\n            {steps.map((step, index) => (\r\n              <li\r\n                className={getClassName(step)}\r\n                style={{ width: 100 / steps.length + \"%\" }}\r\n                key={index}\r\n              >\r\n                {step.label}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </Container>\r\n      )}\r\n    </Row>\r\n  );\r\n};\r\nStepper.propTypes = {\r\n  steps: PropTypes.array\r\n};\r\nexport default Stepper;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\createManualHit\\CreateManualHit.js",["706"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport LabelledInput from \"../../../components/labelledInput/LabelledInput\";\r\nimport RoleAuthenticator from \"../../../context/roleAuthenticator/RoleAuthenticator\";\r\nimport { asArray } from \"../../../utils/utils\";\r\nimport { ROLE } from \"../../../utils/constants\";\r\nimport { manualHit, hitcats } from \"../../../services/serviceWrapper\";\r\nimport Modal, {\r\n  ModalBody,\r\n  ModalHeader,\r\n  ModalTitle\r\n} from \"../../../components/modal/Modal\";\r\n\r\nconst CreateManualHit = props => {\r\n  const cb = () => {};\r\n  const [show, setShow] = useState(false);\r\n  const [wlCategories, setWlCategories] = useState([]);\r\n  const paxId = props.paxId;\r\n  const flightId = props.flightId;\r\n\r\n  const handleClose = (status, res) => {\r\n    setShow(false);\r\n    props.callback(Date.now());\r\n  };\r\n  const handleShow = () => setShow(true);\r\n\r\n  useEffect(() => {\r\n    hitcats.get().then(res => {\r\n      const wlc = asArray(res).map(wl => {\r\n        return {\r\n          label: wl.label,\r\n          value: wl.id,\r\n          key: wl.id\r\n        };\r\n      });\r\n      setWlCategories(wlc);\r\n    });\r\n  }, []);\r\n\r\n  const launcher = props.icon ? (\r\n    <div onClick={handleShow}>\r\n      <i className=\"fa fa-flag\"></i>\r\n    </div>\r\n  ) : (\r\n    <div className=\"dropdown-item\" onClick={handleShow}>\r\n      <Xl8 xid=\"cmh001\">Create Manual Hit</Xl8>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <RoleAuthenticator roles={[ROLE.ADMIN, ROLE.HITMGR]} alt={<></>}>\r\n      {launcher}\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        size=\"md\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        className=\"max-500-width-container\"\r\n        centered\r\n      >\r\n        <ModalHeader closeButton>\r\n          <ModalTitle>\r\n            <Xl8 xid=\"cmh001\">Create Manual Hit</Xl8>\r\n          </ModalTitle>\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Form\r\n            title=\"\"\r\n            submitService={manualHit.post}\r\n            callback={handleClose}\r\n            action=\"add\"\r\n            id=\"createManualHit\"\r\n            cancellable\r\n          >\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"cmh002\">Passenger ID:</Xl8>}\r\n              inputType=\"text\"\r\n              name=\"paxId\"\r\n              inputVal={paxId || \"\"}\r\n              alt=\"nothing\"\r\n              readOnly={true}\r\n              spacebetween\r\n              callback={cb}\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"cmh003\">Flight ID:</Xl8>}\r\n              inputType=\"text\"\r\n              name=\"flightId\"\r\n              inputVal={flightId || \"\"}\r\n              alt={<Xl8 xid=\"2\">Flight ID:</Xl8>}\r\n              callback={cb}\r\n              readOnly={true}\r\n              spacebetween\r\n            />\r\n            <LabelledInput\r\n              inputType=\"select\"\r\n              labelText={<Xl8 xid=\"cmh004\">Hit Category:</Xl8>}\r\n              name=\"hitCategoryId\"\r\n              alt={<Xl8 xid=\"2\">Hit Category:</Xl8>}\r\n              datafield\r\n              required\r\n              callback={cb}\r\n              options={wlCategories}\r\n              spacebetween\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              labelText={<Xl8 xid=\"cmh005\">Description:</Xl8>}\r\n              inputType=\"text\"\r\n              name=\"description\"\r\n              required=\"\"\r\n              inputVal=\"\"\r\n              alt={<Xl8 xid=\"2\">Description:</Xl8>}\r\n              callback={cb}\r\n              spacebetween\r\n            />\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    </RoleAuthenticator>\r\n  );\r\n};\r\nCreateManualHit.propTypes = {\r\n  paxId: PropTypes.string,\r\n  flightId: PropTypes.string,\r\n  callback: PropTypes.func\r\n};\r\n\r\nexport default CreateManualHit;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\changeHitStatus\\ChangeHitStatus.js",["707","708"],"import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { SplitButton, Dropdown, Button } from \"react-bootstrap\";\r\nimport RoleAuthenticator from \"../../../context/roleAuthenticator/RoleAuthenticator\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport { ROLE } from \"../../../utils/constants\";\r\nimport Modal, {\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader\r\n} from \"../../../components/modal/Modal\";\r\n\r\nconst ChangeHitStatus = props => {\r\n  const [show, setShow] = useState(false);\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  const handleCancel = () => {\r\n    props.updateStatus(status, false);\r\n    setShow(false);\r\n  };\r\n  const handleConfirm = () => {\r\n    props.updateStatus(status, true);\r\n    setShow(false);\r\n  };\r\n  const nextStatus = props.hasOpenHit ? \"REVIEWED\" : \"Re_Opened\";\r\n\r\n  const changeHitStatusText = props.hasOpenHit ? (\r\n    <Xl8 xid=\"chs006\">Set to REVIEWED</Xl8>\r\n  ) : (\r\n    <Xl8 xid=\"chs007\">Set to RE-OPENED</Xl8>\r\n  );\r\n\r\n  const handleShow = () => {\r\n    if (show) return setShow(false);\r\n\r\n    setShow(true);\r\n    setStatus(nextStatus);\r\n  };\r\n\r\n  const launcher = props.icon ? (\r\n    <div onClick={handleShow}>\r\n      <i className=\"fa fa-check-square-o\" />\r\n    </div>\r\n  ) : (\r\n    <div className=\"dropdown-item\" onClick={handleShow}>\r\n      {changeHitStatusText}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <RoleAuthenticator roles={[ROLE.ADMIN, ROLE.HITMGR]} alt={<></>}>\r\n      {launcher}\r\n\r\n      <Modal show={show} onHide={handleCancel} centered>\r\n        <ModalHeader closeButton>\r\n          <Xl8 xid=\"chs004\">Update Hit Status</Xl8>\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Xl8 xid=\"chs005\">Please click confirm to change the status to:</Xl8> {status}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button variant=\"outline-success\" onClick={handleConfirm}>\r\n            Confirm\r\n          </Button>\r\n          <Button variant=\"outline-danger\" onClick={handleCancel}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </RoleAuthenticator>\r\n  );\r\n};\r\n\r\nChangeHitStatus.propTypes = {\r\n  updateStatus: PropTypes.func,\r\n  hasOpenHit: PropTypes.bool\r\n};\r\n\r\nexport default ChangeHitStatus;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\notification\\Notification.js",["709"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Container } from \"react-bootstrap\";\r\nimport { notification, usersemails } from \"../../../services/serviceWrapper\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport LabelledInput from \"../../../components/labelledInput/LabelledInput\";\r\nimport { alt, asArray, hasData } from \"../../../utils/utils\";\r\nimport \"./Notification.scss\";\r\nimport Modal, {\r\n  ModalBody,\r\n  ModalHeader,\r\n  ModalTitle\r\n} from \"../../../components/modal/Modal\";\r\nimport ErrorText from \"../../../components/errorText/ErrorText\";\r\n\r\nconst Notification = props => {\r\n  const cb = result => {};\r\n  const [show, setShow] = useState(false);\r\n  const [usersEmails, setUsersEmails] = useState(props.usersEmails);\r\n  const [showAlerText, setShowAlertText] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n  const paxId = props.paxId;\r\n\r\n  const paramCallback = params => {\r\n    const fields = params[0];\r\n    const externalUserEmails = alt(fields[\"externalUsersEmail\"])\r\n      .replace(/[, ;]/g, \" \")\r\n      .split(\" \")\r\n      .filter(Boolean);\r\n\r\n    const selectedUserEmails = asArray(fields[\"to\"]).map(email => email.value);\r\n    const allEmails = selectedUserEmails.concat(externalUserEmails);\r\n\r\n    const emailData = {\r\n      note: fields[\"note\"] ? fields[\"note\"] : \"\",\r\n      paxId: paxId,\r\n      to: allEmails\r\n    };\r\n    return [emailData];\r\n  };\r\n\r\n  const validateInputs = inputs => {\r\n    const hasValidEmails = hasData(inputs[0][\"to\"]);\r\n\r\n    if (!hasValidEmails) setShowAlertText(true);\r\n    else setShowAlertText(false);\r\n    return hasValidEmails;\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (!props.usersEmails) {\r\n      usersemails.get().then(res => {\r\n        if (isMounted) {\r\n          setUsersEmails(res);\r\n        }\r\n      });\r\n    }\r\n    return () => (isMounted = false); //clean up\r\n  }, []);\r\n\r\n  const emialOptions = asArray(usersEmails).map(email => {\r\n    return {\r\n      label: email.username,\r\n      value: email.email\r\n    };\r\n  });\r\n\r\n  const launcher = props.icon ? (\r\n    <div onClick={handleShow}>\r\n      <i className=\"fa fa-bullhorn\"></i>\r\n    </div>\r\n  ) : (\r\n    <div className=\"dropdown-item\" onClick={handleShow}>\r\n      <Xl8 xid=\"not001\">Notify</Xl8>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {launcher}\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        size=\"md\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        className=\"max-500-width-container\"\r\n      >\r\n        <ModalHeader closeButton>\r\n          <ModalTitle>\r\n            <Xl8 xid=\"not002\">Notify Users</Xl8>\r\n          </ModalTitle>\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Container fluid>\r\n            {showAlerText && (\r\n              <ErrorText\r\n                message={\r\n                  <Xl8 xid=\"not007\">\r\n                    No user is selected, or external email address is provided! Please\r\n                    select users from the current user group or add external user.\r\n                  </Xl8>\r\n                }\r\n              />\r\n            )}\r\n            <Form\r\n              title=\"\"\r\n              submitText={<Xl8 xid=\"not003\">Notify</Xl8>}\r\n              submitService={notification.post}\r\n              callback={handleClose}\r\n              action=\"add\"\r\n              id=\"notificationmodal\"\r\n              afterProcessed={handleClose}\r\n              paramCallback={paramCallback}\r\n              validateInputs={validateInputs}\r\n              cancellable\r\n            >\r\n              <LabelledInput\r\n                name=\"to\"\r\n                datafield=\"to\"\r\n                labelText={<Xl8 xid=\"not004\">Users in current group:</Xl8>}\r\n                inputType=\"multiSelect\"\r\n                inputVal={[]}\r\n                options={emialOptions}\r\n                callback={cb}\r\n                alt={<Xl8 xid=\"not004\">Users in current group:</Xl8>}\r\n              />\r\n\r\n              <LabelledInput\r\n                inputType=\"text\"\r\n                alt=\"nothing\"\r\n                name=\"externalUsersEmail\"\r\n                labelText={<Xl8 xid=\"not005\">External user emails:</Xl8>}\r\n                placeholder=\"email@example.com\"\r\n                datafield\r\n                inputVal=\"\"\r\n                callback={cb}\r\n              />\r\n\r\n              <LabelledInput\r\n                inputType=\"textarea\"\r\n                labelText={<Xl8 xid=\"not006\">Notes</Xl8>}\r\n                name=\"note\"\r\n                datafield=\"note\"\r\n                inputVal=\"\"\r\n                callback={cb}\r\n              />\r\n            </Form>\r\n          </Container>\r\n        </ModalBody>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\paxDetail\\downloadReports\\DownloadReports.js",["710"],"import React from \"react\";\r\nimport { paxdetailsReport } from \"../../../services/serviceWrapper\";\r\nimport Xl8 from \"../../../components/xl8/Xl8\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst DownloadReport = props => {\r\n  const download = () => {\r\n    paxdetailsReport.get(props.paxId, props.flightId).then(res => {\r\n      if (res) {\r\n        let data = new Uint8Array(res);\r\n        let blob = new Blob([data], { type: \"application/pdf\" });\r\n        let url = window.URL.createObjectURL(blob);\r\n        let a = window.document.createElement(\"a\");\r\n        a.href = url;\r\n        a.download = \"gtas_event_report\";\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n      } else {\r\n        console.log(\"ERROR! Error in generating GTAS Event Report. No data was retured\");\r\n      }\r\n    });\r\n  };\r\n\r\n  const launcher = props.icon ? (\r\n    <div onClick={download}>\r\n      <i className=\"fa fa-download\"></i>\r\n    </div>\r\n  ) : (\r\n    <div className=\"dropdown-item\" onClick={download}>\r\n      <Xl8 xid=\"rep001\">Download Report</Xl8>\r\n    </div>\r\n  );\r\n\r\n  return launcher;\r\n};\r\n\r\nexport default DownloadReport;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\eventNotesModal\\EventNotesModal.js",["711"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { paxEventNotesHistory, notetypes } from \"../../services/serviceWrapper\";\r\nimport Form from \"../../components/form/Form\";\r\nimport LabelledInput from \"../../components/labelledInput/LabelledInput\";\r\nimport { asArray, hasData } from \"../../utils/utils\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport Modal, { ModalBody, ModalHeader, ModalTitle } from \"../../components/modal/Modal\";\r\n\r\nconst EventNotesModal = props => {\r\n  const [show, setShow] = useState(false);\r\n  const [notTypes, setNoteTypes] = useState([]);\r\n\r\n  const handleClose = (status, res) => {\r\n    setShow(false);\r\n    if (hasData(props.callback)) props.callback(status, res);\r\n  };\r\n  const handleShow = () => setShow(true);\r\n  const paxId = props.paxId;\r\n\r\n  useEffect(() => {\r\n    notetypes.get().then(types => {\r\n      const nTypes = [];\r\n      asArray(types).forEach(type => {\r\n        if (type.noteType !== \"DELETED\") {\r\n          nTypes.push({\r\n            value: `{\"id\":\"${type.id}\", \"noteType\":\"${type.noteType}\"}`,\r\n            label: type.noteType\r\n          });\r\n        }\r\n      });\r\n\r\n      setNoteTypes(nTypes);\r\n    });\r\n  }, []);\r\n\r\n  const launcher = props.icon ? (\r\n    <div onClick={handleShow}>\r\n      <i className=\"fa fa-edit\"></i>\r\n    </div>\r\n  ) : (\r\n    <div className=\"dropdown-item\" onClick={handleShow}>\r\n      <Xl8 xid=\"evn001\">Add Event Notes</Xl8>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {launcher}\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        size=\"md\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        className=\"max-500-width-container\"\r\n      >\r\n        <ModalHeader closeButton>\r\n          <ModalTitle>\r\n            <Xl8 xid=\"evn002\">Add Event Notes</Xl8>\r\n          </ModalTitle>\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Form\r\n            title=\"\"\r\n            submitText={<Xl8 xid=\"evn003\">Save</Xl8>}\r\n            submitService={paxEventNotesHistory.post}\r\n            callback={handleClose}\r\n            action=\"add\"\r\n            id=\"evennoteform\"\r\n            afterProcessed={handleClose}\r\n            recordId={paxId}\r\n            cancellable\r\n          >\r\n            <LabelledInput\r\n              inputType=\"select\"\r\n              alt=\"Choose not type\"\r\n              name=\"noteType\"\r\n              labelText={<Xl8 xid=\"evn004\">Note Type</Xl8>}\r\n              datafield=\"noteType\"\r\n              required=\"required\"\r\n              options={notTypes}\r\n            />\r\n            <LabelledInput\r\n              inputType=\"textarea\"\r\n              labelText={<Xl8 xid=\"evn001\">Notes</Xl8>}\r\n              name=\"plainTextNote\"\r\n              alt={<Xl8 xid=\"11\">Notes</Xl8>}\r\n              datafield=\"plainTextNote\"\r\n              required=\"required\"\r\n              inputVal=\"\"\r\n            />\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nEventNotesModal.propTypes = {\r\n  callback: PropTypes.func,\r\n  paxId: PropTypes.string\r\n};\r\nexport default EventNotesModal;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\paxInfo\\PaxInfo.js",["712"],"import React, { useEffect, useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\n\r\nimport {\r\n  hasData,\r\n  localeDateOnly,\r\n  localeDate,\r\n  localeMonthDayTime,\r\n  passengerTypeMapper\r\n} from \"../../utils/utils\";\r\nimport { Link } from \"@reach/router\";\r\nimport \"./PaxInfo.scss\";\r\n\r\nconst PaxInfo = props => {\r\n  const getPaxInfo = res => {\r\n    // const lastPnrRecieved = hasData(res.pnrVo?.transmissionDate)\r\n    //   ? Date.parse(res.pnrVo?.transmissionDate)\r\n    //   : undefined;\r\n    // const lastApisRecieved = hasData(res.apisMessageVo?.transmissionDate)\r\n    //   ? Date.parse(res.apisMessageVo?.transmissionDate)\r\n    //   : undefined;\r\n    // const dob = Date.parse(res.dob);\r\n\r\n    const apisrec = hasData(res.lastApisReceived)\r\n      ? {\r\n          label: <Xl8 xid=\"pd018\">Last APIS Received</Xl8>,\r\n          value: localeMonthDayTime(res.lastApisReceived)\r\n        }\r\n      : {};\r\n\r\n    const pnrrec = hasData(res.lastPnrReceived)\r\n      ? {\r\n          label: <Xl8 xid=\"pd017\">Last PNR Received</Xl8>,\r\n          value: localeMonthDayTime(res.lastPnrReceived)\r\n        }\r\n      : {};\r\n    return [\r\n      {\r\n        label: <Xl8 xid=\"pd007\">Last Name</Xl8>,\r\n        value: res.lastName\r\n      },\r\n      { label: <Xl8 xid=\"pd008\">First Name</Xl8>, value: res.firstName },\r\n      { label: <Xl8 xid=\"pd009\">Middle Name</Xl8>, value: res.middleName },\r\n      { label: <Xl8 xid=\"pd010\">Age</Xl8>, value: res.age },\r\n      { label: <Xl8 xid=\"pd011\">DOB</Xl8>, value: localeDateOnly(Date.parse(res.dob)) },\r\n      { label: <Xl8 xid=\"pd012\">Gender</Xl8>, value: res.gender },\r\n      { label: <Xl8 xid=\"pd013\">Nationality</Xl8>, value: res.nationality },\r\n      { label: <Xl8 xid=\"pd014\">Residence</Xl8>, value: res.residenceCountry },\r\n      {\r\n        label: <Xl8 xid=\"pd015\">Seat</Xl8>,\r\n        value: (\r\n          <Link\r\n            to={`/gtas/seat-chart/${res.flightId}/${res.paxId}/${res.seat}`}\r\n            className=\"pax-info-link\"\r\n            state={{\r\n              arrival: res.eta,\r\n              departure: res.etd,\r\n              flightId: res.flightId,\r\n              flightNumber: res.flightNumber\r\n            }}\r\n          >\r\n            {res.seat}\r\n          </Link>\r\n        )\r\n      },\r\n      {\r\n        label: <Xl8 xid=\"pd016\">Passenger Type</Xl8>,\r\n        value: passengerTypeMapper(res.passengerType)\r\n      },\r\n      pnrrec,\r\n      apisrec\r\n    ];\r\n  };\r\n\r\n  const [tableRows, setTableRows] = useState();\r\n\r\n  useEffect(() => {\r\n    if (!hasData(props.pax)) {\r\n      setTableRows([]);\r\n      return;\r\n    }\r\n\r\n    const pax = getPaxInfo(props.pax);\r\n    const paxdata = pax.map(({ label, value }) => {\r\n      const row = (\r\n        <tr key={label?.props?.xid} className=\"pax-info-row\">\r\n          <td className=\"left-label\">{label}</td>\r\n          <td className=\"right-label\">{value}</td>\r\n        </tr>\r\n      );\r\n      return row;\r\n    }, []);\r\n    setTableRows(paxdata);\r\n  }, [props.pax]);\r\n\r\n  return (\r\n    <>\r\n      <Table size=\"sm\" borderless>\r\n        <tbody key={tableRows}>{tableRows}</tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PaxInfo;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\tabs\\Tabs.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\vetting\\biographicInfo\\BiographicInfo.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\raqb\\constants.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\raqb\\RAQB.js",["713"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Query,\r\n  Builder,\r\n  BasicConfig,\r\n  Utils as QbUtils\r\n} from \"react-awesome-query-builder\";\r\nimport \"react-awesome-query-builder/lib/css/styles.css\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport { operators } from \"./config\";\r\nimport { importToTreeObject, exportToQueryObject } from \"./utils\";\r\n\r\nconst additionalOperators = [\r\n  \"equal\",\r\n  \"not_equal\",\r\n  \"is_empty\",\r\n  \"is_not_empty\",\r\n  \"like\",\r\n  \"not_like\",\r\n  \"starts_with\",\r\n  \"not_starts_with\",\r\n  \"not_ends_with\",\r\n  \"ends_with\",\r\n  \"in\",\r\n  \"not_in\"\r\n];\r\n\r\nlet queryValue = {\r\n  id: QbUtils.uuid(),\r\n  type: \"group\"\r\n};\r\n\r\n// let outer = {\r\n//   type: \"rule\",\r\n//   properties: { field: null, operator: null, value: [], valueSrc: [] }\r\n// };\r\n\r\n// queryValue.children1[QbUtils.uuid()] = outer;\r\n\r\nconst RAQB = props => {\r\n  const dataConfig = props.config;\r\n  let initconfig = { ...BasicConfig, ...dataConfig };\r\n  initconfig.operators = { ...operators };\r\n  initconfig.types.text.widgets.text.operators = additionalOperators;\r\n  initconfig.settings.addRuleLabel = <Xl8 xid=\"raqb001\">Add Condition</Xl8>;\r\n  initconfig.settings.addGroupLabel = <Xl8 xid=\"raqb002\">Add Group</Xl8>;\r\n  initconfig.settings.showNot = true;\r\n  initconfig.conjunctions[\"AND\"].label = <Xl8 xid=\"raqb003\">And</Xl8>;\r\n  initconfig.conjunctions[\"OR\"].label = <Xl8 xid=\"raqb004\">OR</Xl8>;\r\n\r\n  const convertedInput = props.data ? importToTreeObject(props.data) : queryValue;\r\n  const inputTree = QbUtils.checkTree(QbUtils.loadTree(convertedInput), initconfig);\r\n  const [tree, setTree] = useState(inputTree);\r\n  const [config] = useState(initconfig);\r\n\r\n  const renderBuilder = props => (\r\n    <div className=\"query-builder-container\" style={{ padding: \"10px\" }}>\r\n      <div className=\"query-builder\">\r\n        <Builder {...props} />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // const renderResult = ({ tree: immutableTree, config }) => (\r\n  //   <div className=\"query-builder-result\">\r\n  //     <div>\r\n  //       <pre>{JSON.stringify(QbUtils.getTree(immutableTree, config))}</pre>\r\n  //     </div>\r\n  //     <div>\r\n  //       Query string:{\" \"}\r\n  //       <pre>{JSON.stringify(QbUtils.queryString(immutableTree, config))}</pre>\r\n  //     </div>\r\n  //   </div>\r\n  // );\r\n\r\n  const onChange = (immutableTree, cfg) => {\r\n    setTree(immutableTree);\r\n    const exportedObj = exportToQueryObject(QbUtils.getTree(immutableTree, config), true);\r\n\r\n    props.dataCallback(exportedObj);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Query {...config} value={tree} onChange={onChange} renderBuilder={renderBuilder} />\r\n      {/* {renderResult({ tree: tree, config: config })} */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RAQB;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\overlay\\Overlay.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\graph\\structure.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\services\\configService.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\LabelledInputDecorator.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\inputs\\checkboxGroup\\GroupCheckBox.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\raqb\\utils.js",["714"],"import { Utils as QbUtils } from \"react-awesome-query-builder\";\r\nimport { hasData, asHash53 } from \"../../utils/utils\";\r\nimport { operatorMap, valueTypeMap, ENTITIESEXT, QB } from \"./constants\";\r\n\r\n// import raw QueryObject from the DB and convert it to a jsontree object for the RAQB component.\r\nexport const importToTreeObject = raw => {\r\n  if (!hasData(raw)) return {};\r\n\r\n  if (isImportGroup(raw)) return importGroup(raw);\r\n\r\n  return importRule(raw);\r\n};\r\n\r\nconst isImportGroup = raw => {\r\n  return raw.hasOwnProperty(QB.CLASS) && raw[QB.CLASS].endsWith(QB.QUERYOBJECT);\r\n};\r\n\r\nconst importGroup = raw => {\r\n  let group = {};\r\n  let resultObj = {};\r\n\r\n  if (raw[QB.CLASS] === QB.QOTYPEFULL) group.id = QbUtils.uuid();\r\n  group.type = QB.GROUP;\r\n  group.properties = { conjunction: raw.condition };\r\n\r\n  const rules = raw.rules.map(item => importToTreeObject(item)); //recurse back to the parent fxn\r\n\r\n  rules.forEach(item => (resultObj[QbUtils.uuid()] = item));\r\n\r\n  group.children1 = resultObj;\r\n  return group;\r\n};\r\n\r\n/**\r\n * Import the rule part of a raw QueryObject\r\n */\r\nconst importRule = raw => {\r\n  const types = getEntityProps(raw.entity, raw.field, raw.operator, undefined, true);\r\n  const op = operatorMap[types?.operator || raw.operator];\r\n  const isMulti = isMultivalueOperator(op);\r\n\r\n  let type = valueTypeMap[types?.type] || \"NOT_FOUND\";\r\n\r\n  if (type === \"multiselect\" && !isMulti) type = \"select\";\r\n\r\n  const value = getValue(type, raw.value, op);\r\n\r\n  let rule = {};\r\n  let children1 = {};\r\n\r\n  rule.type = QB.RULEGROUP;\r\n  rule.properties = { conjunction: QB.AND, field: raw.entity };\r\n  children1[QbUtils.uuid()] = {\r\n    type: QB.RULE,\r\n    properties: {\r\n      field: `${raw.entity}.${raw.field}`,\r\n      operator: op,\r\n      value: value,\r\n      valueSrc: isMulti ? [\"value\", \"value\"] : [\"value\"],\r\n      valueType: isMulti ? [type, type] : [type]\r\n    }\r\n  };\r\n\r\n  rule.children1 = children1;\r\n  return rule;\r\n};\r\n\r\nexport const exportToQueryObject = (obj, isFirstLevel = false) => {\r\n  if (!obj) return {};\r\n\r\n  if (obj.type === QB.GROUP) {\r\n    return exportGroup(obj, isFirstLevel);\r\n  }\r\n  return exportRule(obj);\r\n};\r\n\r\nconst exportGroup = (raw, isFirstLevel) => {\r\n  let group = {};\r\n  let invalid = [];\r\n  const rulesMap = new Map(Object.entries(raw.children1));\r\n\r\n  group[QB.CLASS] = isFirstLevel ? QB.QOTYPEFULL : QB.QUERYOBJECT;\r\n  group.condition = raw.properties?.conjunction || QB.AND; // the raqb component leaves the conjunction null when there's only a single clause\r\n  group.rules = [];\r\n\r\n  rulesMap.forEach((rule, key) => {\r\n    const exported = exportToQueryObject(rule);\r\n    if (exported.invalid) {\r\n      const keyofInvalidRule =\r\n        exported.invalid === true ? [key] : [...exported.invalid, key];\r\n      invalid.push(...keyofInvalidRule);\r\n    }\r\n    group.rules.push(exported);\r\n  });\r\n\r\n  if (hasData(invalid)) group.invalid = [...invalid];\r\n\r\n  return group;\r\n};\r\n\r\nconst exportRule = raw => {\r\n  let terms = {};\r\n  let invalid = false;\r\n\r\n  try {\r\n    // refac. Need a cleaner way to nav the object\r\n    terms = Object.entries(Object.entries(raw)[2][1])[0][1].properties;\r\n  } catch {}\r\n\r\n  if (!hasData(terms)) return { invalid: true };\r\n\r\n  const entity = raw.properties?.field;\r\n  const field = getFieldPart(terms?.field);\r\n  const operator = operatorMap[terms?.operator];\r\n  const entProps = getEntityProps(entity, field, operator, terms, false) || {};\r\n  const value = getValue(entProps.type, terms?.value, operator, false);\r\n\r\n  const value0 = Array.isArray(value[0]) ? value[0] : value;\r\n\r\n  if (!field || !operator) invalid = true;\r\n  if (operator !== \"IS_NULL\" && operator !== \"NULL\" && !hasData(value0)) invalid = true;\r\n  if ((operator === \"BETWEEN\" || operator === \"NOT_BETWEEN\") && !hasData(value[1]))\r\n    invalid = true;\r\n\r\n  let rule = {\r\n    entity: entity,\r\n    field: field,\r\n    operator: operator,\r\n    value: value,\r\n    uuid: null,\r\n    type: entProps.type\r\n  };\r\n\r\n  if (invalid) rule.invalid = true;\r\n\r\n  rule[QB.CLASS] = QB.QUERYTERM;\r\n\r\n  return rule;\r\n};\r\n\r\n// convert value representations to and from the raqb object and the queryobject\r\n// TODO: refac, maybe restructure with a map of functions so we can drop the if statements.\r\nconst getValue = (type, val, op, isImporting = true) => {\r\n  if (!hasData(val)) return val;\r\n\r\n  let convertedVal = val;\r\n\r\n  if (type === \"boolean\") {\r\n    return isImporting ? [!!+val[0]] : [(+val[0]).toString()]; // convert to t/f if importing, \"0\"/\"1\" if exporting\r\n  }\r\n\r\n  if (type === \"number\") return val.map(item => +item);\r\n\r\n  if (isMultivalueOperator(op)) {\r\n    if (isImporting) return [convertedVal];\r\n    return convertedVal;\r\n  }\r\n\r\n  if (!isImporting && Array.isArray(convertedVal) && Array.isArray(convertedVal[0])) {\r\n    return convertedVal[0];\r\n  }\r\n\r\n  if (\r\n    op &&\r\n    (op.toString().toLowerCase() === \"in\" || op.toString().toLowerCase() === \"not_in\")\r\n  ) {\r\n    if (isImporting) {\r\n      return [convertedVal.join(\", \")];\r\n    } else {\r\n      return (convertedVal[0] || \"\")\r\n        .split(\",\")\r\n        .map(item => item.trim().toUpperCase())\r\n        .filter(Boolean);\r\n    }\r\n  }\r\n\r\n  return convertedVal;\r\n};\r\n\r\nexport const getEntityPart = str => {\r\n  return (str || \"\").split(\".\")[0];\r\n};\r\n\r\nexport const getFieldPart = str => {\r\n  let strarray = (str || \"\").split(\".\");\r\n  delete strarray[0];\r\n\r\n  return strarray.filter(Boolean).join(\".\");\r\n};\r\n\r\n// determine whether the valuesrc and value fields are multival\r\nconst isMultivalueOperator = op => {\r\n  const multivalueOperators = [\r\n    \"not_between\",\r\n    \"between\",\r\n    \"select_not_any_in\",\r\n    \"select_any_in\",\r\n    \"any_in\",\r\n    \"any_not_in\"\r\n  ];\r\n  return multivalueOperators.includes(op);\r\n};\r\n\r\nconst getEntityProps = (entpart, fieldpart, op, terms, isImporting = false) => {\r\n  let externalField = {\r\n    ...ENTITIESEXT[`${entpart}`].find(item => {\r\n      return item.id === fieldpart;\r\n    })\r\n  };\r\n\r\n  if (isImporting && externalField?.select) externalField.type = [\"multiselect\"];\r\n  if (isImporting && externalField?.multival) {\r\n    if (op === \"IN\") externalField.operator = \"to_select_any_in\";\r\n    if (op === \"not_in\") externalField.operator = \"to_select_not_any_in\";\r\n    if (op === \"EQUAL\") externalField.operator = \"to_select_equals\";\r\n    if (op === \"NOT_EQUAL\") externalField.operator = \"to_select_not_equals\";\r\n  }\r\n  return externalField;\r\n};\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\errorText\\ErrorText.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\graph\\utils.js",[],"C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\raqb\\config.js",["715"],"export const operators = {\r\n  equal: {\r\n    label: \"Equals\",\r\n    labelForFormat: \"Equals\",\r\n    sqlOp: \"=\",\r\n    reversedOp: \"not_equal\",\r\n    formatOp: (\r\n      field,\r\n      op,\r\n      value,\r\n      valueSrcs,\r\n      valueTypes,\r\n      opDef,\r\n      operatorOptions,\r\n      isForDisplay,\r\n      fieldDef\r\n    ) => {\r\n      if (valueTypes === \"boolean\" && isForDisplay)\r\n        return value === \"No\" ? `NOT ${field}` : `${field}`;\r\n      else return `${field} ${opDef.label} ${value}`;\r\n    },\r\n    jsonLogic: \"==\"\r\n  },\r\n  not_equal: {\r\n    label: \"Not Equals\",\r\n    labelForFormat: \"Not Equals\",\r\n    sqlOp: \"<>\",\r\n    reversedOp: \"equal\",\r\n    formatOp: (\r\n      field,\r\n      op,\r\n      value,\r\n      valueSrcs,\r\n      valueTypes,\r\n      opDef,\r\n      operatorOptions,\r\n      isForDisplay,\r\n      fieldDef\r\n    ) => {\r\n      if (valueTypes === \"boolean\" && isForDisplay)\r\n        return value === \"No\" ? `${field}` : `NOT ${field}`;\r\n      else return `${field} ${opDef.label} ${value}`;\r\n    },\r\n    jsonLogic: \"!=\"\r\n  },\r\n  less: {\r\n    label: \"<\",\r\n    labelForFormat: \"<\",\r\n    sqlOp: \"<\",\r\n    reversedOp: \"greater_or_equal\",\r\n    jsonLogic: \"<\"\r\n  },\r\n  less_or_equal: {\r\n    label: \"<=\",\r\n    labelForFormat: \"<=\",\r\n    sqlOp: \"<=\",\r\n    reversedOp: \"greater\",\r\n    jsonLogic: \"<=\"\r\n  },\r\n  greater: {\r\n    label: \">\",\r\n    labelForFormat: \">\",\r\n    sqlOp: \">\",\r\n    reversedOp: \"less_or_equal\",\r\n    jsonLogic: \">\"\r\n  },\r\n  greater_or_equal: {\r\n    label: \">=\",\r\n    labelForFormat: \">=\",\r\n    sqlOp: \">=\",\r\n    reversedOp: \"less\",\r\n    jsonLogic: \">=\"\r\n  },\r\n  like: {\r\n    label: \"Contains\",\r\n    labelForFormat: \"Like\",\r\n    reversedOp: \"not_like\",\r\n    sqlOp: \"LIKE\",\r\n    sqlFormatOp: (field, op, values, valueSrc, valueType, opDef, operatorOptions) => {\r\n      if (valueSrc === \"value\") {\r\n        return `${field} LIKE ${values}`;\r\n      } else return undefined; // not supported\r\n    },\r\n    //jsonLogic: (field, op, val) => ({ \"in\": [val, field] }),\r\n    jsonLogic: \"in\",\r\n    _jsonLogicIsRevArgs: true,\r\n    valueSources: [\"value\"]\r\n  },\r\n  not_like: {\r\n    label: \"Doesn't contain\",\r\n    reversedOp: \"like\",\r\n    labelForFormat: \"Not Like\",\r\n    sqlOp: \"NOT LIKE\",\r\n    sqlFormatOp: (field, op, values, valueSrc, valueType, opDef, operatorOptions) => {\r\n      if (valueSrc === \"value\") {\r\n        return `${field} NOT LIKE ${values}`;\r\n      } else return undefined; // not supported\r\n    },\r\n    valueSources: [\"value\"]\r\n  },\r\n  in: {\r\n    label: \"In\",\r\n    labelForFormat: \"In\",\r\n    sqlOp: \"IN\",\r\n    formatOp: (\r\n      field,\r\n      op,\r\n      value,\r\n      valueSrcs,\r\n      valueTypes,\r\n      opDef,\r\n      operatorOptions,\r\n      isForDisplay,\r\n      fieldDef\r\n    ) => `${field} ${opDef.label} ${value}`,\r\n    sqlFormatOp: (field, op, values, valueSrc) => {\r\n      return `${field} IN ${values}`;\r\n    },\r\n    jsonLogic: undefined,\r\n    valueSources: [\"value\"]\r\n  },\r\n  not_in: {\r\n    label: \"Not In\",\r\n    labelForFormat: \"Not In\",\r\n    sqlOp: \"NOT IN\",\r\n    formatOp: (\r\n      field,\r\n      op,\r\n      value,\r\n      valueSrcs,\r\n      valueTypes,\r\n      opDef,\r\n      operatorOptions,\r\n      isForDisplay,\r\n      fieldDef\r\n    ) => `${field} ${opDef.label} ${value}`,\r\n    sqlFormatOp: (field, op, values, valueSrc) => {\r\n      return `${field} NOT IN ${values}`;\r\n    },\r\n    jsonLogic: undefined,\r\n    valueSources: [\"value\"]\r\n  },\r\n  starts_with: {\r\n    label: \"Starts with\",\r\n    labelForFormat: \"Starts with\",\r\n    sqlOp: \"LIKE\",\r\n    sqlFormatOp: (field, op, values, valueSrc, valueType, opDef, operatorOptions) => {\r\n      if (valueSrc === \"value\") {\r\n        return `${field} LIKE ${values}`;\r\n      } else return undefined; // not supported\r\n    },\r\n    jsonLogic: undefined, // not supported\r\n    valueSources: [\"value\"]\r\n  },\r\n  not_starts_with: {\r\n    label: \"Doesn't start with\",\r\n    labelForFormat: \"Doesn't start with\",\r\n    cardinality: 1,\r\n    sqlOp: \"NOT LIKE\",\r\n    sqlFormatOp: (field, op, values) => `${field} NOT LIKE ${values}`,\r\n    jsonLogic: undefined,\r\n    valueSources: [\"value\"]\r\n  },\r\n  ends_with: {\r\n    label: \"Ends with\",\r\n    labelForFormat: \"Ends with\",\r\n    sqlOp: \"LIKE\",\r\n    sqlFormatOp: (field, op, values, valueSrc, valueType, opDef, operatorOptions) => {\r\n      if (valueSrc === \"value\") {\r\n        return `${field} LIKE ${values}`;\r\n      } else return undefined; // not supported\r\n    },\r\n    jsonLogic: undefined, // not supported\r\n    valueSources: [\"value\"]\r\n  },\r\n  not_ends_with: {\r\n    label: \"Doesn't end with\",\r\n    labelForFormat: \"Doesn't end with\",\r\n    sqlOp: \"NOT LIKE\",\r\n    sqlFormatOp: (field, op, values) => `${field} NOT LIKE ${values}`,\r\n    jsonLogic: undefined,\r\n    valueSources: [\"value\"]\r\n  },\r\n  between: {\r\n    label: \"Between\",\r\n    labelForFormat: \"BETWEEN\",\r\n    sqlOp: \"BETWEEN\",\r\n    cardinality: 2,\r\n    formatOp: (\r\n      field,\r\n      op,\r\n      values,\r\n      valueSrcs,\r\n      valueTypes,\r\n      opDef,\r\n      operatorOptions,\r\n      isForDisplay\r\n    ) => {\r\n      let valFrom = values.first();\r\n      let valTo = values.get(1);\r\n      if (isForDisplay) return `${field} >= ${valFrom} AND ${field} <= ${valTo}`;\r\n      else return `${field} >= ${valFrom} && ${field} <= ${valTo}`;\r\n    },\r\n    valueLabels: [\"Value from\", \"Value to\"],\r\n    textSeparators: [null, \"and\"],\r\n    reversedOp: \"not_between\",\r\n    jsonLogic: \"<=\",\r\n    validateValues: values => {\r\n      if (values[0] !== undefined && values[1] !== undefined) {\r\n        return values[0] <= values[1] ? null : \"Invalid range\";\r\n      }\r\n      return null;\r\n    }\r\n  },\r\n  not_between: {\r\n    label: \"Not between\",\r\n    labelForFormat: \"NOT BETWEEN\",\r\n    sqlOp: \"NOT BETWEEN\",\r\n    cardinality: 2,\r\n    valueLabels: [\"Value from\", \"Value to\"],\r\n    textSeparators: [null, \"and\"],\r\n    reversedOp: \"between\",\r\n    validateValues: values => {\r\n      if (values[0] !== undefined && values[1] !== undefined) {\r\n        return values[0] <= values[1] ? null : \"Invalid range\";\r\n      }\r\n      return null;\r\n    }\r\n  },\r\n  is_empty: {\r\n    label: \"Is null\",\r\n    labelForFormat: \"IS NULL\",\r\n    sqlOp: \"IS EMPTY\",\r\n    cardinality: 0,\r\n    reversedOp: \"is_not_empty\",\r\n    formatOp: (\r\n      field,\r\n      op,\r\n      value,\r\n      valueSrc,\r\n      valueType,\r\n      opDef,\r\n      operatorOptions,\r\n      isForDisplay\r\n    ) => {\r\n      return isForDisplay ? `${field} IS NULL` : `!${field}`;\r\n    },\r\n    jsonLogic: \"!\"\r\n  },\r\n  is_not_empty: {\r\n    label: \"Is not null\",\r\n    labelForFormat: \"IS NOT NULL\",\r\n    sqlOp: \"IS NOT NULL\",\r\n    cardinality: 0,\r\n    reversedOp: \"is_empty\",\r\n    formatOp: (\r\n      field,\r\n      op,\r\n      value,\r\n      valueSrc,\r\n      valueType,\r\n      opDef,\r\n      operatorOptions,\r\n      isForDisplay\r\n    ) => {\r\n      return isForDisplay ? `${field} IS NOT NULL` : `!!${field}`;\r\n    },\r\n    jsonLogic: \"!!\"\r\n  },\r\n  select_equals: {\r\n    label: \"Equals\",\r\n    labelForFormat: \"==\",\r\n    sqlOp: \"=\", // enum/set\r\n    formatOp: (\r\n      field,\r\n      op,\r\n      value,\r\n      valueSrc,\r\n      valueType,\r\n      opDef,\r\n      operatorOptions,\r\n      isForDisplay\r\n    ) => {\r\n      return `${field} == ${value}`;\r\n    },\r\n    reversedOp: \"select_not_equals\",\r\n    jsonLogic: \"==\"\r\n  },\r\n  select_not_equals: {\r\n    label: \"Not equals\",\r\n    labelForFormat: \"!=\",\r\n    sqlOp: \"<>\", // enum/set\r\n    formatOp: (\r\n      field,\r\n      op,\r\n      value,\r\n      valueSrc,\r\n      valueType,\r\n      opDef,\r\n      operatorOptions,\r\n      isForDisplay\r\n    ) => {\r\n      return `${field} != ${value}`;\r\n    },\r\n    reversedOp: \"select_equals\",\r\n    jsonLogic: \"!=\"\r\n  },\r\n  select_any_in: {\r\n    label: \"Any in\",\r\n    labelForFormat: \"IN\",\r\n    sqlOp: \"IN\",\r\n    formatOp: (\r\n      field,\r\n      op,\r\n      values,\r\n      valueSrc,\r\n      valueType,\r\n      opDef,\r\n      operatorOptions,\r\n      isForDisplay\r\n    ) => {\r\n      if (valueSrc == \"value\") return `${field} IN (${values.join(\", \")})`;\r\n      else return `${field} IN (${values})`;\r\n    },\r\n    sqlFormatOp: (field, op, values, valueSrc, valueType, opDef, operatorOptions) => {\r\n      return `${field} IN (${values.join(\", \")})`;\r\n    },\r\n    reversedOp: \"select_not_any_in\",\r\n    jsonLogic: \"in\"\r\n  },\r\n  select_not_any_in: {\r\n    label: \"Not in\",\r\n    labelForFormat: \"NOT IN\",\r\n    sqlOp: \"NOT IN\",\r\n    formatOp: (\r\n      field,\r\n      op,\r\n      values,\r\n      valueSrc,\r\n      valueType,\r\n      opDef,\r\n      operatorOptions,\r\n      isForDisplay\r\n    ) => {\r\n      if (valueSrc === \"value\") return `${field} NOT IN (${values.join(\", \")})`;\r\n      else return `${field} NOT IN (${values})`;\r\n    },\r\n    sqlFormatOp: (field, op, values, valueSrc, valueType, opDef, operatorOptions) => {\r\n      return `${field} NOT IN (${values.join(\", \")})`;\r\n    },\r\n    reversedOp: \"select_any_in\"\r\n  },\r\n  multiselect_equals: {\r\n    label: \"Equals\",\r\n    labelForFormat: \"==\",\r\n    sqlOp: \"=\",\r\n    formatOp: (\r\n      field,\r\n      op,\r\n      values,\r\n      valueSrc,\r\n      valueType,\r\n      opDef,\r\n      operatorOptions,\r\n      isForDisplay\r\n    ) => {\r\n      if (valueSrc === \"value\") return `${field} == [${values.join(\", \")}]`;\r\n      else return `${field} == ${values}`;\r\n    },\r\n    reversedOp: \"multiselect_not_equals\",\r\n    jsonLogic2: \"all-in\",\r\n    jsonLogic: (field, op, vals) => ({\r\n      // it's not \"equals\", but \"includes\" operator - just for example\r\n      all: [field, { in: [{ var: \"\" }, vals] }]\r\n    })\r\n  },\r\n  multiselect_not_equals: {\r\n    label: \"Not equals\",\r\n    labelForFormat: \"!=\",\r\n    sqlOp: \"<>\",\r\n    formatOp: (\r\n      field,\r\n      op,\r\n      values,\r\n      valueSrc,\r\n      valueType,\r\n      opDef,\r\n      operatorOptions,\r\n      isForDisplay\r\n    ) => {\r\n      if (valueSrc === \"value\") return `${field} != [${values.join(\", \")}]`;\r\n      else return `${field} != ${values}`;\r\n    },\r\n    reversedOp: \"multiselect_equals\"\r\n  }\r\n};\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\home\\LangModal.js",["716","717","718","719","720","721"],"import React, { useState, useEffect } from \"react\";\r\nimport { Modal, Button, Container, Alert } from \"react-bootstrap\";\r\nimport Form from \"../../components/form/Form\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport { translations } from \"../../services/serviceWrapper\";\r\nimport LabelledInput from \"../../components/labelledInput/LabelledInput\";\r\nimport { ACTION } from \"../../utils/constants\";\r\nimport { hasData } from \"../../utils/utils\";\r\n\r\nconst LangModal = props => {\r\n  const cb = function(result) {};\r\n  const data = props.elem || {};\r\n\r\n  const postSubmit = (status, res) => {\r\n    props.onHide();\r\n    if (status === ACTION.SAVE) window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      onHide={props.onHide}\r\n      size=\"md\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      className=\"max-500-width-container\"\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Edit Translation</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Container fluid>\r\n          <Form\r\n            submitService={translations.post}\r\n            callback={postSubmit}\r\n            action=\"add\"\r\n            cancellable\r\n            cancelText=\"Cancel\"\r\n            submitText=\"Submit\"\r\n            afterProcessed={props.onHide}\r\n          >\r\n            <LabelledInput\r\n              datafield\r\n              labelText=\"Code:\"\r\n              inputVal={data.xid}\r\n              inputType=\"label\"\r\n              required={true}\r\n              readOnly\r\n              name=\"code\"\r\n              alt=\"Translation Code:\"\r\n              callback={cb}\r\n              spacebetween\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              labelText=\"Language:\"\r\n              inputType=\"label\"\r\n              readOnly\r\n              inputVal={window.navigator.language.split(\"-\")[0]}\r\n              name=\"language\"\r\n              alt=\"Language:\"\r\n              callback={cb}\r\n              spacebetween\r\n            />\r\n            <LabelledInput\r\n              labelText=\"Default Text:\"\r\n              inputType=\"label\"\r\n              readOnly\r\n              inputVal={data.orig}\r\n              name=\"default\"\r\n              alt=\"Default Text:\"\r\n              callback={cb}\r\n              spacebetween\r\n            />\r\n            <LabelledInput\r\n              datafield\r\n              labelText=\"Translation:\"\r\n              inputType=\"textarea\"\r\n              inputVal={data.trans}\r\n              name=\"translation\"\r\n              required={true}\r\n              alt=\"Translation:\"\r\n              callback={cb}\r\n              spacebetween\r\n            />\r\n          </Form>\r\n        </Container>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default LangModal;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\pages\\admin\\manageUsers\\changePassword\\ChangePassword.js",["722"],"import React, { useState, useEffect } from \"react\";\r\nimport Form from \"../../../../components/form/Form\";\r\nimport { changePassword } from \"../../../../services/serviceWrapper\";\r\nimport LabelledInput from \"../../../../components/labelledInput/LabelledInput\";\r\nimport { Container, Alert } from \"react-bootstrap\";\r\nimport Title from \"../../../../components/title/Title\";\r\nimport Xl8 from \"../../../../components/xl8/Xl8\";\r\nimport \"./ChangePassword.scss\";\r\nimport { hasData, isValidPassword } from \"../../../../utils/utils\";\r\n\r\nconst ChangePassword = props => {\r\n  const [oldPassword, setOldPassword] = useState();\r\n  const [newPassword, setNewPassword] = useState();\r\n  const [confirmedPassword, setConfirmedPassword] = useState();\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [displayErrorMsg, setDisplayErrorMsg] = useState(false);\r\n  const [style, setStyle] = useState(\"passwords-do-not-match\");\r\n  const chagneByAdmin = hasData(props.userId);\r\n\r\n  const service = chagneByAdmin ? changePassword.byAdmin : changePassword.byloggedInUser;\r\n\r\n  const recordId = props.userId || \"\";\r\n\r\n  const passwordRule = (\r\n    <ul>\r\n      <li style={{ \"list-style-type\": \"none\" }}>\r\n        <h5>\r\n          <Xl8 xid=\"pass014\">Your password should contain:</Xl8>\r\n        </h5>\r\n      </li>\r\n      <li>\r\n        <Xl8 xid=\"pass006\">10 to 20 characters</Xl8>\r\n      </li>\r\n      <li>\r\n        <Xl8 xid=\"pass007\">At least one special character</Xl8> (!@#$%^&?*)\r\n      </li>\r\n      <li>\r\n        <Xl8 xid=\"pass008\">At least one number</Xl8>\r\n      </li>\r\n      <li>\r\n        <Xl8 xid=\"pass009\">At least one letter</Xl8>\r\n      </li>\r\n      <li>\r\n        <Xl8 xid=\"pass010\">At least one upper case character</Xl8>\r\n      </li>\r\n      <li>\r\n        <Xl8 xid=\"pass011\">At least one lower case character</Xl8>\r\n      </li>\r\n    </ul>\r\n  );\r\n\r\n  const passwordsDoNotMatchError = (\r\n    <Xl8 xid=\"pass012\">The Passwords you entered do not match</Xl8>\r\n  );\r\n  const invalidPasswordError = (\r\n    <Xl8 xid=\"pass013\">\r\n      The password you entered does not satisfy the password criteria.\r\n    </Xl8>\r\n  );\r\n\r\n  const showAlert = message => {\r\n    setErrorMessage(message);\r\n    setDisplayErrorMsg(true);\r\n  };\r\n\r\n  const changeInput = input => {\r\n    if (input.name === \"oldPassword\") {\r\n      setOldPassword(input.value);\r\n    }\r\n    if (input.name === \"newPassword\") {\r\n      setNewPassword(input.value);\r\n    }\r\n    if (input.name === \"confirmPassword\") {\r\n      setConfirmedPassword(input.value);\r\n    }\r\n  };\r\n\r\n  const validateInputs = fields => {\r\n    const passwordsMatch = confirmedPassword === newPassword;\r\n    const validPassword = isValidPassword(newPassword);\r\n\r\n    if (!validPassword) {\r\n      showAlert(invalidPasswordError);\r\n    } else if (!passwordsMatch) {\r\n      showAlert(passwordsDoNotMatchError);\r\n    }\r\n\r\n    return passwordsMatch && validPassword;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setDisplayErrorMsg(false);\r\n    if (confirmedPassword?.length >= 10 && confirmedPassword === newPassword) {\r\n      setStyle(\"passwords-match\");\r\n    } else {\r\n      setStyle(\"passwords-do-not-match\");\r\n    }\r\n  }, [newPassword, confirmedPassword]);\r\n\r\n  const cb = () => {};\r\n  const passwordChangeCallback = (status, res) => {\r\n    const callback = props.callback || cb;\r\n\r\n    if (status === \"Cancel\") callback(status);\r\n    else {\r\n      const responseStatus = hasData(res) ? res.status : \"\";\r\n      const message = hasData(res) ? res.message : \"\";\r\n\r\n      if (responseStatus === \"SUCCESS\") {\r\n        setDisplayErrorMsg(false);\r\n        callback(status);\r\n      } else {\r\n        //Incase the user provided wrong password for the old password field\r\n        //Or other System errors\r\n        setErrorMessage(message);\r\n        setDisplayErrorMsg(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <div className=\"cp-modal-header dismissible\">\r\n        <div className=\"modal-title h4\">\r\n          <Xl8 xid=\"pass001\">Change Password</Xl8>\r\n        </div>\r\n        {/* <button type=\"button\" class=\"close\">\r\n          <span aria-hidden=\"true\">×</span>\r\n          <span class=\"sr-only\">Close</span>\r\n        </button> */}\r\n      </div>\r\n      <div className=\"password-rules\">{passwordRule}</div>\r\n      {displayErrorMsg && (\r\n        <Alert variant=\"danger\" dismissible onClose={() => setDisplayErrorMsg(false)}>\r\n          {errorMessage}\r\n        </Alert>\r\n      )}\r\n\r\n      <Form\r\n        submitService={service}\r\n        title=\"\"\r\n        callback={passwordChangeCallback}\r\n        validateInputs={validateInputs}\r\n        action=\"add\"\r\n        cancellable\r\n        recordId={recordId}\r\n        key={style}\r\n      >\r\n        {chagneByAdmin ? (\r\n          <></>\r\n        ) : (\r\n          <LabelledInput\r\n            datafield\r\n            labelText={<Xl8 xid=\"pass003\">Old password</Xl8>}\r\n            inputType=\"password\"\r\n            name=\"oldPassword\"\r\n            required={true}\r\n            inputVal={oldPassword}\r\n            alt={<Xl8 xid=\"7\">Old password</Xl8>}\r\n            callback={cb}\r\n            onChange={changeInput}\r\n            spacebetween\r\n          />\r\n        )}\r\n        <LabelledInput\r\n          datafield\r\n          labelText={<Xl8 xid=\"pass004\">New password</Xl8>}\r\n          inputType=\"password\"\r\n          name=\"newPassword\"\r\n          required={true}\r\n          inputVal={newPassword}\r\n          alt={<Xl8 xid=\"7\">New password</Xl8>}\r\n          callback={cb}\r\n          onChange={changeInput}\r\n          spacebetween\r\n        />\r\n        <LabelledInput\r\n          datafield\r\n          labelText={<Xl8 xid=\"pass005\">Confirm password</Xl8>}\r\n          inputType=\"password\"\r\n          name=\"confirmPassword\"\r\n          required={true}\r\n          inputVal={confirmedPassword}\r\n          alt=\"nothing\"\r\n          callback={cb}\r\n          onChange={changeInput}\r\n          className={style}\r\n          spacebetween\r\n        />\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nChangePassword.propTypes = {};\r\n\r\nexport default ChangePassword;\r\n","C:\\DEV\\GitHub\\GTAS-UI\\src\\components\\header\\Header.js",["723","724","725","726"],"import React, { useContext, useRef, useState, useEffect } from \"react\";\r\nimport { Link } from \"@reach/router\";\r\nimport { navigate, useLocation } from \"@reach/router\";\r\nimport { UserContext } from \"../../context/user/UserContext\";\r\nimport { LiveEditContext } from \"../../context/translation/LiveEditContext\";\r\nimport RoleAuthenticator from \"../../context/roleAuthenticator/RoleAuthenticator\";\r\nimport { ACTION, FULLPATH_TO, ROLE } from \"../../utils/constants\";\r\nimport { hasData } from \"../../utils/utils\";\r\nimport Xl8 from \"../../components/xl8/Xl8\";\r\nimport Toast from \"../toast/Toast\";\r\nimport ChangePasswordModal from \"../../pages/admin/manageUsers/changePasswordModal/ChangePasswordModal\";\r\n\r\nimport wcoLogo from \"../../images/WCO_GTAS_header_brand.png\";\r\nimport {\r\n  Nav,\r\n  Navbar,\r\n  NavDropdown,\r\n  Form,\r\n  FormControl,\r\n  Button,\r\n  InputGroup\r\n} from \"react-bootstrap\";\r\nimport \"./Header.scss\";\r\n\r\nconst Header = () => {\r\n  const { getUserState, userAction } = useContext(UserContext);\r\n  const { getLiveEditState, action } = useContext(LiveEditContext);\r\n  const [currentLang] = useState(window.navigator.language);\r\n\r\n  const [isEdit, setIsEdit] = useState(getLiveEditState().isEdit);\r\n  const [showChangePasswordModal, setShowChangePasswordModal] = useState();\r\n  const [showTost, setShowToast] = useState(false);\r\n\r\n  const PASSWORD_CHANGE_CONFIRMATION = (\r\n    <Xl8 xid=\"head007\">Your password has been changed!</Xl8>\r\n  );\r\n  const PASSWORD_CHANGE_CONFIRMATION_HEADER = <Xl8 xid=\"head008\">Change Password</Xl8>;\r\n\r\n  const searchInputRef = useRef();\r\n\r\n  const user = getUserState();\r\n  const currentPath = useLocation();\r\n\r\n  const logout = () => {\r\n    userAction({ type: \"logoff\" });\r\n    action({ type: \"read\" });\r\n\r\n    navigate(FULLPATH_TO.LOGIN);\r\n  };\r\n\r\n  // allow a 'false' logout for admins translating pages outside the authed/loggedin bundle\r\n  const pseudoLogout = () => {\r\n    navigate(FULLPATH_TO.LOGIN);\r\n  };\r\n\r\n  if (user === undefined) logout();\r\n\r\n  const userFullName = user?.fullName || \"\";\r\n\r\n  const htab = {\r\n    DASH: \"/gtas/dashboard\",\r\n    POE: \"/gtas/poe\",\r\n    FLIGHT: \"/gtas/flights\",\r\n    VETTING: \"/gtas/vetting\",\r\n    TOOLS: \"/gtas/tools\",\r\n    LANG: \"/gtas/langEditor\",\r\n    ADMIN: \"/gtas/admin\"\r\n  };\r\n\r\n  const toggleRef = useRef();\r\n\r\n  const clickTab = tabName => {\r\n    if (toggleRef.current.clientHeight > 0) {\r\n      toggleRef.current.click();\r\n    }\r\n  };\r\n\r\n  const getActiveClass = tabName => {\r\n    return currentPath.pathname.startsWith(tabName) ? \"active-tab\" : \"\";\r\n  };\r\n\r\n  const handleSearchSubmit = () => {\r\n    const searchParam = searchInputRef.current.value;\r\n    if (hasData(searchParam)) {\r\n      navigate(`/gtas/search/${searchParam}`);\r\n    }\r\n  };\r\n\r\n  const changePasswordCallback = status => {\r\n    setShowChangePasswordModal(false);\r\n\r\n    if (status !== ACTION.CANCEL) {\r\n      setShowToast(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const editstate = getLiveEditState();\r\n    setIsEdit(editstate.isEdit);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Navbar sticky=\"top\" expand=\"md\" className=\"header-navbar\" variant=\"dark\">\r\n        <Navbar.Brand className=\"header-navbar-brand\">\r\n          <RoleAuthenticator roles={[ROLE.ADMIN, ROLE.FLIGHTVWR]} alt={<></>}>\r\n            <Link to=\"flights\" onClick={() => clickTab(htab.FLIGHT)}>\r\n              <img src={wcoLogo} />\r\n            </Link>\r\n          </RoleAuthenticator>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" ref={toggleRef} />\r\n        <Navbar.Collapse>\r\n          <Nav variant=\"tabs\" className=\"left-nav\">\r\n            <Nav.Link\r\n              as={Link}\r\n              to=\"flights\"\r\n              className={`${getActiveClass(htab.FLIGHT)}`}\r\n              onClick={() => clickTab(htab.FLIGHT)}\r\n            >\r\n              <Xl8 xid=\"head001\">Flights</Xl8>\r\n            </Nav.Link>\r\n            <RoleAuthenticator roles={[ROLE.ADMIN, ROLE.PAXVWR]} alt={<></>}>\r\n              <Nav.Link\r\n                as={Link}\r\n                to=\"vetting\"\r\n                className={`${getActiveClass(htab.VETTING)}`}\r\n                onClick={() => clickTab(htab.VETTING)}\r\n              >\r\n                <Xl8 xid=\"head002\">Vetting</Xl8>\r\n              </Nav.Link>\r\n            </RoleAuthenticator>\r\n            <Nav.Link\r\n              as={Link}\r\n              to=\"poe\"\r\n              className={`future ${getActiveClass(htab.POE)} optional`}\r\n              onClick={() => clickTab(htab.POE)}\r\n            >\r\n              <Xl8 xid=\"head007\">POE</Xl8>\r\n            </Nav.Link>\r\n\r\n            <Nav.Link\r\n              as={Link}\r\n              to=\"tools\"\r\n              className={`${getActiveClass(htab.TOOLS)}`}\r\n              onClick={() => clickTab(htab.TOOLS)}\r\n            >\r\n              <Xl8 xid=\"head004\">Tools</Xl8>\r\n            </Nav.Link>\r\n            <RoleAuthenticator roles={[ROLE.ADMIN]} alt={<></>}>\r\n              <Nav.Link\r\n                as={Link}\r\n                to=\"admin\"\r\n                className={`${getActiveClass(htab.ADMIN)}`}\r\n                onClick={() => clickTab(htab.ADMIN)}\r\n              >\r\n                <Xl8 xid=\"head003\">Admin</Xl8>\r\n              </Nav.Link>\r\n              <Nav.Link\r\n                as={Link}\r\n                to=\"langEditor\"\r\n                className={`${getActiveClass(htab.LANG)} optional`}\r\n                onClick={() => clickTab(htab.LANG)}\r\n              >\r\n                <i className=\"fa fa-language mx-sm-1 language-icon\"></i>\r\n                {currentLang}\r\n              </Nav.Link>\r\n            </RoleAuthenticator>\r\n          </Nav>\r\n          <Nav className=\"ml-auto\">\r\n            <Form inline>\r\n              <InputGroup>\r\n                <FormControl type=\"text\" ref={searchInputRef} className=\"search-150\" />\r\n                <InputGroup.Append>\r\n                  <Button variant=\"light\" onClick={handleSearchSubmit}>\r\n                    <i className=\"fa fa-search\"></i>\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Form>\r\n            <NavDropdown title={userFullName} id=\"basic-nav-dropdown\" className=\"right\">\r\n              <NavDropdown.Item onClick={() => setShowChangePasswordModal(true)}>\r\n                {<Xl8 xid=\"head005\">Change password</Xl8>}\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item as={Link} to=\"#\" onClick={logout}>\r\n                {<Xl8 xid=\"head006\">Logout</Xl8>}\r\n              </NavDropdown.Item>\r\n            </NavDropdown>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n      <ChangePasswordModal\r\n        show={showChangePasswordModal}\r\n        onHide={() => setShowChangePasswordModal(false)}\r\n        callback={changePasswordCallback}\r\n      />\r\n      <Toast\r\n        onClose={() => setShowToast(false)}\r\n        show={showTost}\r\n        header={PASSWORD_CHANGE_CONFIRMATION_HEADER}\r\n        body={PASSWORD_CHANGE_CONFIRMATION}\r\n        variant={\"success\"}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n",{"ruleId":"727","replacedBy":"728"},{"ruleId":"729","replacedBy":"730"},{"ruleId":"731","severity":1,"message":"732","line":34,"column":7,"nodeType":"733","messageId":"734","endLine":34,"endColumn":16},{"ruleId":"731","severity":1,"message":"735","line":77,"column":7,"nodeType":"733","messageId":"734","endLine":77,"endColumn":13},{"ruleId":"736","severity":1,"message":"737","line":47,"column":33,"nodeType":"738","messageId":"739","endLine":47,"endColumn":35},{"ruleId":"740","severity":1,"message":"741","line":74,"column":6,"nodeType":"742","endLine":74,"endColumn":8,"suggestions":"743"},{"ruleId":"740","severity":1,"message":"744","line":78,"column":6,"nodeType":"742","endLine":78,"endColumn":25,"suggestions":"745"},{"ruleId":"731","severity":1,"message":"746","line":2,"column":10,"nodeType":"733","messageId":"734","endLine":2,"endColumn":17},{"ruleId":"740","severity":1,"message":"747","line":29,"column":6,"nodeType":"742","endLine":29,"endColumn":8,"suggestions":"748"},{"ruleId":"731","severity":1,"message":"749","line":54,"column":10,"nodeType":"733","messageId":"734","endLine":54,"endColumn":21},{"ruleId":"731","severity":1,"message":"750","line":7,"column":8,"nodeType":"733","messageId":"734","endLine":7,"endColumn":13},{"ruleId":"740","severity":1,"message":"751","line":42,"column":6,"nodeType":"742","endLine":42,"endColumn":8,"suggestions":"752"},{"ruleId":"731","severity":1,"message":"753","line":8,"column":17,"nodeType":"733","messageId":"734","endLine":8,"endColumn":21},{"ruleId":"740","severity":1,"message":"754","line":19,"column":6,"nodeType":"742","endLine":19,"endColumn":8,"suggestions":"755"},{"ruleId":"731","severity":1,"message":"756","line":4,"column":10,"nodeType":"733","messageId":"734","endLine":4,"endColumn":14},{"ruleId":"731","severity":1,"message":"757","line":3,"column":8,"nodeType":"733","messageId":"734","endLine":3,"endColumn":17},{"ruleId":"731","severity":1,"message":"746","line":5,"column":10,"nodeType":"733","messageId":"734","endLine":5,"endColumn":17},{"ruleId":"731","severity":1,"message":"758","line":8,"column":9,"nodeType":"733","messageId":"734","endLine":8,"endColumn":17},{"ruleId":"731","severity":1,"message":"759","line":9,"column":10,"nodeType":"733","messageId":"734","endLine":9,"endColumn":19},{"ruleId":"731","severity":1,"message":"760","line":10,"column":9,"nodeType":"733","messageId":"734","endLine":10,"endColumn":18},{"ruleId":"731","severity":1,"message":"761","line":11,"column":10,"nodeType":"733","messageId":"734","endLine":11,"endColumn":13},{"ruleId":"731","severity":1,"message":"762","line":11,"column":15,"nodeType":"733","messageId":"734","endLine":11,"endColumn":21},{"ruleId":"731","severity":1,"message":"763","line":12,"column":29,"nodeType":"733","messageId":"734","endLine":12,"endColumn":35},{"ruleId":"740","severity":1,"message":"747","line":17,"column":6,"nodeType":"742","endLine":17,"endColumn":8,"suggestions":"764"},{"ruleId":"740","severity":1,"message":"765","line":232,"column":6,"nodeType":"742","endLine":232,"endColumn":20,"suggestions":"766"},{"ruleId":"767","severity":1,"message":"768","line":170,"column":13,"nodeType":"769","endLine":170,"endColumn":23},{"ruleId":"731","severity":1,"message":"770","line":51,"column":9,"nodeType":"733","messageId":"734","endLine":51,"endColumn":11},{"ruleId":"740","severity":1,"message":"771","line":204,"column":6,"nodeType":"742","endLine":204,"endColumn":19,"suggestions":"772"},{"ruleId":"767","severity":1,"message":"768","line":227,"column":11,"nodeType":"769","endLine":227,"endColumn":32},{"ruleId":"731","severity":1,"message":"773","line":4,"column":8,"nodeType":"733","messageId":"734","endLine":4,"endColumn":12},{"ruleId":"740","severity":1,"message":"771","line":78,"column":6,"nodeType":"742","endLine":78,"endColumn":8,"suggestions":"774"},{"ruleId":"740","severity":1,"message":"775","line":131,"column":6,"nodeType":"742","endLine":131,"endColumn":47,"suggestions":"776"},{"ruleId":"740","severity":1,"message":"777","line":136,"column":6,"nodeType":"742","endLine":136,"endColumn":19,"suggestions":"778"},{"ruleId":"740","severity":1,"message":"779","line":10,"column":6,"nodeType":"742","endLine":10,"endColumn":8,"suggestions":"780"},{"ruleId":"740","severity":1,"message":"781","line":92,"column":6,"nodeType":"742","endLine":92,"endColumn":8,"suggestions":"782"},{"ruleId":"731","severity":1,"message":"783","line":6,"column":10,"nodeType":"733","messageId":"734","endLine":6,"endColumn":16},{"ruleId":"731","severity":1,"message":"784","line":25,"column":10,"nodeType":"733","messageId":"734","endLine":25,"endColumn":13},{"ruleId":"740","severity":1,"message":"785","line":193,"column":6,"nodeType":"742","endLine":193,"endColumn":16,"suggestions":"786"},{"ruleId":"740","severity":1,"message":"787","line":206,"column":6,"nodeType":"742","endLine":206,"endColumn":8,"suggestions":"788"},{"ruleId":"740","severity":1,"message":"789","line":106,"column":6,"nodeType":"742","endLine":106,"endColumn":8,"suggestions":"790"},{"ruleId":"740","severity":1,"message":"771","line":172,"column":6,"nodeType":"742","endLine":172,"endColumn":22,"suggestions":"791"},{"ruleId":"740","severity":1,"message":"792","line":178,"column":6,"nodeType":"742","endLine":178,"endColumn":11,"suggestions":"793"},{"ruleId":"794","severity":1,"message":"795","line":215,"column":60,"nodeType":"796","messageId":"797","endLine":215,"endColumn":62},{"ruleId":"731","severity":1,"message":"798","line":6,"column":26,"nodeType":"733","messageId":"734","endLine":6,"endColumn":35},{"ruleId":"731","severity":1,"message":"746","line":7,"column":10,"nodeType":"733","messageId":"734","endLine":7,"endColumn":17},{"ruleId":"740","severity":1,"message":"799","line":136,"column":6,"nodeType":"742","endLine":136,"endColumn":19,"suggestions":"800"},{"ruleId":"731","severity":1,"message":"801","line":20,"column":3,"nodeType":"733","messageId":"734","endLine":20,"endColumn":13},{"ruleId":"802","severity":1,"message":"803","line":193,"column":20,"nodeType":"804","messageId":"797","endLine":193,"endColumn":22},{"ruleId":"802","severity":1,"message":"803","line":215,"column":20,"nodeType":"804","messageId":"797","endLine":215,"endColumn":22},{"ruleId":"740","severity":1,"message":"805","line":258,"column":6,"nodeType":"742","endLine":258,"endColumn":20,"suggestions":"806"},{"ruleId":"731","severity":1,"message":"807","line":195,"column":9,"nodeType":"733","messageId":"734","endLine":195,"endColumn":15},{"ruleId":"740","severity":1,"message":"771","line":230,"column":6,"nodeType":"742","endLine":230,"endColumn":8,"suggestions":"808"},{"ruleId":"794","severity":1,"message":"809","line":21,"column":45,"nodeType":"796","messageId":"797","endLine":21,"endColumn":47},{"ruleId":"740","severity":1,"message":"810","line":46,"column":6,"nodeType":"742","endLine":46,"endColumn":8,"suggestions":"811"},{"ruleId":"767","severity":1,"message":"768","line":116,"column":52,"nodeType":"769","endLine":116,"endColumn":73},{"ruleId":"794","severity":1,"message":"809","line":60,"column":28,"nodeType":"796","messageId":"797","endLine":60,"endColumn":30},{"ruleId":"740","severity":1,"message":"812","line":80,"column":6,"nodeType":"742","endLine":80,"endColumn":8,"suggestions":"813"},{"ruleId":"740","severity":1,"message":"812","line":44,"column":7,"nodeType":"742","endLine":44,"endColumn":9,"suggestions":"814"},{"ruleId":"794","severity":1,"message":"809","line":55,"column":29,"nodeType":"796","messageId":"797","endLine":55,"endColumn":31},{"ruleId":"767","severity":1,"message":"768","line":78,"column":9,"nodeType":"769","endLine":78,"endColumn":30},{"ruleId":"731","severity":1,"message":"750","line":4,"column":8,"nodeType":"733","messageId":"734","endLine":4,"endColumn":13},{"ruleId":"731","severity":1,"message":"815","line":14,"column":10,"nodeType":"733","messageId":"734","endLine":14,"endColumn":25},{"ruleId":"740","severity":1,"message":"816","line":51,"column":6,"nodeType":"742","endLine":51,"endColumn":34,"suggestions":"817"},{"ruleId":"731","severity":1,"message":"807","line":98,"column":9,"nodeType":"733","messageId":"734","endLine":98,"endColumn":15},{"ruleId":"731","severity":1,"message":"818","line":1,"column":27,"nodeType":"733","messageId":"734","endLine":1,"endColumn":36},{"ruleId":"731","severity":1,"message":"819","line":3,"column":19,"nodeType":"733","messageId":"734","endLine":3,"endColumn":24},{"ruleId":"731","severity":1,"message":"783","line":7,"column":10,"nodeType":"733","messageId":"734","endLine":7,"endColumn":16},{"ruleId":"731","severity":1,"message":"818","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":26},{"ruleId":"731","severity":1,"message":"820","line":14,"column":15,"nodeType":"733","messageId":"734","endLine":14,"endColumn":21},{"ruleId":"731","severity":1,"message":"821","line":18,"column":10,"nodeType":"733","messageId":"734","endLine":18,"endColumn":11},{"ruleId":"731","severity":1,"message":"822","line":18,"column":13,"nodeType":"733","messageId":"734","endLine":18,"endColumn":17},{"ruleId":"731","severity":1,"message":"823","line":20,"column":9,"nodeType":"733","messageId":"734","endLine":20,"endColumn":24},{"ruleId":"740","severity":1,"message":"747","line":43,"column":6,"nodeType":"742","endLine":43,"endColumn":8,"suggestions":"824"},{"ruleId":"731","severity":1,"message":"783","line":2,"column":36,"nodeType":"733","messageId":"734","endLine":2,"endColumn":42},{"ruleId":"731","severity":1,"message":"825","line":16,"column":24,"nodeType":"733","messageId":"734","endLine":16,"endColumn":39},{"ruleId":"731","severity":1,"message":"826","line":17,"column":19,"nodeType":"733","messageId":"734","endLine":17,"endColumn":29},{"ruleId":"731","severity":1,"message":"750","line":8,"column":8,"nodeType":"733","messageId":"734","endLine":8,"endColumn":13},{"ruleId":"731","severity":1,"message":"825","line":16,"column":24,"nodeType":"733","messageId":"734","endLine":16,"endColumn":39},{"ruleId":"731","severity":1,"message":"826","line":17,"column":19,"nodeType":"733","messageId":"734","endLine":17,"endColumn":29},{"ruleId":"731","severity":1,"message":"827","line":60,"column":13,"nodeType":"733","messageId":"734","endLine":60,"endColumn":16},{"ruleId":"731","severity":1,"message":"818","line":1,"column":27,"nodeType":"733","messageId":"734","endLine":1,"endColumn":36},{"ruleId":"731","severity":1,"message":"828","line":1,"column":38,"nodeType":"733","messageId":"734","endLine":1,"endColumn":44},{"ruleId":"731","severity":1,"message":"756","line":1,"column":10,"nodeType":"733","messageId":"734","endLine":1,"endColumn":14},{"ruleId":"731","severity":1,"message":"829","line":2,"column":19,"nodeType":"733","messageId":"734","endLine":2,"endColumn":26},{"ruleId":"731","severity":1,"message":"830","line":27,"column":7,"nodeType":"733","messageId":"734","endLine":27,"endColumn":14},{"ruleId":"731","severity":1,"message":"831","line":28,"column":7,"nodeType":"733","messageId":"734","endLine":28,"endColumn":15},{"ruleId":"731","severity":1,"message":"832","line":29,"column":7,"nodeType":"733","messageId":"734","endLine":29,"endColumn":12},{"ruleId":"731","severity":1,"message":"833","line":30,"column":7,"nodeType":"733","messageId":"734","endLine":30,"endColumn":16},{"ruleId":"731","severity":1,"message":"834","line":113,"column":7,"nodeType":"733","messageId":"734","endLine":113,"endColumn":17},{"ruleId":"731","severity":1,"message":"835","line":33,"column":11,"nodeType":"733","messageId":"734","endLine":33,"endColumn":17},{"ruleId":"731","severity":1,"message":"836","line":43,"column":11,"nodeType":"733","messageId":"734","endLine":43,"endColumn":15},{"ruleId":"740","severity":1,"message":"837","line":57,"column":6,"nodeType":"742","endLine":57,"endColumn":8,"suggestions":"838"},{"ruleId":"740","severity":1,"message":"839","line":88,"column":6,"nodeType":"742","endLine":88,"endColumn":16,"suggestions":"840"},{"ruleId":"740","severity":1,"message":"841","line":132,"column":6,"nodeType":"742","endLine":132,"endColumn":14,"suggestions":"842"},{"ruleId":"740","severity":1,"message":"843","line":162,"column":6,"nodeType":"742","endLine":162,"endColumn":8,"suggestions":"844"},{"ruleId":"767","severity":1,"message":"768","line":166,"column":30,"nodeType":"769","endLine":166,"endColumn":58},{"ruleId":"740","severity":1,"message":"845","line":44,"column":6,"nodeType":"742","endLine":44,"endColumn":8,"suggestions":"846"},{"ruleId":"740","severity":1,"message":"847","line":48,"column":6,"nodeType":"742","endLine":48,"endColumn":12,"suggestions":"848"},{"ruleId":"731","severity":1,"message":"828","line":1,"column":50,"nodeType":"733","messageId":"734","endLine":1,"endColumn":56},{"ruleId":"731","severity":1,"message":"818","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":26},{"ruleId":"731","severity":1,"message":"849","line":1,"column":28,"nodeType":"733","messageId":"734","endLine":1,"endColumn":36},{"ruleId":"731","severity":1,"message":"783","line":2,"column":21,"nodeType":"733","messageId":"734","endLine":2,"endColumn":27},{"ruleId":"731","severity":1,"message":"850","line":15,"column":8,"nodeType":"733","messageId":"734","endLine":15,"endColumn":15},{"ruleId":"731","severity":1,"message":"798","line":3,"column":18,"nodeType":"733","messageId":"734","endLine":3,"endColumn":27},{"ruleId":"740","severity":1,"message":"851","line":393,"column":6,"nodeType":"742","endLine":393,"endColumn":14,"suggestions":"852"},{"ruleId":"740","severity":1,"message":"853","line":419,"column":6,"nodeType":"742","endLine":419,"endColumn":15,"suggestions":"854"},{"ruleId":"740","severity":1,"message":"855","line":679,"column":6,"nodeType":"742","endLine":679,"endColumn":8,"suggestions":"856"},{"ruleId":"731","severity":1,"message":"857","line":2,"column":8,"nodeType":"733","messageId":"734","endLine":2,"endColumn":11},{"ruleId":"731","severity":1,"message":"783","line":4,"column":10,"nodeType":"733","messageId":"734","endLine":4,"endColumn":16},{"ruleId":"731","severity":1,"message":"773","line":3,"column":8,"nodeType":"733","messageId":"734","endLine":3,"endColumn":12},{"ruleId":"731","severity":1,"message":"858","line":51,"column":19,"nodeType":"733","messageId":"734","endLine":51,"endColumn":29},{"ruleId":"731","severity":1,"message":"859","line":52,"column":16,"nodeType":"733","messageId":"734","endLine":52,"endColumn":23},{"ruleId":"740","severity":1,"message":"860","line":96,"column":6,"nodeType":"742","endLine":96,"endColumn":8,"suggestions":"861"},{"ruleId":"731","severity":1,"message":"746","line":2,"column":10,"nodeType":"733","messageId":"734","endLine":2,"endColumn":17},{"ruleId":"731","severity":1,"message":"862","line":12,"column":10,"nodeType":"733","messageId":"734","endLine":12,"endColumn":15},{"ruleId":"740","severity":1,"message":"863","line":42,"column":6,"nodeType":"742","endLine":42,"endColumn":8,"suggestions":"864"},{"ruleId":"731","severity":1,"message":"783","line":2,"column":10,"nodeType":"733","messageId":"734","endLine":2,"endColumn":16},{"ruleId":"740","severity":1,"message":"865","line":54,"column":6,"nodeType":"742","endLine":54,"endColumn":8,"suggestions":"866"},{"ruleId":"731","severity":1,"message":"783","line":3,"column":10,"nodeType":"733","messageId":"734","endLine":3,"endColumn":16},{"ruleId":"731","severity":1,"message":"867","line":3,"column":10,"nodeType":"733","messageId":"734","endLine":3,"endColumn":21},{"ruleId":"731","severity":1,"message":"868","line":3,"column":23,"nodeType":"733","messageId":"734","endLine":3,"endColumn":31},{"ruleId":"740","severity":1,"message":"869","line":64,"column":6,"nodeType":"742","endLine":64,"endColumn":8,"suggestions":"870"},{"ruleId":"731","severity":1,"message":"783","line":4,"column":10,"nodeType":"733","messageId":"734","endLine":4,"endColumn":16},{"ruleId":"731","severity":1,"message":"783","line":3,"column":10,"nodeType":"733","messageId":"734","endLine":3,"endColumn":16},{"ruleId":"731","severity":1,"message":"801","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":13},{"ruleId":"731","severity":1,"message":"818","line":1,"column":27,"nodeType":"733","messageId":"734","endLine":1,"endColumn":36},{"ruleId":"731","severity":1,"message":"871","line":2,"column":19,"nodeType":"733","messageId":"734","endLine":2,"endColumn":27},{"ruleId":"794","severity":1,"message":"795","line":322,"column":20,"nodeType":"796","messageId":"797","endLine":322,"endColumn":22},{"ruleId":"731","severity":1,"message":"849","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":25},{"ruleId":"731","severity":1,"message":"818","line":1,"column":27,"nodeType":"733","messageId":"734","endLine":1,"endColumn":36},{"ruleId":"731","severity":1,"message":"783","line":2,"column":17,"nodeType":"733","messageId":"734","endLine":2,"endColumn":23},{"ruleId":"731","severity":1,"message":"872","line":2,"column":36,"nodeType":"733","messageId":"734","endLine":2,"endColumn":41},{"ruleId":"731","severity":1,"message":"857","line":4,"column":8,"nodeType":"733","messageId":"734","endLine":4,"endColumn":11},{"ruleId":"731","severity":1,"message":"746","line":8,"column":10,"nodeType":"733","messageId":"734","endLine":8,"endColumn":17},{"ruleId":"731","severity":1,"message":"750","line":6,"column":8,"nodeType":"733","messageId":"734","endLine":6,"endColumn":13},{"ruleId":"731","severity":1,"message":"873","line":30,"column":10,"nodeType":"733","messageId":"734","endLine":30,"endColumn":16},{"ruleId":"731","severity":1,"message":"874","line":52,"column":9,"nodeType":"733","messageId":"734","endLine":52,"endColumn":21},{"ruleId":"740","severity":1,"message":"747","line":100,"column":6,"nodeType":"742","endLine":100,"endColumn":8,"suggestions":"875"},{"ruleId":"876","severity":1,"message":"877","line":108,"column":15,"nodeType":"878","endLine":108,"endColumn":36},"no-native-reassign",["879"],"no-negated-in-lhs",["880"],"no-unused-vars","'Dashboard' is assigned a value but never used.","Identifier","unusedVar","'GModal' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'flightId'. Either include it or remove the dependency array.","ArrayExpression",["881"],"React Hook useEffect has a missing dependency: 'currentPaxSeat'. Either include it or remove the dependency array.",["882"],"'hasData' is defined but never used.","React Hook useEffect has a missing dependency: 'getLiveEditState'. Either include it or remove the dependency array.",["883"],"'lookupState' is assigned a value but never used.","'Title' is defined but never used.","React Hook useEffect has a missing dependency: 'resetToken'. Either include it or remove the dependency array.",["884"],"'Card' is defined but never used.","React Hook useEffect has a missing dependency: 'ctx'. Either include it or remove the dependency array.",["885"],"'Link' is defined but never used.","'LangModal' is defined but never used.","'location' is assigned a value but never used.","'showModal' is assigned a value but never used.","'hideModal' is assigned a value but never used.","'xid' is assigned a value but never used.","'setXl8' is assigned a value but never used.","'action' is assigned a value but never used.",["886"],"React Hook useEffect has missing dependencies: 'allData' and 'tablekey'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setData' needs the current value of 'allData'.",["887"],"react/style-prop-object","Style prop value must be an object","JSXAttribute","'cb' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["888"],"'Main' is defined but never used.",["889"],"React Hook useEffect has a missing dependency: 'fetchHitSummaryData'. Either include it or remove the dependency array.",["890"],"React Hook useEffect has missing dependencies: 'fetchHistoricalHitsData' and 'fetchWatchlistNamesData'. Either include them or remove the dependency array.",["891"],"React Hook useEffect has a missing dependency: 'props.paxData'. Either include it or remove the dependency array. If 'setGraph' needs the current value of 'props.paxData', you can also switch to useReducer instead of useState and read 'props.paxData' in the reducer.",["892"],"React Hook useEffect has missing dependencies: 'ctx' and 'launchModal'. Either include them or remove the dependency array.",["893"],"'Button' is defined but never used.","'tab' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchTableData'. Either include it or remove the dependency array.",["894"],"React Hook useEffect has missing dependencies: 'ctx' and 'triggerShowModal'. Either include them or remove the dependency array.",["895"],"React Hook useEffect has missing dependencies: 'key' and 'props.location?.state?.data'. Either include them or remove the dependency array. You can also do a functional update 'setKey(k => ...)' if you only need 'key' in the 'setKey' call.",["896"],["897"],"React Hook useEffect has a missing dependency: 'TAB.PAX'. Either include it or remove the dependency array.",["898"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Container' is defined but never used.","React Hook useEffect has missing dependencies: 'params' and 'refreshKey'. Either include them or remove the dependency array. You can also do a functional update 'setRefreshKey(r => ...)' if you only need 'refreshKey' in the 'setRefreshKey' call.",["899"],"'localeDate' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","React Hook useEffect has missing dependencies: 'allData' and 'key'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setData' needs the current value of 'allData'.",["900"],"'button' is assigned a value but never used.",["901"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'logTypes.length' and 'selRefreshKey'. Either include them or remove the dependency array. You can also do a functional update 'setSelRefreshKey(s => ...)' if you only need 'selRefreshKey' in the 'setSelRefreshKey' call.",["902"],"React Hook useEffect has a missing dependency: 'filterKey'. Either include it or remove the dependency array. You can also do a functional update 'setFilterKey(f => ...)' if you only need 'filterKey' in the 'setFilterKey' call.",["903"],["904"],"'filesForDisplay' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'paxId' and 'tableKey'. Either include them or remove the dependency array. You can also do a functional update 'setTableKey(t => ...)' if you only need 'tableKey' in the 'setTableKey' call.",["905"],"'useEffect' is defined but never used.","'users' is defined but never used.","'setKey' is assigned a value but never used.","'t' is assigned a value but never used.","'i18n' is assigned a value but never used.","'currentLanguage' is assigned a value but never used.",["906"],"'setAlertContent' is assigned a value but never used.","'setVariant' is assigned a value but never used.","'msg' is assigned a value but never used.","'useRef' is defined but never used.","'asArray' is defined but never used.","'PUTBODY' is assigned a value but never used.","'POSTBODY' is assigned a value but never used.","'PUTID' is assigned a value but never used.","'PUTPARAMS' is assigned a value but never used.","'NOTE_TYPES' is assigned a value but never used.","'signal' is assigned a value but never used.","'data' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchkey' and 'interval'. Either include them or remove the dependency array. You can also do a functional update 'setFetchKey(f => ...)' if you only need 'fetchkey' in the 'setFetchKey' call.",["907"],"React Hook useEffect has missing dependencies: 'calcParams' and 'fetchData'. Either include them or remove the dependency array.",["908"],"React Hook useEffect has a missing dependency: 'bindChildren'. Either include it or remove the dependency array.",["909"],"React Hook useEffect has missing dependencies: 'bindChildren', 'datafieldNames', 'fieldMap', 'fields', and 'props.children'. Either include them or remove the dependency array.",["910"],"React Hook useEffect has missing dependencies: 'getData', 'parseData', 'props.data', 'props.service', and 'validateProps'. Either include them or remove the dependency array.",["911"],"React Hook useEffect has a missing dependency: 'parseData'. Either include it or remove the dependency array.",["912"],"'useState' is defined but never used.","'Confirm' is defined but never used.","React Hook useEffect has missing dependencies: 'fieldConfigWithData' and 'key'. Either include them or remove the dependency array. You can also do a functional update 'setKey(k => ...)' if you only need 'key' in the 'setKey' call.",["913"],"React Hook useEffect has a missing dependency: 'refreshHighlight'. Either include it or remove the dependency array.",["914"],"React Hook useEffect has missing dependencies: 'getLookupState', 'key', 'lookupAction', and 'props.data?.query'. Either include them or remove the dependency array. If 'setData' needs the current value of 'props.data.query', you can also switch to useReducer instead of useState and read 'props.data.query' in the reducer.",["915"],"'Xl8' is defined but never used.","'setVaquita' is assigned a value but never used.","'setSave' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activateGraph', 'setCypherUrl', 'vaquita.graph.centerRootNode', and 'vaquita.rest'. Either include them or remove the dependency array.",["916"],"'roles' is defined but never used.","React Hook useEffect has missing dependencies: 'init' and 'values'. Either include them or remove the dependency array.",["917"],"React Hook useEffect has a missing dependency: 'getTidyFlightLegData'. Either include it or remove the dependency array.",["918"],"'SplitButton' is defined but never used.","'Dropdown' is defined but never used.","React Hook useEffect has a missing dependency: 'props.usersEmails'. Either include it or remove the dependency array.",["919"],"'asHash53' is defined but never used.","'Alert' is defined but never used.","'isEdit' is assigned a value but never used.","'pseudoLogout' is assigned a value but never used.",["920"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"921","fix":"922"},{"desc":"923","fix":"924"},{"desc":"925","fix":"926"},{"desc":"927","fix":"928"},{"desc":"929","fix":"930"},{"desc":"925","fix":"931"},{"desc":"932","fix":"933"},{"desc":"934","fix":"935"},{"desc":"936","fix":"937"},{"desc":"938","fix":"939"},{"desc":"940","fix":"941"},{"desc":"942","fix":"943"},{"desc":"944","fix":"945"},{"desc":"946","fix":"947"},{"desc":"948","fix":"949"},{"desc":"950","fix":"951"},{"desc":"952","fix":"953"},{"desc":"954","fix":"955"},{"desc":"956","fix":"957"},{"desc":"958","fix":"959"},{"desc":"936","fix":"960"},{"desc":"961","fix":"962"},{"desc":"963","fix":"964"},{"desc":"963","fix":"965"},{"desc":"966","fix":"967"},{"desc":"925","fix":"968"},{"desc":"969","fix":"970"},{"desc":"971","fix":"972"},{"desc":"973","fix":"974"},{"desc":"975","fix":"976"},{"desc":"977","fix":"978"},{"desc":"979","fix":"980"},{"desc":"981","fix":"982"},{"desc":"983","fix":"984"},{"desc":"985","fix":"986"},{"desc":"987","fix":"988"},{"desc":"989","fix":"990"},{"desc":"991","fix":"992"},{"desc":"993","fix":"994"},{"desc":"925","fix":"995"},"Update the dependencies array to be: [flightId]",{"range":"996","text":"997"},"Update the dependencies array to be: [currentPaxSeat, reservedSeatsInfo]",{"range":"998","text":"999"},"Update the dependencies array to be: [getLiveEditState]",{"range":"1000","text":"1001"},"Update the dependencies array to be: [resetToken]",{"range":"1002","text":"1003"},"Update the dependencies array to be: [ctx]",{"range":"1004","text":"1005"},{"range":"1006","text":"1001"},"Update the dependencies array to be: [allData, hitData, tab, tablekey]",{"range":"1007","text":"1008"},"Update the dependencies array to be: [fetchData, props.paxId]",{"range":"1009","text":"1010"},"Update the dependencies array to be: [fetchData]",{"range":"1011","text":"1012"},"Update the dependencies array to be: [props.paxId, props.hitSummaryRefreshKey, fetchHitSummaryData]",{"range":"1013","text":"1014"},"Update the dependencies array to be: [fetchHistoricalHitsData, fetchWatchlistNamesData, props.paxId]",{"range":"1015","text":"1016"},"Update the dependencies array to be: [props.paxData]",{"range":"1017","text":"1018"},"Update the dependencies array to be: [ctx, launchModal]",{"range":"1019","text":"1020"},"Update the dependencies array to be: [endpoint, fetchTableData]",{"range":"1021","text":"1022"},"Update the dependencies array to be: [ctx, triggerShowModal]",{"range":"1023","text":"1024"},"Update the dependencies array to be: [key, props.location?.state?.data]",{"range":"1025","text":"1026"},"Update the dependencies array to be: [fetchData, tab, wlcatData]",{"range":"1027","text":"1028"},"Update the dependencies array to be: [TAB.PAX, tab]",{"range":"1029","text":"1030"},"Update the dependencies array to be: [params, refreshKey, searchParam]",{"range":"1031","text":"1032"},"Update the dependencies array to be: [allData, hitData, key, tab]",{"range":"1033","text":"1034"},{"range":"1035","text":"1012"},"Update the dependencies array to be: [logTypes.length, selRefreshKey]",{"range":"1036","text":"1037"},"Update the dependencies array to be: [filterKey]",{"range":"1038","text":"1039"},{"range":"1040","text":"1039"},"Update the dependencies array to be: [paxId, props.attachmentRefreshKey, tableKey]",{"range":"1041","text":"1042"},{"range":"1043","text":"1001"},"Update the dependencies array to be: [fetchkey, interval]",{"range":"1044","text":"1045"},"Update the dependencies array to be: [calcParams, fetchData, fetchkey]",{"range":"1046","text":"1047"},"Update the dependencies array to be: [bindChildren, fields]",{"range":"1048","text":"1049"},"Update the dependencies array to be: [bindChildren, datafieldNames, fieldMap, fields, props.children]",{"range":"1050","text":"1051"},"Update the dependencies array to be: [getData, parseData, props.data, props.service, validateProps]",{"range":"1052","text":"1053"},"Update the dependencies array to be: [data, parseData]",{"range":"1054","text":"1055"},"Update the dependencies array to be: [fieldConfigWithData, key, loaded]",{"range":"1056","text":"1057"},"Update the dependencies array to be: [refresh, refreshHighlight]",{"range":"1058","text":"1059"},"Update the dependencies array to be: [getLookupState, key, lookupAction, props.data?.query]",{"range":"1060","text":"1061"},"Update the dependencies array to be: [activateGraph, setCypherUrl, vaquita.graph.centerRootNode, vaquita.rest]",{"range":"1062","text":"1063"},"Update the dependencies array to be: [init, values]",{"range":"1064","text":"1065"},"Update the dependencies array to be: [getTidyFlightLegData]",{"range":"1066","text":"1067"},"Update the dependencies array to be: [props.usersEmails]",{"range":"1068","text":"1069"},{"range":"1070","text":"1001"},[2765,2767],"[flightId]",[2866,2885],"[currentPaxSeat, reservedSeatsInfo]",[869,871],"[getLiveEditState]",[1601,1603],"[resetToken]",[726,728],"[ctx]",[668,670],[8114,8128],"[allData, hitData, tab, tablekey]",[7135,7148],"[fetchData, props.paxId]",[2655,2657],"[fetchData]",[4524,4565],"[props.paxId, props.hitSummaryRefreshKey, fetchHitSummaryData]",[4661,4674],"[fetchHistoricalHitsData, fetchWatchlistNamesData, props.paxId]",[350,352],"[props.paxData]",[2784,2786],"[ctx, launchModal]",[6287,6297],"[endpoint, fetchTableData]",[6657,6659],"[ctx, triggerShowModal]",[3550,3552],"[key, props.location?.state?.data]",[5543,5559],"[fetchData, tab, wlcatData]",[5742,5747],"[TAB.PAX, tab]",[3792,3805],"[params, refreshKey, searchParam]",[7792,7806],"[allData, hitData, key, tab]",[7445,7447],[1668,1670],"[logTypes.length, selRefreshKey]",[2561,2563],"[filterKey]",[1642,1644],[1855,1883],"[paxId, props.attachmentRefreshKey, tableKey]",[1374,1376],[1770,1772],"[fetchkey, interval]",[2486,2496],"[calcParams, fetchData, fetchkey]",[3803,3811],"[bindChildren, fields]",[4804,4806],"[bindChildren, datafieldNames, fieldMap, fields, props.children]",[1778,1780],"[getData, parseData, props.data, props.service, validateProps]",[1834,1840],"[data, parseData]",[13685,13693],"[fieldConfigWithData, key, loaded]",[14204,14213],"[refresh, refreshHighlight]",[21199,21201],"[getLookupState, key, lookupAction, props.data?.query]",[3478,3480],"[activateGraph, setCypherUrl, vaquita.graph.centerRootNode, vaquita.rest]",[1321,1323],"[init, values]",[1445,1447],"[getTidyFlightLegData]",[1981,1983],"[props.usersEmails]",[3000,3002]]